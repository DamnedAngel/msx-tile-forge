name: 1. Dev Build (TKT_XXXXX Branches)
on:
  workflow_dispatch:

jobs:
  #########################################
  # A. Validate branch and generate version
  #########################################
  generate-version:
    name: Validate Branch & Generate Version
    runs-on: ubuntu-latest
    outputs:
      version_string: ${{ steps.versioning.outputs.VERSION_STRING }}
      debian_version: ${{ steps.versioning.outputs.DEBIAN_VERSION }}
      prepared_source_artifact_name: ${{ steps.versioning.outputs.PREPARED_SOURCE_ARTIFACT_NAME }}
      win_filename: ${{ steps.versioning.outputs.WIN_FILENAME }}
      lin_filename: ${{ steps.versioning.outputs.LIN_FILENAME }}
      deb_filename: ${{ steps.versioning.outputs.DEB_FILENAME }}
      src_filename: ${{ steps.versioning.outputs.SRC_FILENAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Branch Name
        shell: bash
        run: |
          if [[ ! "${{ github.ref_name }}" == TKT_* ]]; then
            echo "::error::This workflow can only be run on branches starting with 'TKT_'."
            exit 1
          fi

      - name: Construct Dev Version String and Filenames
        id: versioning
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          TICKET_NUM=$(echo "$BRANCH_NAME" | grep -oP 'TKT_[0-9]+' | sed 's/TKT_//')
          
          MILESTONE_TITLE=$(gh issue view "$TICKET_NUM" --json milestone --jq '.milestone.title')
          if [ -z "$MILESTONE_TITLE" ] || [ "$MILESTONE_TITLE" == "null" ]; then
            echo "::error::Issue TKT_$TICKET_NUM is not assigned to a milestone."
            exit 1
          fi
          
          BASE_VERSION=$(echo "$MILESTONE_TITLE" | grep -oP 'REL_[0-9.]+' | sed 's/REL_//')
          if [ -z "$BASE_VERSION" ]; then
            echo "::error::Milestone title '$MILESTONE_TITLE' does not contain 'REL_XX.YY.ZZ' version string."
            exit 1
          fi

          BRANCH_BUILD_NUM=$(git rev-list --count HEAD)
          GLOBAL_RUN_NUM="${{ github.run_number }}"
          
          # This is the full version string used inside the application
          FINAL_VERSION="${BASE_VERSION}_dev${TICKET_NUM}.${BRANCH_BUILD_NUM}_${GLOBAL_RUN_NUM}"
          
          # This is the base for all filenames
          BASE_NAME="msxtileforge_${FINAL_VERSION}"
          
          # Generate all required variables and filenames
          echo "VERSION_STRING=${FINAL_VERSION}" >> $GITHUB_OUTPUT
          echo "DEBIAN_VERSION=$(echo "$FINAL_VERSION" | sed -e 's/_/~/g')" >> $GITHUB_OUTPUT
          echo "PREPARED_SOURCE_ARTIFACT_NAME=prepared-source-${{ github.run_id }}-${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "WIN_FILENAME=${BASE_NAME}_win.zip" >> $GITHUB_OUTPUT
          echo "LIN_FILENAME=${BASE_NAME}_lin.tar.gz" >> $GITHUB_OUTPUT
          echo "DEB_FILENAME=${BASE_NAME}_deb.deb" >> $GITHUB_OUTPUT
          echo "SRC_FILENAME=${BASE_NAME}_src.zip" >> $GITHUB_OUTPUT

  #########################################
  # B. Prepare source code
  #########################################
  prepare-source:
    name: Prepare Source Code
    needs: generate-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Update version strings using reusable action
        uses: ./.github/actions/update-version-in-files
        with:
          version_string: ${{ needs.generate-version.outputs.version_string }}
          debian_version: ${{ needs.generate-version.outputs.debian_version }}

      - name: Upload prepared source as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
          path: .

  #########################################
  # C. Call the Reusable Builders
  #########################################
  build-linux:
    name: Call Linux Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-linux.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      lin_filename: ${{ needs.generate-version.outputs.lin_filename }}
      deb_filename: ${{ needs.generate-version.outputs.deb_filename }}

  build-windows:
    name: Call Windows Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-windows.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      win_filename: ${{ needs.generate-version.outputs.win_filename }}

  build-source:
    name: Call Source Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-source.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      src_filename: ${{ needs.generate-version.outputs.src_filename }}

  #########################################
  # D. Finalize and Publish Developer Artifacts
  #########################################
  publish-dev-artifacts:
    name: Publish Developer Artifacts
    needs: [build-linux, build-windows, build-source]
    runs-on: ubuntu-latest
    steps:
      # 1. Download the intermediate (double-zipped) artifacts from the build jobs
      - name: Download all intermediate build artifacts
        uses: actions/download-artifact@v4
        with:
          path: intermediate-artifacts

      # 2. Prepare a clean directory for the final packages
      - name: Prepare a clean directory for final packages
        run: mkdir final-packages

      # 3. Find, unwrap, and move the actual packages into the clean directory
      - name: Unwrap and collect final packages
        shell: bash
        run: |
          echo "Unwrapping final packages..."
          # The find command looks inside the downloaded artifact folders, finds the actual
          # package file (e.g., the .zip, .tar.gz, or .deb), and moves it to our clean directory.
          find intermediate-artifacts/ -mindepth 2 -type f -exec mv {} final-packages/ \;
          
          echo "Final packages are ready for upload:"
          ls -l final-packages/

      # 4. Upload the clean, single-zipped packages as the final user-facing artifacts.
      # These will appear on the workflow summary page for users to download.
      - name: Upload final, single-zipped artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Final-Packages
          path: final-packages/