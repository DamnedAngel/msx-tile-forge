# .github/workflows/release.yml

name: MSX Tile Forge Build Orchestrator

on:
  workflow_dispatch:
    ### REMOVED: The 'inputs' section is gone. The user only chooses a branch.

jobs:
  ############################################################
  # JOB 1: Determine Build Type, Calculate Version, and Trigger Worker Workflows
  ############################################################
  call_builds:
    name: Validate Branch & Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version_string: ${{ steps.version_string_generator.outputs.VERSION_STRING }}
      build_type: ${{ steps.determine_build_type.outputs.BUILD_TYPE }} ### NEW: Output the build type

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for commit counts and tag lookups

      ### NEW: This step determines the build type from the branch name.
      - name: Determine Build Type and Validate Branch
        id: determine_build_type
        shell: bash
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "1. Validating branch: $BRANCH_NAME"
          
          if [[ $BRANCH_NAME == TKT_* ]]; then
            echo "Branch type is TKT. Setting build type to 'dev'."
            echo "BUILD_TYPE=dev" >> $GITHUB_OUTPUT
          elif [[ $BRANCH_NAME == REL_* ]]; then
            echo "Branch type is REL. Setting build type to 'rc'."
            echo "BUILD_TYPE=rc" >> $GITHUB_OUTPUT
          else
            echo "::error::Invalid branch for this workflow."
            echo "This workflow can only be run on branches starting with 'TKT_' or 'REL_'."
            exit 1
          fi

      ### MODIFIED: This step is now conditional and only runs for 'dev' builds.
      - name: Construct Dev Version String
        if: steps.determine_build_type.outputs.BUILD_TYPE == 'dev'
        id: versioning_dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          echo "--- Start Dev Version Construction ---"
          BRANCH_NAME="${{ github.ref_name }}"
          TICKET_NUM=$(echo "$BRANCH_NAME" | grep -oP 'TKT_[0-9]+' | sed 's/TKT_//')
          echo "2. Parsed TICKET_NUM: $TICKET_NUM"
          
          MILESTONE_TITLE=$(gh issue view "$TICKET_NUM" --json milestone --jq '.milestone.title')
          if [ -z "$MILESTONE_TITLE" ] || [ "$MILESTONE_TITLE" == "null" ]; then
            echo "::error::Issue TKT_$TICKET_NUM is not assigned to a milestone."
            exit 1
          fi
          echo "3. Fetched Milestone Title: $MILESTONE_TITLE"
          
          BASE_VERSION=$(echo "$MILESTONE_TITLE" | grep -oP 'REL_[0-9.]+' | sed 's/REL_//')
          if [ -z "$BASE_VERSION" ]; then
            echo "::error::Milestone title '$MILESTONE_TITLE' does not contain 'REL_XX.YY.ZZ' version string."
            exit 1
          fi
          echo "4. Parsed BASE_VERSION: $BASE_VERSION"

          BRANCH_BUILD_NUM=$(git rev-list --count HEAD)
          GLOBAL_BUILD_NUM="${{ github.run_number }}"
          
          FINAL_VERSION="${BASE_VERSION}_dev${TICKET_NUM}.${BRANCH_BUILD_NUM}_${GLOBAL_BUILD_NUM}"
          echo "7. Assembled FINAL_VERSION: $FINAL_VERSION"
          echo "--- End Dev Version Construction ---"
          
          echo "VERSION_STRING=${FINAL_VERSION}" >> $GITHUB_OUTPUT

      ### NEW: This step contains the logic for RC versioning.
      - name: Construct RC Version String
        if: steps.determine_build_type.outputs.BUILD_TYPE == 'rc'
        id: versioning_rc
        shell: bash
        run: |
          echo "--- Start RC Version Construction ---"
          BRANCH_NAME="${{ github.ref_name }}"
          
          BASE_VERSION=$(echo "$BRANCH_NAME" | sed 's/REL_//')
          echo "1. Parsed BASE_VERSION: $BASE_VERSION"
          
          # Fetch all tags to ensure we have the latest information
          git fetch --tags
          
          # Find the highest existing RC number for this base version
          LATEST_RC_NUM=$(git tag --list "v${BASE_VERSION}_rc*" | sed 's/.*_rc//' | sort -n | tail -n 1)
          
          NEXT_RC_NUM=1
          if [[ -n "$LATEST_RC_NUM" ]]; then
            NEXT_RC_NUM=$((LATEST_RC_NUM + 1))
            echo "2. Found latest RC: $LATEST_RC_NUM. Next RC will be: $NEXT_RC_NUM"
          else
            echo "2. No existing RC tags found for v$BASE_VERSION. Starting with RC: $NEXT_RC_NUM"
          fi
          
          GLOBAL_BUILD_NUM="${{ github.run_number }}"
          
          FINAL_VERSION="${BASE_VERSION}_rc${NEXT_RC_NUM}_${GLOBAL_BUILD_NUM}"
          echo "3. Assembled FINAL_VERSION: $FINAL_VERSION"
          echo "--- End RC Version Construction ---"
          
          echo "VERSION_STRING=${FINAL_VERSION}" >> $GITHUB_OUTPUT

      ### NEW: A helper step to consolidate the version string from the conditional steps above.
      - name: Set Final Version String
        id: version_string_generator
        shell: bash
        run: |
          if [ "${{ steps.determine_build_type.outputs.BUILD_TYPE }}" == "dev" ]; then
            echo "VERSION_STRING=${{ steps.versioning_dev.outputs.VERSION_STRING }}" >> $GITHUB_OUTPUT
          elif [ "${{ steps.determine_build_type.outputs.BUILD_TYPE }}" == "rc" ]; then
            echo "VERSION_STRING=${{ steps.versioning_rc.outputs.VERSION_STRING }}" >> $GITHUB_OUTPUT
          fi

  ############################################################
  # JOB 2: Run the actual builds (Unchanged)
  ############################################################
  build_binaries:
    name: Build Binaries
    needs: call_builds
    uses: ./.github/workflows/build-windows.yml
    with:
      version_string: ${{ needs.call_builds.outputs.version_string }}
      
  build_linux_binaries:
    name: Build Linux Binaries
    needs: call_builds
    uses: ./.github/workflows/build-linux.yml
    with:
      version_string: ${{ needs.call_builds.outputs.version_string }}
      
  ############################################################
  # JOB 3: Create and push the Git tag for RC builds
  ############################################################
  tag_release_candidate:
    name: Tag Release Candidate
    needs: [call_builds, build_binaries, build_linux_binaries] # Run after builds succeed
    if: needs.call_builds.outputs.build_type == 'rc'         # Only run for RC builds
    runs-on: ubuntu-latest

    permissions:
      contents: write # Allow this job to push tags

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
          
      - name: Create and Push Tag
        run: |
          TAG_NAME="v${{ needs.call_builds.outputs.version_string }}"
          echo "Creating and pushing tag: $TAG_NAME"
          git tag $TAG_NAME
          git push origin $TAG_NAME