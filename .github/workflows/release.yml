name: Final Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Trigger on tags like v1.0.0, v01.00.00, etc.

permissions:
  contents: write # Needed to create the release

jobs:
  #########################################
  # A. Validate tag and generate version
  #########################################
  generate-version:
    name: Validate Tag & Generate Version
    runs-on: ubuntu-latest
    outputs:
      base_name: ${{ steps.versioning.outputs.BASE_NAME }}
      version_string: ${{ steps.versioning.outputs.VERSION_STRING }}
      debian_version: ${{ steps.versioning.outputs.DEBIAN_VERSION }}
      prepared_source_artifact_name: ${{ steps.versioning.outputs.PREPARED_SOURCE_ARTIFACT_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate that the tag is on the master branch
        shell: bash
        run: |
          # Get the commit hash of the tag and the master branch head
          TAG_COMMIT=$(git rev-parse "${{ github.ref }}")
          MASTER_COMMIT=$(git rev-parse "origin/master")
          
          echo "Tag commit:   $TAG_COMMIT"
          echo "Master commit: $MASTER_COMMIT"
          
          # Check if the tag's commit is an ancestor of the master branch head
          if ! git merge-base --is-ancestor "$TAG_COMMIT" "$MASTER_COMMIT"; then
            echo "::error::Tag '${{ github.ref }}' is not on the master branch. Final releases must be tagged on master."
            exit 1
          fi
          echo "Tag is correctly on the master branch."

      - name: Construct Final Version String
        id: versioning
        shell: bash
        run: |
          # For final releases, the version is simply parsed from the tag
          RAW_VERSION=$(echo "${{ github.ref_name }}" | sed 's/v//')
          
          echo "BASE_NAME=msxtileforge-v${RAW_VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION_STRING=${RAW_VERSION}" >> $GITHUB_OUTPUT
          echo "DEBIAN_VERSION=${RAW_VERSION}" >> $GITHUB_OUTPUT
          echo "PREPARED_SOURCE_ARTIFACT_NAME=prepared-source-${{ github.run_id }}-${{ github.ref_name }}" >> $GITHUB_OUTPUT

  #########################################
  # B. Prepare source code
  #########################################
  prepare-source:
    name: Prepare Source Code
    needs: generate-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }} # Checkout the code at the specific tag

      - name: Update version strings using reusable action
        uses: ./.github/actions/update-version-in-files
        with:
          version_string: ${{ needs.generate-version.outputs.version_string }}
          debian_version: ${{ needs.generate-version.outputs.debian_version }}

      - name: Upload prepared source as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
          path: .

  #########################################
  # C. Call the Reusable Builders
  #########################################
  build-linux:
    name: Call Linux Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-linux.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}

  build-windows:
    name: Call Windows Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-windows.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}

  build-source:
    name: Call Source Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-source.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}

  #########################################
  # D. Publish Final Release to GitHub
  #########################################
  publish-final-release:
    name: Publish Final Release
    needs: [generate-version, build-linux, build-windows, build-source]
    runs-on: ubuntu-latest
    steps:
      - name: Package and rename using reusable action
        id: package
        uses: ./.github/actions/package-and-rename-artifacts
        with:
          base_name: ${{ needs.generate-version.outputs.base_name }}

      - name: Create GitHub Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.ref_name }}" \
            --title "MSX Tile Forge v${{ needs.generate-version.outputs.version_string }}" \
            --notes "Official release. All packages are attached below." \
            --latest \
            ${{ steps.package.outputs.package_path }}/*
