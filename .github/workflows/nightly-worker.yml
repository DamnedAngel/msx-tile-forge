name: Reusable Nightly Worker
on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
    secrets:
      IA_ACCESS_KEY:
        required: true
      IA_SECRET_KEY:
        required: true

jobs:
  #########################################
  # A. Generate version strings and identifiers
  #########################################
  generate-version:
    name: Generate Version
    runs-on: ubuntu-latest
    outputs:
      base_name: ${{ steps.versioning.outputs.BASE_NAME }}
      item_identifier: ${{ steps.versioning.outputs.ITEM_IDENTIFIER }}
      version_string: ${{ steps.versioning.outputs.VERSION_STRING }}
      debian_version: ${{ steps.versioning.outputs.DEBIAN_VERSION }}
    steps:
      - name: Construct Nightly Version Strings
        id: versioning
        shell: bash
        run: |
          BASE_VERSION=$(echo "${{ inputs.branch }}" | sed 's/REL_//')
          DATE_STAMP=$(date +'%y%m%d')
          GLOBAL_RUN_NUM="${{ github.run_number }}"
          BASE_NAME="msxtileforge_${BASE_VERSION}_nightly${DATE_STAMP}_${GLOBAL_RUN_NUM}"
          ITEM_IDENTIFIER="${BASE_NAME}_all"
          VERSION_STRING="${BASE_VERSION}_nightly${DATE_STAMP}_${GLOBAL_RUN_NUM}"
          DEBIAN_VERSION=$(echo "$VERSION_STRING" | sed -e 's/_/~/g')
          
          echo "BASE_NAME=${BASE_NAME}" >> $GITHUB_OUTPUT
          echo "ITEM_IDENTIFIER=${ITEM_IDENTIFIER}" >> $GITHUB_OUTPUT
          echo "VERSION_STRING=${VERSION_STRING}" >> $GITHUB_OUTPUT
          echo "DEBIAN_VERSION=${DEBIAN_VERSION}" >> $GITHUB_OUTPUT

  #########################################
  # B. Build Linux and Debian packages
  #########################################
  build-linux:
    name: Build Linux & Debian
    needs: generate-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install system and Python dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make build-essential fakeroot devscripts dh-python python3-all debhelper-compat=13
          python -m pip install pyinstaller Pillow numpy scipy platformdirs tqdm

      - name: Update version string in source files
        run: |
          find . -type f -name "*.py" -exec sed -i "s/<unreleased>/${{ needs.generate-version.outputs.version_string }}/g" {} +
          sed -i "s/<unreleased>/${{ needs.generate-version.outputs.debian_version }}/g" debian/changelog

      - name: Build Linux binary and Debian package
        run: make lin deb

      - name: Upload Linux and Debian artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts-${{ github.run_id }}-${{ inputs.branch }}
          path: |
            dist/*.tar.gz
            dist/*.deb

  #########################################
  # C. Build Windows package
  #########################################
  build-windows:
    name: Build Windows
    needs: generate-version
    runs-on: windows-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Python dependencies
        run: python -m pip install pyinstaller Pillow numpy scipy platformdirs tqdm

      - name: Update version string in source files
        shell: bash
        run: find . -type f -name "*.py" -exec sed -i "s/<unreleased>/${{ needs.generate-version.outputs.version_string }}/g" {} +

      - name: Build Windows executable
        shell: powershell
        run: |
          python -m PyInstaller --onedir --clean `
            --add-data "msxtileexport.py;." `
            --add-data "msxtilemagic.py;." `
            --add-data "tilerandomizer.py;." `
            --add-data "supertandomizer.py;." `
            msxtileforge.py
          cp README.md,LICENSE dist/msxtileforge

      - name: Create final Windows zip archive
        shell: pwsh
        run: Compress-Archive -Path dist/msxtileforge/* -DestinationPath dist/msxtileforge-windows.zip

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts-${{ github.run_id }}-${{ inputs.branch }}
          path: dist/msxtileforge-windows.zip

  #########################################
  # D. Build source archive
  #########################################
  build-source:
    name: Build Source Archive
    needs: generate-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      
      - name: Create source archive package
        run: make sdist

      - name: Upload source artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-artifacts-${{ github.run_id }}-${{ inputs.branch }}
          path: dist/msxtileforge-source.zip

    #########################################
  # E. Publish all artifacts to Internet Archive
  #########################################
  publish:
    name: Publish to Internet Archive
    needs: [generate-version, build-linux, build-windows, build-source]
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare and rename files for publishing
        id: files
        shell: bash
        run: |
          set -x
          BASE_NAME="${{ needs.generate-version.outputs.base_name }}"
          mkdir -p staging
          
          # Use a consistent strategy for all artifact types
          DEB_FILE=$(find artifacts/linux-artifacts* -name "*.deb")
          TAR_FILE=$(find artifacts/linux-artifacts* -name "*.tar.gz")
          SRC_FILE=$(find artifacts/source-artifacts* -name "*.zip")
          WIN_FILE=$(find artifacts/windows-artifacts* -name "*.zip")
          
          # Move and rename all files according to the convention
          mv "$DEB_FILE" "staging/${BASE_NAME}_deb.deb"
          mv "$TAR_FILE" "staging/${BASE_NAME}_lin.tar.gz"
          mv "$SRC_FILE" "staging/${BASE_NAME}_src.zip"
          mv "$WIN_FILE" "staging/${BASE_NAME}_win.zip"
          
          echo "Prepared files for upload:"
          ls -l staging/

      - name: Upload to Internet Archive and create comment
        env:
          IA_ACCESS_KEY: ${{ secrets.IA_ACCESS_KEY }}
          IA_SECRET_KEY: ${{ secrets.IA_SECRET_KEY }}
          IA_IDENTIFIER: ${{ needs.generate-version.outputs.item_identifier }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          ITEM_TITLE="MSX Tile Forge Nightly Build (${{ needs.generate-version.outputs.version_string }})"
          
          cd staging
          UPLOAD_COUNT=0
          COMMENT_FILE_LIST=""
          
          # Loop through all prepared files and upload them
          for FILE in *; do
            echo "Uploading $FILE to item '${IA_IDENTIFIER}'..."
            if [ $UPLOAD_COUNT -eq 0 ]; then
              # The first file creates the item and sets all metadata
              curl --fail --location --request PUT \
                --header "Authorization: LOW ${IA_ACCESS_KEY}:${IA_SECRET_KEY}" \
                --header "x-amz-auto-make-bucket: 1" \
                --header "x-archive-meta-title: ${ITEM_TITLE}" \
                --header "x-archive-meta-collection: opensource_media" \
                --header "x-archive-meta-mediatype: software" \
                --header "x-archive-meta01-subject: msxtileforge_nightly_build" \
                --header "x-archive-meta02-subject: msxtileforge" \
                --upload-file "$FILE" \
                "https://s3.us.archive.org/${IA_IDENTIFIER}/${FILE}"
            else
              # Subsequent files are just added to the now-existing item
              sleep 15
              curl --fail --location --request PUT \
                --header "Authorization: LOW ${IA_ACCESS_KEY}:${IA_SECRET_KEY}" \
                --upload-file "$FILE" \
                "https://s3.us.archive.org/${IA_IDENTIFIER}/${FILE}"
            fi
            UPLOAD_COUNT=$((UPLOAD_COUNT + 1))
            
            # Add file to the markdown list for the commit comment
            FILE_URL="https://archive.org/download/${IA_IDENTIFIER}/${FILE}"
            COMMENT_FILE_LIST="${COMMENT_FILE_LIST}*   **${FILE}**: [Download](${FILE_URL})\n"
          done
          
          cd ..
          
          # Construct and post the final commit comment
          echo "Uploads complete. Waiting for processing..."
          sleep 30
          
          COMMIT_SHA=$(git rev-parse HEAD)
          COMMENT_BODY="🚀 **Nightly Build Successful for \`${{ inputs.branch }}\`**

          A new historical archive for this build has been created and tagged for collection.
          **Item Page:** [${IA_IDENTIFIER}](https://archive.org/details/${IA_IDENTIFIER})

          Version: \`${{ needs.generate-version.outputs.version_string }}\`
          Commit: \`${COMMIT_SHA}\`

          **Downloads:**
          ${COMMENT_FILE_LIST}"

          echo "Posting comment to commit ${COMMIT_SHA}"
          # Use a heredoc to safely pass the multiline comment body
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/commits/${COMMIT_SHA}/comments \
            -f body=- <<EOF
          ${COMMENT_BODY}
          EOF