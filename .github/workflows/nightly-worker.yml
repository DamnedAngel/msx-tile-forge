name: Reusable Nightly Worker

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
    secrets:
      IA_ACCESS_KEY:
        required: true
      IA_SECRET_KEY:
        required: true

jobs:
  #########################################
  # A. Generate version strings and filenames
  #########################################
  generate-version:
    name: Generate Version & Filenames
    runs-on: ubuntu-latest
    outputs:
      version_string: ${{ steps.versioning.outputs.VERSION_STRING }}
      debian_version: ${{ steps.versioning.outputs.DEBIAN_VERSION }}
      item_identifier: ${{ steps.versioning.outputs.ITEM_IDENTIFIER }}
      prepared_source_artifact_name: ${{ steps.versioning.outputs.PREPARED_SOURCE_ARTIFACT_NAME }}
      win_filename: ${{ steps.versioning.outputs.WIN_FILENAME }}
      lin_filename: ${{ steps.versioning.outputs.LIN_FILENAME }}
      deb_filename: ${{ steps.versioning.outputs.DEB_FILENAME }}
      src_filename: ${{ steps.versioning.outputs.SRC_FILENAME }}
    steps:
      - name: Construct Nightly Version Strings and Filenames
        id: versioning
        shell: bash
        run: |
          BASE_VERSION=$(echo "${{ inputs.branch }}" | sed 's/REL_//')
          DATE_STAMP=$(date +'%y%m%d')
          GLOBAL_RUN_NUM="${{ github.run_number }}"
          
          FINAL_VERSION="${BASE_VERSION}_nightly${DATE_STAMP}_${GLOBAL_RUN_NUM}"
          BASE_NAME="msxtileforge_${FINAL_VERSION}"
          ITEM_IDENTIFIER="${BASE_NAME}_all"

          echo "VERSION_STRING=${FINAL_VERSION}" >> $GITHUB_OUTPUT
          echo "DEBIAN_VERSION=$(echo "$FINAL_VERSION" | sed -e 's/_/~/g')" >> $GITHUB_OUTPUT
          echo "ITEM_IDENTIFIER=${ITEM_IDENTIFIER}" >> $GITHUB_OUTPUT
          echo "PREPARED_SOURCE_ARTIFACT_NAME=prepared-source-${{ github.run_id }}-${{ inputs.branch }}" >> $GITHUB_OUTPUT
          echo "WIN_FILENAME=${BASE_NAME}_win.zip" >> $GITHUB_OUTPUT
          echo "LIN_FILENAME=${BASE_NAME}_lin.tar.gz" >> $GITHUB_OUTPUT
          echo "DEB_FILENAME=${BASE_NAME}_deb.deb" >> $GITHUB_OUTPUT
          echo "SRC_FILENAME=${BASE_NAME}_src.zip" >> $GITHUB_OUTPUT

  #########################################
  # B. Prepare source code
  #########################################
  prepare-source:
    name: Prepare Source Code
    needs: generate-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Update version strings using reusable action
        uses: ./.github/actions/update-version-in-files
        with:
          version_string: ${{ needs.generate-version.outputs.version_string }}
          debian_version: ${{ needs.generate-version.outputs.debian_version }}

      - name: Upload prepared source as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
          path: .

  #########################################
  # C. Call the Reusable Builders
  #########################################
  build-linux:
    name: Call Linux Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-linux.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      lin_filename: ${{ needs.generate-version.outputs.lin_filename }}
      deb_filename: ${{ needs.generate-version.outputs.deb_filename }}

  build-windows:
    name: Call Windows Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-windows.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      win_filename: ${{ needs.generate-version.outputs.win_filename }}

  build-source:
    name: Call Source Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-source.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      src_filename: ${{ needs.generate-version.outputs.src_filename }}

  #########################################
  # D. Publish all artifacts to Internet Archive
  #########################################
  publish:
    name: Publish to Internet Archive
    needs: [generate-version, build-linux, build-windows, build-source]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Download all final build artifacts
        uses: actions/download-artifact@v4
        with:
          path: final-packages

      - name: Upload to Internet Archive and create comment
        env:
          IA_ACCESS_KEY: ${{ secrets.IA_ACCESS_KEY }}
          IA_SECRET_KEY: ${{ secrets.IA_SECRET_KEY }}
          IA_IDENTIFIER: ${{ needs.generate-version.outputs.item_identifier }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          ITEM_TITLE="MSX Tile Forge Nightly Build (${{ needs.generate-version.outputs.version_string }})"
          
          cd final-packages
          UPLOAD_COUNT=0
          COMMENT_FILE_LIST=""
          
          # This is the fix: Explicitly find only the top-level package files.
          # The '*/' ensures we are looking inside the artifact subdirectories.
          PACKAGE_FILES=$(find . -maxdepth 2 -type f \( -name "*_win.zip" -o -name "*_lin.tar.gz" -o -name "*_deb.deb" -o -name "*_src.zip" \))

          for FILE in $PACKAGE_FILES; do
            FILENAME=$(basename "$FILE")
            echo "Uploading $FILENAME to item '${IA_IDENTIFIER}'..."
            if [ $UPLOAD_COUNT -eq 0 ]; then
              # First file creates the item and sets all metadata
              curl --fail --location --request PUT \
                --header "Authorization: LOW ${IA_ACCESS_KEY}:${IA_SECRET_KEY}" \
                --header "x-amz-auto-make-bucket: 1" \
                --header "x-archive-meta-title: ${ITEM_TITLE}" \
                --header "x-archive-meta-collection: opensource_media" \
                --header "x-archive-meta-mediatype: software" \
                --header "x-archive-meta01-subject: msxtileforge_nightly_build" \
                --header "x-archive-meta02-subject: msxtileforge" \
                --upload-file "$FILE" \
                "https://s3.us.archive.org/${IA_IDENTIFIER}/${FILENAME}"
            else
              # Subsequent files are just added
              sleep 15
              curl --fail --location --request PUT \
                --header "Authorization: LOW ${IA_ACCESS_KEY}:${IA_SECRET_KEY}" \
                --upload-file "$FILE" \
                "https://s3.us.archive.org/${IA_IDENTIFIER}/${FILENAME}"
            fi
            UPLOAD_COUNT=$((UPLOAD_COUNT + 1))
            
            FILE_URL="https://archive.org/download/${IA_IDENTIFIER}/${FILENAME}"
            COMMENT_FILE_LIST="${COMMENT_FILE_LIST}*   **${FILENAME}**: [Download](${FILE_URL})\n"
          done
          
          cd ..
          
          sleep 30
          
          COMMIT_SHA=$(git rev-parse HEAD)
          COMMENT_BODY="🚀 **Nightly Build Successful for \`${{ inputs.branch }}\`**

          A new historical archive for this build has been created and tagged for collection.
          **Item Page:** [${IA_IDENTIFIER}](https://archive.org/details/${IA_IDENTIFIER})

          Version: \`${{ needs.generate-version.outputs.version_string }}\`
          Commit: \`${COMMIT_SHA}\`

          **Downloads:**
          ${COMMENT_FILE_LIST}"

          echo "Posting comment to commit ${COMMIT_SHA}"
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/commits/${COMMIT_SHA}/comments \
            -f body=- <<EOF
          ${COMMENT_BODY}
          EOF
