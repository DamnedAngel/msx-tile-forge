// FILE: actions\package-and-rename-artifacts\action.yml
name: 'Package and Rename Artifacts'
description: 'Downloads all build artifacts, renames them using the provided base name, and places them in a `final_packages` directory.'

inputs:
  base_name:
    description: 'The base name for the packages (e.g., msxtileforge_..._nightly...)'
    required: true

outputs:
  package_path:
    description: 'The path to the directory containing the final, renamed packages.'
    value: ${{ steps.files.outputs.package_path }}

runs:
  using: 'composite'
  steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        # The faulty 'pattern' key has been removed.
        # This will now correctly download all artifacts.
        merge-multiple: true

    - name: Prepare and rename files
      id: files
      shell: bash
      run: |
        set -x
        BASE_NAME="${{ inputs.base_name }}"
        mkdir -p final_packages
        
        DEB_FILE=$(find artifacts -name "*.deb")
        TAR_FILE=$(find artifacts -name "*.tar.gz")
        SRC_FILE=$(find artifacts -name "msxtileforge-source.zip")
        WIN_FILE=$(find artifacts -name "msxtileforge-windows.zip")
        
        mv "$DEB_FILE" "final_packages/${BASE_NAME}_deb.deb"
        mv "$TAR_FILE" "final_packages/${BASE_NAME}_lin.tar.gz"
        mv "$SRC_FILE" "final_packages/${BASE_NAME}_src.zip"
        mv "$WIN_FILE" "final_packages/${BASE_NAME}_win.zip"
        
        echo "Prepared final packages:"
        ls -l final_packages/

        echo "package_path=final_packages" >> $GITHUB_OUTPUT
// FILE: actions\update-version-in-files\action.yml
name: 'Update Version in Source Files'
description: 'Finds all .py files and the debian/changelog and replaces <unreleased> with the provided version strings.'

inputs:
  version_string:
    description: 'The main version string (e.g., 1.2.3_nightly...)'
    required: true
  debian_version:
    description: 'The Debian-compliant version string (e.g., 1.2.3~nightly...)'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Replace version strings
      shell: bash
      run: |
        find . -type f -name "*.py" -exec sed -i "s/<unreleased>/${{ inputs.version_string }}/g" {} +
        # Only run the debian changelog update if the file exists
        if [ -f "debian/changelog" ]; then
          sed -i "s/<unreleased>/${{ inputs.debian_version }}/g" debian/changelog
        fi
// FILE: workflows\build-linux.yml
name: Reusable Linux & Debian Build

on:
  workflow_call:
    inputs:
      prepared_source_artifact_name:
        description: 'The name of the prepared source code artifact to download'
        required: true
        type: string
      lin_filename:
        description: 'The final, desired filename for the .tar.gz package'
        required: true
        type: string
      deb_filename:
        description: 'The final, desired filename for the .deb package'
        required: true
        type: string

jobs:
  build_lin:
    runs-on: ubuntu-latest
    steps:
      - name: Download prepared source code
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.prepared_source_artifact_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install System & Python Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make build-essential fakeroot devscripts dh-python python3-all debhelper-compat=13
          python -m pip install pyinstaller Pillow numpy scipy platformdirs tqdm

      - name: Build Linux binary and Debian package using Makefile
        run: make all deb LIN_TGZ=${{ inputs.lin_filename }}

      - name: Find and rename Debian package
        shell: bash
        run: |
          DEB_FILE=$(find .. -maxdepth 1 -name "*.deb")
          mv "$DEB_FILE" "dist/${{ inputs.deb_filename }}"

      - name: Upload Linux tar.gz artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.lin_filename }}
          path: dist/${{ inputs.lin_filename }}

      - name: Upload Debian package artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.deb_filename }}
          path: dist/${{ inputs.deb_filename }}
// FILE: workflows\build-macos.yml
name: Reusable macOS Build

on:
  workflow_call:
    inputs:
      prepared_source_artifact_name:
        description: 'The name of the prepared source code artifact to download'
        required: true
        type: string
      mac_filename:
        description: 'The final, desired filename for the .zip package'
        required: true
        type: string

jobs:
  build_mac:
    runs-on: macos-latest
    steps:
      - name: Download prepared source code
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.prepared_source_artifact_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python Dependencies via Pip
        run: python -m pip install -r requirements.txt

      - name: Build macOS binary and archive
        run: make all-mac MAC_ZIP=${{ inputs.mac_filename }}

      - name: Upload macOS zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.mac_filename }}
          path: dist/${{ inputs.mac_filename }}
// FILE: workflows\build-source.yml
name: Reusable Source Archive Build

on:
  workflow_call:
    inputs:
      prepared_source_artifact_name:
        description: 'The name of the prepared source code artifact to download'
        required: true
        type: string
      src_filename:
        description: 'The final, desired filename for the source .zip package'
        required: true
        type: string

jobs:
  build_src:
    runs-on: ubuntu-latest
    steps:
      - name: Download prepared source code
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.prepared_source_artifact_name }}
      
      - name: Create source archive package
        run: make sdist SRC_ZIP=${{ inputs.src_filename }}

      - name: Upload final source artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.src_filename }}
          path: dist/${{ inputs.src_filename }}
// FILE: workflows\build-windows.yml
name: Reusable Windows Build

on:
  workflow_call:
    inputs:
      prepared_source_artifact_name:
        description: 'The name of the prepared source code artifact to download'
        required: true
        type: string
      win_filename:
        description: 'The final, desired filename for the .zip package'
        required: true
        type: string

jobs:
  build_win:
    runs-on: windows-latest
    steps:
      - name: Download prepared source code
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.prepared_source_artifact_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Python dependencies
        run: python -m pip install pyinstaller Pillow numpy scipy platformdirs tqdm

      - name: Install Make for Windows
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install make

      - name: Build Windows binary using Makefile
        shell: bash
        run: make all WIN_ZIP=${{ inputs.win_filename }}

      - name: Upload final Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.win_filename }}
          path: dist/${{ inputs.win_filename }}
// FILE: workflows\dev-build.yml
name: 1. Dev Build (TKT_XXXXX Branches)
on:
  workflow_dispatch:

jobs:
  #########################################
  # A. Validate branch and generate version
  #########################################
  generate-version:
    name: Validate Branch & Generate Version
    runs-on: ubuntu-latest
    outputs:
      version_string: ${{ steps.versioning.outputs.VERSION_STRING }}
      debian_version: ${{ steps.versioning.outputs.DEBIAN_VERSION }}
      prepared_source_artifact_name: ${{ steps.versioning.outputs.PREPARED_SOURCE_ARTIFACT_NAME }}
      win_filename: ${{ steps.versioning.outputs.WIN_FILENAME }}
      mac_filename: ${{ steps.versioning.outputs.MAC_FILENAME }}
      lin_filename: ${{ steps.versioning.outputs.LIN_FILENAME }}
      deb_filename: ${{ steps.versioning.outputs.DEB_FILENAME }}
      src_filename: ${{ steps.versioning.outputs.SRC_FILENAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Branch Name
        shell: bash
        run: |
          if [[ ! "${{ github.ref_name }}" == TKT_* ]]; then
            echo "::error::This workflow can only be run on branches starting with 'TKT_'."
            exit 1
          fi

      - name: Construct Dev Version String and Filenames
        id: versioning
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          TICKET_NUM=$(echo "$BRANCH_NAME" | grep -oP 'TKT_[0-9]+' | sed 's/TKT_//')
          
          MILESTONE_TITLE=$(gh issue view "$TICKET_NUM" --json milestone --jq '.milestone.title')
          if [ -z "$MILESTONE_TITLE" ] || [ "$MILESTONE_TITLE" == "null" ]; then
            echo "::error::Issue TKT_$TICKET_NUM is not assigned to a milestone."
            exit 1
          fi
          
          BASE_VERSION=$(echo "$MILESTONE_TITLE" | grep -oP 'REL_[0-9.]+' | sed 's/REL_//')
          if [ -z "$BASE_VERSION" ]; then
            echo "::error::Milestone title '$MILESTONE_TITLE' does not contain 'REL_XX.YY.ZZ' version string."
            exit 1
          fi

          BRANCH_BUILD_NUM=$(git rev-list --count HEAD)
          GLOBAL_RUN_NUM="${{ github.run_number }}"
          
          # This is the full version string used inside the application
          FINAL_VERSION="${BASE_VERSION}_dev${TICKET_NUM}.${BRANCH_BUILD_NUM}_${GLOBAL_RUN_NUM}"
          
          # This is the base for all filenames
          BASE_NAME="msxtileforge_${FINAL_VERSION}"
          
          # Generate all required variables and filenames
          echo "VERSION_STRING=${FINAL_VERSION}" >> $GITHUB_OUTPUT
          echo "DEBIAN_VERSION=$(echo "$FINAL_VERSION" | sed -e 's/_/~/g')" >> $GITHUB_OUTPUT
          echo "PREPARED_SOURCE_ARTIFACT_NAME=prepared-source-${{ github.run_id }}-${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "MAC_FILENAME=${BASE_NAME}_mac.zip" >> $GITHUB_OUTPUT
          echo "WIN_FILENAME=${BASE_NAME}_win.zip" >> $GITHUB_OUTPUT
          echo "LIN_FILENAME=${BASE_NAME}_lin.tar.gz" >> $GITHUB_OUTPUT
          echo "DEB_FILENAME=${BASE_NAME}_deb.deb" >> $GITHUB_OUTPUT
          echo "SRC_FILENAME=${BASE_NAME}_src.zip" >> $GITHUB_OUTPUT

  #########################################
  # B. Prepare source code
  #########################################
  prepare-source:
    name: Prepare Source Code
    needs: generate-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Update version strings using reusable action
        uses: ./.github/actions/update-version-in-files
        with:
          version_string: ${{ needs.generate-version.outputs.version_string }}
          debian_version: ${{ needs.generate-version.outputs.debian_version }}

      - name: Upload prepared source as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
          path: .

  #########################################
  # C. Call the Reusable Builders
  #########################################
  build-linux:
    name: Call Linux Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-linux.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      lin_filename: ${{ needs.generate-version.outputs.lin_filename }}
      deb_filename: ${{ needs.generate-version.outputs.deb_filename }}

  build-windows:
    name: Call Windows Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-windows.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      win_filename: ${{ needs.generate-version.outputs.win_filename }}

  build-macos:
    name: Call macOS Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-macos.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      mac_filename: ${{ needs.generate-version.outputs.mac_filename }}

  build-source:
    name: Call Source Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-source.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      src_filename: ${{ needs.generate-version.outputs.src_filename }}


// FILE: workflows\nightly-build.yml
﻿name: 4. Nightly Build
on:
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch:

permissions:
  contents: write # Needed for the final commit comment

jobs:
  ############################################################
  # JOB 1: Find all REL_* branches with recent commits
  ############################################################
  find-active-branches:
    name: Find Active REL Branches
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.get-branches.outputs.branches }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: get-branches
        shell: bash
        run: |
          REMOTE_REL_BRANCHES=$(git branch -r | grep 'origin/REL_' | sed 's/origin\///')
          ACTIVE_BRANCHES=()
          for branch in $REMOTE_REL_BRANCHES; do
            if [ -n "$(git log "origin/$branch" --since="24 hours ago" --oneline)" ]; then
              ACTIVE_BRANCHES+=("\"$branch\"")
            fi
          done
          echo "branches=$(IFS=,; echo "[${ACTIVE_BRANCHES[*]}]")" >> $GITHUB_OUTPUT

  ############################################################
  # JOB 2: A meta-job that runs the build process for each branch
  ############################################################
  build-and-publish:
    name: Build for ${{ matrix.branch }}
    needs: find-active-branches
    if: fromJson(needs.find-active-branches.outputs.branches)[0] != null
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.find-active-branches.outputs.branches) }}
    
    uses: ./.github/workflows/nightly-worker.yml
    with:
      branch: ${{ matrix.branch }}
    secrets:
      IA_ACCESS_KEY: ${{ secrets.IA_ACCESS_KEY }}
      IA_SECRET_KEY: ${{ secrets.IA_SECRET_KEY }}
// FILE: workflows\nightly-worker.yml
﻿name: Reusable Nightly Worker

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
    secrets:
      IA_ACCESS_KEY:
        required: true
      IA_SECRET_KEY:
        required: true

jobs:
  #########################################
  # A. Generate version strings and filenames
  #########################################
  generate-version:
    name: Generate Version & Filenames
    runs-on: ubuntu-latest
    outputs:
      version_string: ${{ steps.versioning.outputs.VERSION_STRING }}
      debian_version: ${{ steps.versioning.outputs.DEBIAN_VERSION }}
      item_identifier: ${{ steps.versioning.outputs.ITEM_IDENTIFIER }}
      prepared_source_artifact_name: ${{ steps.versioning.outputs.PREPARED_SOURCE_ARTIFACT_NAME }}
      win_filename: ${{ steps.versioning.outputs.WIN_FILENAME }}
      lin_filename: ${{ steps.versioning.outputs.LIN_FILENAME }}
      deb_filename: ${{ steps.versioning.outputs.DEB_FILENAME }}
      src_filename: ${{ steps.versioning.outputs.SRC_FILENAME }}
    steps:
      - name: Construct Nightly Version Strings and Filenames
        id: versioning
        shell: bash
        run: |
          BASE_VERSION=$(echo "${{ inputs.branch }}" | sed 's/REL_//')
          DATE_STAMP=$(date +'%y%m%d')
          GLOBAL_RUN_NUM="${{ github.run_number }}"
          
          FINAL_VERSION="${BASE_VERSION}_nightly${DATE_STAMP}_${GLOBAL_RUN_NUM}"
          BASE_NAME="msxtileforge_${FINAL_VERSION}"
          ITEM_IDENTIFIER="${BASE_NAME}_all"

          echo "VERSION_STRING=${FINAL_VERSION}" >> $GITHUB_OUTPUT
          echo "DEBIAN_VERSION=$(echo "$FINAL_VERSION" | sed -e 's/_/~/g')" >> $GITHUB_OUTPUT
          echo "ITEM_IDENTIFIER=${ITEM_IDENTIFIER}" >> $GITHUB_OUTPUT
          echo "PREPARED_SOURCE_ARTIFACT_NAME=prepared-source-${{ github.run_id }}-${{ inputs.branch }}" >> $GITHUB_OUTPUT
          echo "WIN_FILENAME=${BASE_NAME}_win.zip" >> $GITHUB_OUTPUT
          echo "LIN_FILENAME=${BASE_NAME}_lin.tar.gz" >> $GITHUB_OUTPUT
          echo "DEB_FILENAME=${BASE_NAME}_deb.deb" >> $GITHUB_OUTPUT
          echo "MAC_FILENAME=${BASE_NAME}_mac.zip" >> $GITHUB_OUTPUT
          echo "SRC_FILENAME=${BASE_NAME}_src.zip" >> $GITHUB_OUTPUT

  #########################################
  # B. Prepare source code
  #########################################
  prepare-source:
    name: Prepare Source Code
    needs: generate-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Update version strings using reusable action
        uses: ./.github/actions/update-version-in-files
        with:
          version_string: ${{ needs.generate-version.outputs.version_string }}
          debian_version: ${{ needs.generate-version.outputs.debian_version }}

      - name: Upload prepared source as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
          path: .

  #########################################
  # C. Call the Reusable Builders
  #########################################
  build-linux:
    name: Call Linux Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-linux.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      lin_filename: ${{ needs.generate-version.outputs.lin_filename }}
      deb_filename: ${{ needs.generate-version.outputs.deb_filename }}

  build-windows:
    name: Call Windows Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-windows.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      win_filename: ${{ needs.generate-version.outputs.win_filename }}

  build-macos:
    name: Call macOS Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-macos.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      mac_filename: ${{ needs.generate-version.outputs.mac_filename }}

  build-source:
    name: Call Source Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-source.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      src_filename: ${{ needs.generate-version.outputs.src_filename }}

  #########################################
  # D. Publish all artifacts to Internet Archive
  #########################################
  publish:
    name: Publish to Internet Archive
    needs: [generate-version, build-linux, build-windows, build-macos, build-source]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Download all final build artifacts
        uses: actions/download-artifact@v4
        with:
          path: final-packages

      - name: Upload to Internet Archive and create comment
        env:
          IA_ACCESS_KEY: ${{ secrets.IA_ACCESS_KEY }}
          IA_SECRET_KEY: ${{ secrets.IA_SECRET_KEY }}
          IA_IDENTIFIER: ${{ needs.generate-version.outputs.item_identifier }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          ITEM_TITLE="MSX Tile Forge Nightly Build (${{ needs.generate-version.outputs.version_string }})"
          
          cd final-packages
          UPLOAD_COUNT=0
          COMMENT_FILE_LIST=""
          
          # This is the fix: Explicitly find only the top-level package files.
          # The '*/' ensures we are looking inside the artifact subdirectories.
          PACKAGE_FILES=$(find . -maxdepth 2 -type f \( -name "*_win.zip" -o -name "*_lin.tar.gz" -o -name "*_mac.zip" -o -name "*_deb.deb" -o -name "*_src.zip" \))

          for FILE in $PACKAGE_FILES; do
            FILENAME=$(basename "$FILE")
            echo "Uploading $FILENAME to item '${IA_IDENTIFIER}'..."
            if [ $UPLOAD_COUNT -eq 0 ]; then
              # First file creates the item and sets all metadata
              curl --fail --location --request PUT \
                --header "Authorization: LOW ${IA_ACCESS_KEY}:${IA_SECRET_KEY}" \
                --header "x-amz-auto-make-bucket: 1" \
                --header "x-archive-meta-title: ${ITEM_TITLE}" \
                --header "x-archive-meta-collection: opensource_media" \
                --header "x-archive-meta-mediatype: software" \
                --header "x-archive-meta01-subject: msxtileforge_nightly_build" \
                --header "x-archive-meta02-subject: msxtileforge" \
                --upload-file "$FILE" \
                "https://s3.us.archive.org/${IA_IDENTIFIER}/${FILENAME}"
            else
              # Subsequent files are just added
              sleep 15
              curl --fail --location --request PUT \
                --header "Authorization: LOW ${IA_ACCESS_KEY}:${IA_SECRET_KEY}" \
                --upload-file "$FILE" \
                "https://s3.us.archive.org/${IA_IDENTIFIER}/${FILENAME}"
            fi
            UPLOAD_COUNT=$((UPLOAD_COUNT + 1))
            
            FILE_URL="https://archive.org/download/${IA_IDENTIFIER}/${FILENAME}"
            COMMENT_FILE_LIST="${COMMENT_FILE_LIST}*   **${FILENAME}**: [Download](${FILE_URL})\n"
          done
          
          cd ..

      - name: Upload Item Icon
        env:
          IA_ACCESS_KEY: ${{ secrets.IA_ACCESS_KEY }}
          IA_SECRET_KEY: ${{ secrets.IA_SECRET_KEY }}
          IA_IDENTIFIER: ${{ needs.generate-version.outputs.item_identifier }}
        run: |
          echo "Uploading item icon..."
          curl --fail --location --request PUT \
            --header "Authorization: LOW ${IA_ACCESS_KEY}:${IA_SECRET_KEY}" \
            --header "x-archive-meta-thumbnail: 1" \
            --upload-file "./Resources/splash4_1.png" \
            "https://s3.us.archive.org/${IA_IDENTIFIER}/icon.png"

      - name: Post Final Commit Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          COMMENT_BODY="🚀 **Nightly Build Successful for \`${{ inputs.branch }}\`**

          A new historical archive for this build has been created and tagged for collection.
          **Item Page:** [${{ needs.generate-version.outputs.item_identifier }}](https://archive.org/details/${{ needs.generate-version.outputs.item_identifier }})

          Version: \`${{ needs.generate-version.outputs.version_string }}\`
          Commit: \`${COMMIT_SHA}\`

          **Downloads:**
          ${{ steps.upload-packages.outputs.comment_file_list }}"

          echo "Posting comment to commit ${COMMIT_SHA}"
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/commits/${COMMIT_SHA}/comments \
            -f body=- <<EOF
          ${COMMENT_BODY}
          EOF


// FILE: workflows\rc-build.yml
name: 2. RC Build (REL_XX.YY.ZZ Branches)

on:
  workflow_dispatch:

permissions:
  contents: write # Needed to create the release and push tags

jobs:
  #########################################
  # A. Validate branch and generate version
  #########################################
  generate-version:
    name: Validate Branch & Generate Version
    runs-on: ubuntu-latest
    outputs:
      version_string: ${{ steps.versioning.outputs.VERSION_STRING }}
      debian_version: ${{ steps.versioning.outputs.DEBIAN_VERSION }}
      prepared_source_artifact_name: ${{ steps.versioning.outputs.PREPARED_SOURCE_ARTIFACT_NAME }}
      win_filename: ${{ steps.versioning.outputs.WIN_FILENAME }}
      lin_filename: ${{ steps.versioning.outputs.LIN_FILENAME }}
      deb_filename: ${{ steps.versioning.outputs.DEB_FILENAME }}
      src_filename: ${{ steps.versioning.outputs.SRC_FILENAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Branch Name
        shell: bash
        run: |
          if [[ ! "${{ github.ref_name }}" == REL_* ]]; then
            echo "::error::This workflow can only be run on branches starting with 'REL_'."
            exit 1
          fi

      - name: Construct RC Version String and Filenames
        id: versioning
        shell: bash
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          BASE_VERSION=$(echo "$BRANCH_NAME" | sed 's/REL_//')
          
          git fetch --tags
          
          LATEST_RC_NUM=$(git tag --list "v${BASE_VERSION}_rc*" | sed 's/.*_rc//' | cut -d'_' -f1 | sort -n | tail -n 1)
          
          NEXT_RC_NUM=1
          if [[ -n "$LATEST_RC_NUM" ]]; then
            NEXT_RC_NUM=$((LATEST_RC_NUM + 1))
          fi
          
          GLOBAL_RUN_NUM="${{ github.run_number }}"
          
          FINAL_VERSION="${BASE_VERSION}_rc${NEXT_RC_NUM}_${GLOBAL_RUN_NUM}"
          BASE_NAME="msxtileforge_${FINAL_VERSION}"

          echo "VERSION_STRING=${FINAL_VERSION}" >> $GITHUB_OUTPUT
          echo "DEBIAN_VERSION=$(echo "$FINAL_VERSION" | sed -e 's/_/~/g')" >> $GITHUB_OUTPUT
          echo "PREPARED_SOURCE_ARTIFACT_NAME=prepared-source-${{ github.run_id }}-${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "WIN_FILENAME=${BASE_NAME}_win.zip" >> $GITHUB_OUTPUT
          echo "LIN_FILENAME=${BASE_NAME}_lin.tar.gz" >> $GITHUB_OUTPUT
          echo "DEB_FILENAME=${BASE_NAME}_deb.deb" >> $GITHUB_OUTPUT
          echo "SRC_FILENAME=${BASE_NAME}_src.zip" >> $GITHUB_OUTPUT

  #########################################
  # B. Prepare source code
  #########################################
  prepare-source:
    name: Prepare Source Code
    needs: generate-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Update version strings using reusable action
        uses: ./.github/actions/update-version-in-files
        with:
          version_string: ${{ needs.generate-version.outputs.version_string }}
          debian_version: ${{ needs.generate-version.outputs.debian_version }}

      - name: Upload prepared source as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
          path: .

  #########################################
  # C. Call the Reusable Builders
  #########################################
  build-linux:
    name: Call Linux Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-linux.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      lin_filename: ${{ needs.generate-version.outputs.lin_filename }}
      deb_filename: ${{ needs.generate-version.outputs.deb_filename }}

  build-windows:
    name: Call Windows Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-windows.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      win_filename: ${{ needs.generate-version.outputs.win_filename }}

  build-macos:
    name: Call macOS Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-macos.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      mac_filename: ${{ needs.generate-version.outputs.mac_filename }}

  build-source:
    name: Call Source Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-source.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      src_filename: ${{ needs.generate-version.outputs.src_filename }}

  #########################################
  # D. Publish Pre-release to GitHub
  #########################################
  publish-pre-release:
    name: Publish Pre-release
    needs: [generate-version, build-linux, build-windows, build-macos, build-source]
    runs-on: ubuntu-latest
    steps:
      - name: Download all final build artifacts
        uses: actions/download-artifact@v4
        with:
          path: final-artifacts
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Create and Push Git Tag
        run: |
          # We need to checkout to be in a git repo to push the tag
          git checkout ${{ github.ref_name }}
          git tag "v${{ needs.generate-version.outputs.version_string }}"
          git push origin "v${{ needs.generate-version.outputs.version_string }}"

      - name: Create GitHub Pre-release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ needs.generate-version.outputs.version_string }}" ./final-artifacts/*/* \
            --title "Release Candidate v${{ needs.generate-version.outputs.version_string }}" \
            --notes "This is a pre-release version for testing. All packages are attached below." \
            --prerelease
// FILE: workflows\release.yml
name: 3. Final Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Trigger on tags like v1.0.0, v01.00.00, etc.

permissions:
  contents: write # Needed to create the release

jobs:
  #########################################
  # A. Validate tag and generate version
  #########################################
  generate-version:
    name: Validate Tag & Generate Version
    runs-on: ubuntu-latest
    outputs:
      version_string: ${{ steps.versioning.outputs.VERSION_STRING }}
      debian_version: ${{ steps.versioning.outputs.DEBIAN_VERSION }}
      prepared_source_artifact_name: ${{ steps.versioning.outputs.PREPARED_SOURCE_ARTIFACT_NAME }}
      win_filename: ${{ steps.versioning.outputs.WIN_FILENAME }}
      lin_filename: ${{ steps.versioning.outputs.LIN_FILENAME }}
      deb_filename: ${{ steps.versioning.outputs.DEB_FILENAME }}
      src_filename: ${{ steps.versioning.outputs.SRC_FILENAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate that the tag is on the master branch
        shell: bash
        run: |
          TAG_COMMIT=$(git rev-parse "${{ github.ref }}")
          MASTER_COMMIT=$(git rev-parse "origin/master")
          
          if ! git merge-base --is-ancestor "$TAG_COMMIT" "$MASTER_COMMIT"; then
            echo "::error::Tag '${{ github.ref }}' is not on the master branch. Final releases must be tagged on master."
            exit 1
          fi
          echo "Tag is correctly on the master branch."

      - name: Construct Final Version String and Filenames
        id: versioning
        shell: bash
        run: |
          RAW_VERSION=$(echo "${{ github.ref_name }}" | sed 's/v//')
          BASE_NAME="msxtileforge_v${RAW_VERSION}"
          
          echo "VERSION_STRING=${RAW_VERSION}" >> $GITHUB_OUTPUT
          # For final release, debian version is the same as the raw version
          echo "DEBIAN_VERSION=${RAW_VERSION}" >> $GITHUB_OUTPUT
          echo "PREPARED_SOURCE_ARTIFACT_NAME=prepared-source-${{ github.run_id }}-${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "WIN_FILENAME=${BASE_NAME}_win.zip" >> $GITHUB_OUTPUT
          echo "LIN_FILENAME=${BASE_NAME}_lin.tar.gz" >> $GITHUB_OUTPUT
          echo "DEBIAN_FILENAME=${BASE_NAME}_deb.deb" >> $GITHUB_OUTPUT
          echo "MAC_FILENAME=${BASE_NAME}_mac.zip" >> $GITHUB_OUTPUT
          echo "SRC_FILENAME=${BASE_NAME}_src.zip" >> $GITHUB_OUTPUT

  #########################################
  # B. Prepare source code
  #########################################
  prepare-source:
    name: Prepare Source Code
    needs: generate-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }} # Checkout the code at the specific tag

      - name: Update version strings using reusable action
        uses: ./.github/actions/update-version-in-files
        with:
          version_string: ${{ needs.generate-version.outputs.version_string }}
          debian_version: ${{ needs.generate-version.outputs.debian_version }}

      - name: Upload prepared source as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
          path: .

  #########################################
  # C. Call the Reusable Builders
  #########################################
  build-linux:
    name: Call Linux Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-linux.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      lin_filename: ${{ needs.generate-version.outputs.lin_filename }}
      deb_filename: ${{ needs.generate-version.outputs.deb_filename }}

  build-windows:
    name: Call Windows Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-windows.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      win_filename: ${{ needs.generate-version.outputs.win_filename }}

  build-macos:
    name: Call macOS Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-macos.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      mac_filename: ${{ needs.generate-version.outputs.mac_filename }}

  build-source:
    name: Call Source Builder
    needs: [generate-version, prepare-source]
    uses: ./.github/workflows/build-source.yml
    with:
      prepared_source_artifact_name: ${{ needs.generate-version.outputs.prepared_source_artifact_name }}
      src_filename: ${{ needs.generate-version.outputs.src_filename }}

  #########################################
  # D. Publish Final Release to GitHub
  #########################################
  publish-final-release:
    name: Publish Final Release
    needs: [generate-version, build-linux, build-windows, build-macos, build-source]
    runs-on: ubuntu-latest
    steps:
      - name: Download all final build artifacts
        uses: actions/download-artifact@v4
        with:
          path: final-artifacts
      
      - name: List final artifacts for verification
        run: ls -R final-artifacts

      - name: Create GitHub Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.ref_name }}" ./final-artifacts/*/* \
            --title "MSX Tile Forge ${{ github.ref_name }}" \
            --notes "Official release. All packages are attached below." \
            --latest
