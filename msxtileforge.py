#!/bin/env -S python3
# -*- coding: utf-8 -*-
import tkinter as tk
from tkinter import ttk
from tkinter import colorchooser
from tkinter import filedialog
from tkinter import messagebox
from tkinter import simpledialog
from contextlib import suppress
import struct
import os
import math
import copy
import base64
import io

# --- Constants ---
TILE_WIDTH = 8
TILE_HEIGHT = 8
EDITOR_PIXEL_SIZE = 30
VIEWER_TILE_SIZE = TILE_WIDTH * 2  # 16
PALETTE_SQUARE_SIZE = 20
NUM_TILES_ACROSS = 16
MAX_TILES = 256
SUPERTILE_GRID_DIM = 4
SUPERTILE_DEF_TILE_SIZE = TILE_WIDTH * 4  # 32
SUPERTILE_SELECTOR_PREVIEW_SIZE = TILE_WIDTH * 4  # 32
NUM_SUPERTILES_ACROSS = 8
MAX_SUPERTILES = 256
DEFAULT_MAP_WIDTH = 32  # In supertiles
DEFAULT_MAP_HEIGHT = 24  # In supertiles
DEFAULT_WIN_VIEW_WIDTH_TILES = 32  # Default screen size
DEFAULT_WIN_VIEW_HEIGHT_TILES = 24  # Default screen size
MAX_WIN_VIEW_HEIGHT_TILES = 27  # Allow up to 27 for half-tile logic

MINIMAP_INITIAL_WIDTH = 256  # Default desired width of minimap window in pixels
MINIMAP_INITIAL_HEIGHT = 212  # Default desired height of minimap window in pixels

DRAG_THRESHOLD_PIXELS = 3 # Minimum pixels mouse must move to initiate a drag

# --- Palette Editor Constants ---
MSX2_PICKER_COLS = 32
MSX2_PICKER_ROWS = 16
MSX2_PICKER_SQUARE_SIZE = 15
CURRENT_PALETTE_SLOT_SIZE = 30

# --- MSX2 Default Palette (Indices & Colors) ---
MSX2_RGB7_VALUES = [
    (0, 0, 0),
    (0, 0, 0),
    (1, 6, 1),
    (3, 7, 3),
    (1, 1, 7),
    (2, 3, 7),
    (5, 1, 1),
    (2, 6, 7),
    (7, 1, 1),
    (7, 3, 3),
    (6, 6, 1),
    (6, 6, 4),
    (1, 4, 1),
    (6, 2, 5),
    (5, 5, 5),
    (7, 7, 7),
]
BLACK_IDX = 1
MED_GREEN_IDX = 2
WHITE_IDX = 15

# --- Placeholder Colors ---
INVALID_TILE_COLOR = "#FF00FF"
INVALID_SUPERTILE_COLOR = "#00FFFF"

# --- Grid & Overlay Constants ---
GRID_COLOR_CYCLE = [
    "#FFFFFF",
    "#000000",
    "#FF00FF",
    "#00FFFF",
    "#FFFF00",
]  # White, Black, Magenta, Cyan, Yellow
GRID_DASH_PATTERN = (5, 3)  # 5 pixels on, 3 pixels off
WIN_VIEW_HANDLE_SIZE = 8  # Pixel size of resize handles
WIN_VIEW_HALF_ROW_COLOR = "#80808080"  # Semi-transparent grey for overscan area (adjust alpha if needed, format depends on tk version)

ICON_IMAGE = r""
SPLASH_IMAGE = r""

# --- MSX2 Color Generation ---
msx2_512_colors_hex = []
msx2_512_colors_rgb7 = []
for r in range(8):
    for g in range(8):
        for b in range(8):
            r_255 = min(255, r * 36)
            g_255 = min(255, g * 36)
            b_255 = min(255, b * 36)
            hex_color = f"#{r_255:02x}{g_255:02x}{b_255:02x}"
            msx2_512_colors_hex.append(hex_color)
            msx2_512_colors_rgb7.append((r, g, b))

# --- Data Structures ---
tileset_patterns = [
    [[0] * TILE_WIDTH for _ in range(TILE_HEIGHT)] for _ in range(MAX_TILES)
]
tileset_colors = [
    [(WHITE_IDX, BLACK_IDX) for _ in range(TILE_HEIGHT)] for _ in range(MAX_TILES)
]
current_tile_index = 0
num_tiles_in_set = 1
selected_color_index = WHITE_IDX
last_drawn_pixel = None
supertiles_data = [
    [[0 for _ in range(SUPERTILE_GRID_DIM)] for _ in range(SUPERTILE_GRID_DIM)]
    for _ in range(MAX_SUPERTILES)
]
current_supertile_index = 0
num_supertiles = 1
selected_tile_for_supertile = 0
map_width = DEFAULT_MAP_WIDTH  # In supertiles
map_height = DEFAULT_MAP_HEIGHT  # In supertiles
map_data = [[0 for _ in range(map_width)] for _ in range(map_height)]
selected_supertile_for_map = 0
last_painted_map_cell = None
tile_clipboard_pattern = None
tile_clipboard_colors = None
supertile_clipboard_data = None

# --- Utility Functions ---
def get_contrast_color(hex_color):
    try:
        hex_color = hex_color.lstrip("#")
        r = int(hex_color[0:2], 16)
        g = int(hex_color[2:4], 16)
        b = int(hex_color[4:6], 16)
        luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255
        return "#000000" if luminance > 0.5 else "#FFFFFF"
    except:
        return "#000000"


# --- Application Class ---
class TileEditorApp:
    def __init__(self, root):
        self.debug_enabled = getattr(root, 'app_debug_mode', False)

        self.root = root

        self.root.title("MSX Tile Forge - Untitled")
        with suppress(tk.TclError):
            self.root.state("zoomed")

        self.current_project_base_path = None
        self.project_modified = False

        self.supertile_grid_width = SUPERTILE_GRID_DIM 
        self.supertile_grid_height = SUPERTILE_GRID_DIM 

        self.active_msx_palette = []
        for r_pal, g_pal, b_pal in MSX2_RGB7_VALUES:
            canonical_hex = self._rgb7_to_hex(r_pal, g_pal, b_pal)
            self.active_msx_palette.append(canonical_hex)
        self.selected_palette_slot = 0

        self.tile_image_cache = {}
        self.supertile_image_cache = {}
        self.map_render_cache = {} 

        self.drag_active = False
        self.drag_item_type = None
        self.drag_start_index = -1
        self.drag_press_x = 0       # X coord of initial button press for drag threshold
        self.drag_press_y = 0       # Y coord of initial button press for drag threshold
        self.drag_canvas = None
        self.drag_indicator_id = None

        self.map_zoom_level = 1.0
        self.show_supertile_grid = tk.BooleanVar(value=False)
        self.show_window_view = tk.BooleanVar(value=False)
        self.grid_color_index = 1
        self.window_view_tile_x = 0
        self.window_view_tile_y = 0
        self.window_view_tile_w = tk.IntVar(value=DEFAULT_WIN_VIEW_WIDTH_TILES)
        self.window_view_tile_h = tk.IntVar(value=DEFAULT_WIN_VIEW_HEIGHT_TILES)
        self.window_view_resize_handle = None
        self.drag_start_x = 0
        self.drag_start_y = 0
        self.drag_start_win_tx = 0
        self.drag_start_win_ty = 0
        self.drag_start_win_tw = 0
        self.drag_start_win_th = 0

        self.minimap_window = None
        self.minimap_canvas = None
        self.MINIMAP_VIEWPORT_COLOR = "#FF0000"
        self.MINIMAP_WIN_VIEW_COLOR = "#0000FF"
        self.minimap_background_cache = None
        self.minimap_bg_rendered_width = 0
        self.minimap_bg_rendered_height = 0
        self.minimap_resize_timer = None
        self._minimap_resizing_internally = False

        self.is_ctrl_pressed = False
        self.current_mouse_action = None
        self.pan_start_x = 0
        self.pan_start_y = 0
        self.last_placed_supertile_cell = None
        self.is_shift_pressed = False

        self.map_selection_active = False
        self.map_selection_rect_id = None
        self.map_selection_start_st = None
        self.map_selection_end_st = None
        self.map_clipboard_data = None
        self.map_paste_preview_rect_id = None

        self.edit_menu = None
        self.copy_menu_item_index = -1
        self.paste_menu_item_index = -1

        self.marked_unused_tiles = set()
        self.marked_unused_supertiles = set()

        self.rom_import_dialog = None

        self.create_menu()
        self._setup_global_key_bindings()
        self.notebook = ttk.Notebook(root)
        self.notebook.pack(pady=10, padx=10, expand=True, fill="both")

        self.tab_palette_editor = ttk.Frame(self.notebook, padding="10")
        self.tab_tile_editor = ttk.Frame(self.notebook, padding="10")
        self.tab_supertile_editor = ttk.Frame(self.notebook, padding="10")
        self.tab_map_editor = ttk.Frame(self.notebook, padding="10")

        self.notebook.add(self.tab_palette_editor, text="Palette Editor")
        self.notebook.add(self.tab_tile_editor, text="Tile Editor")
        self.notebook.add(self.tab_supertile_editor, text="Supertile Editor")
        self.notebook.add(self.tab_map_editor, text="Map Editor")

        self.create_palette_editor_widgets(self.tab_palette_editor)
        self.create_tile_editor_widgets(self.tab_tile_editor)
        self.create_supertile_editor_widgets(self.tab_supertile_editor)
        self.create_map_editor_widgets(self.tab_map_editor)

        self.update_all_displays(changed_level="all")
        self.notebook.bind("<<NotebookTabChanged>>", self.on_tab_change)

        self._setup_map_canvas_bindings()

        self._update_window_title()
        self._update_edit_menu_state()
        self._update_editor_button_states()
        self._update_supertile_rotate_button_state() 

        self._update_map_cursor()

    def debug(self, message):
        """Prints the message to the console only if debug mode is enabled."""
        if self.debug_enabled:
            print(str(message)) # Ensure message is a string

    # --- Palette Conversion Helpers ---
    def _hex_to_rgb7(self, hex_color):
        try:
            if not isinstance(hex_color, str):
                raise TypeError("Input must be a string.")
            if not hex_color.startswith("#") or len(hex_color) != 7:
                raise ValueError(f"Input '{hex_color}' is not a valid #RRGGBB format.")
            lookup_hex = hex_color.lower()
            idx512 = msx2_512_colors_hex.index(lookup_hex)
            return msx2_512_colors_rgb7[idx512]
        except ValueError:
            print(
                f"Warning: Could not find exact MSX2 RGB7 mapping for hex '{hex_color}'. Returning (0,0,0)."
            )
            return (0, 0, 0)
        except TypeError as e:
            print(f"Error in _hex_to_rgb7: Input type error for '{hex_color}'. {e}")
            return (0, 0, 0)
        except Exception as e:
            print(f"Unexpected error in _hex_to_rgb7 for '{hex_color}': {e}")
            return (0, 0, 0)

    def _rgb7_to_hex(self, r, g, b):
        try:
            safe_r = max(0, min(7, int(r)))
            safe_g = max(0, min(7, int(g)))
            safe_b = max(0, min(7, int(b)))
            r_255 = min(255, safe_r * 36)
            g_255 = min(255, safe_g * 36)
            b_255 = min(255, safe_b * 36)
            hex_color = f"#{r_255:02x}{g_255:02x}{b_255:02x}"
            return hex_color
        except (ValueError, TypeError) as e:
            print(f"Error in _rgb7_to_hex converting input ({r},{g},{b}): {e}")
            return "#000000"
        except Exception as e:
            print(f"Unexpected error in _rgb7_to_hex for ({r},{g},{b}): {e}")
            return "#000000"

    # --- Cache Management ---
    def invalidate_tile_cache(self, tile_index):
        keys_to_remove = [k for k in self.tile_image_cache if k[0] == tile_index]
        for key in keys_to_remove:
            self.tile_image_cache.pop(key, None)
        for st_index in range(num_supertiles):
            definition = supertiles_data[st_index]
            used = False
            # Check if definition is valid for current dimensions before iterating
            if len(definition) == self.supertile_grid_height and \
               (self.supertile_grid_height == 0 or (self.supertile_grid_width > 0 and len(definition[0]) == self.supertile_grid_width) or self.supertile_grid_width == 0) :
                for r_st_def in range(self.supertile_grid_height):
                    # Ensure row exists (it should if height check passed)
                    if r_st_def < len(definition):
                        for c_st_def in range(self.supertile_grid_width):
                             # Ensure column exists within row
                            if c_st_def < len(definition[r_st_def]):
                                if definition[r_st_def][c_st_def] == tile_index:
                                    used = True
                                    break
                            else: # Should not happen if width check above is good
                                # print(f"Warning: Invalidate tile cache, ST {st_index} row {r_st_def} too short for width {self.supertile_grid_width}")
                                break
                    else: # Should not happen if height check passed
                        # print(f"Warning: Invalidate tile cache, ST {st_index} definition too short for height {self.supertile_grid_height}")
                        break
                    if used:
                        break
            else:
                # This case indicates an inconsistency between self.supertile_grid_width/height
                # and the actual structure of supertiles_data[st_index].
                # This might happen if dimensions change but data isn't properly migrated/reinitialized.
                # For now, we'll skip invalidating supertile cache if the structure is unexpected,
                # or one could choose to invalidate all supertile caches as a precaution.
                # print(f"Warning: Supertile {st_index} definition dimensions mismatch project settings during tile cache invalidation. Skipping ST cache invalidation for this ST.")
                pass # Or: self.invalidate_supertile_cache(st_index) if aggressive


            if used:
                self.invalidate_supertile_cache(st_index)

    def invalidate_supertile_cache(self, supertile_index):
        keys_to_remove_st_img = [
            k for k in self.supertile_image_cache if k[0] == supertile_index
        ]
        for key_st_img in keys_to_remove_st_img:
            self.supertile_image_cache.pop(key_st_img, None)

        # Also invalidate corresponding entries in map_render_cache
        keys_to_remove_map_render = [
            k for k in self.map_render_cache if k[0] == supertile_index
        ]
        for key_map_render in keys_to_remove_map_render:
            self.map_render_cache.pop(key_map_render, None)

    def clear_all_caches(self):
        self.tile_image_cache.clear()
        self.supertile_image_cache.clear()
        self.map_render_cache.clear() # Added to clear the new map render cache

    # --- Image Generation ---
    def create_tile_image(self, tile_index, size):
        cache_key = (tile_index, size)
        if cache_key in self.tile_image_cache:
            return self.tile_image_cache[cache_key]
        render_size = max(1, int(size))
        img = tk.PhotoImage(width=render_size, height=render_size)
        if not (0 <= tile_index < num_tiles_in_set):
            img.put(INVALID_TILE_COLOR, to=(0, 0, render_size, render_size))
            self.tile_image_cache[cache_key] = img
            return img
        pattern = tileset_patterns[tile_index]
        colors = tileset_colors[tile_index]
        pixel_w_ratio = TILE_WIDTH / render_size
        pixel_h_ratio = TILE_HEIGHT / render_size
        for y in range(render_size):
            tile_r = min(TILE_HEIGHT - 1, int(y * pixel_h_ratio))
            try:
                fg_idx, bg_idx = colors[tile_r]
                fg_color = self.active_msx_palette[fg_idx]
                bg_color = self.active_msx_palette[bg_idx]
            except IndexError:
                fg_color, bg_color = INVALID_TILE_COLOR, INVALID_TILE_COLOR
            row_colors_hex = []
            for x in range(render_size):
                tile_c = min(TILE_WIDTH - 1, int(x * pixel_w_ratio))
                try:
                    pixel_val = pattern[tile_r][tile_c]
                except IndexError:
                    pixel_val = 0
                color_hex = fg_color if pixel_val == 1 else bg_color
                row_colors_hex.append(color_hex)
            try:
                img.put("{" + " ".join(row_colors_hex) + "}", to=(0, y))
            except tk.TclError as e:
                print(
                    f"Warning [create_tile_image]: TclError tile {tile_index} size {size} row {y}: {e}"
                )
                if row_colors_hex:
                    img.put(row_colors_hex[0], to=(0, y, render_size, y + 1))
        self.tile_image_cache[cache_key] = img
        return img

    def create_supertile_image(self, supertile_index, target_preview_width, target_preview_height): # Renamed parameters
        # Ensure target dimensions are at least 1x1
        safe_target_preview_width = max(1, int(target_preview_width))
        safe_target_preview_height = max(1, int(target_preview_height))

        # Cache key now includes actual target dimensions and source supertile grid dimensions
        cache_key = (supertile_index, safe_target_preview_width, safe_target_preview_height, self.supertile_grid_width, self.supertile_grid_height)
        if cache_key in self.supertile_image_cache: # Use supertile_image_cache
            return self.supertile_image_cache[cache_key]

        img = tk.PhotoImage(width=safe_target_preview_width, height=safe_target_preview_height)

        if not (0 <= supertile_index < num_supertiles):
            img.put(INVALID_SUPERTILE_COLOR, to=(0, 0, safe_target_preview_width, safe_target_preview_height))
            self.supertile_image_cache[cache_key] = img
            return img

        definition = supertiles_data[supertile_index]
        src_st_tile_grid_w = self.supertile_grid_width
        src_st_tile_grid_h = self.supertile_grid_height

        if src_st_tile_grid_w <= 0 or src_st_tile_grid_h <= 0:
            img.put(INVALID_SUPERTILE_COLOR, to=(0, 0, safe_target_preview_width, safe_target_preview_height))
            self.supertile_image_cache[cache_key] = img
            return img
        
        if len(definition) != src_st_tile_grid_h or \
           (src_st_tile_grid_h > 0 and (len(definition[0]) != src_st_tile_grid_w)):
            # print(f"Warning: Supertile {supertile_index} internal dim mismatch for create_supertile_image. Expected {src_st_tile_grid_w}x{src_st_tile_grid_h}")
            img.put(INVALID_SUPERTILE_COLOR, to=(0, 0, safe_target_preview_width, safe_target_preview_height))
            self.supertile_image_cache[cache_key] = img
            return img

        # --- Letterboxing/Pillarboxing logic REMOVED ---
        # The image is created with exact target dimensions, and we render directly into it.

        # Pixels of one original base tile (e.g., 8x8) when rendered within the target_preview_width/height
        output_pixels_per_base_tile_w = safe_target_preview_width / src_st_tile_grid_w
        output_pixels_per_base_tile_h = safe_target_preview_height / src_st_tile_grid_h
        
        # Heuristic: if rendering a source tile column/row to less than 1 pixel on average.
        if safe_target_preview_width < src_st_tile_grid_w or safe_target_preview_height < src_st_tile_grid_h:
             img.put(INVALID_SUPERTILE_COLOR, to=(0, 0, safe_target_preview_width, safe_target_preview_height))
             self.supertile_image_cache[cache_key] = img
             return img

        # Ratio of source base tile pixels (e.g., TILE_WIDTH) to its display size in the preview.
        src_pixels_per_output_pixel_w_ratio = TILE_WIDTH / output_pixels_per_base_tile_w if output_pixels_per_base_tile_w > 1e-9 else float('inf')
        src_pixels_per_output_pixel_h_ratio = TILE_HEIGHT / output_pixels_per_base_tile_h if output_pixels_per_base_tile_h > 1e-9 else float('inf')

        for y_out_preview in range(safe_target_preview_height):
            row_colors_hex_preview = []
            for x_out_preview in range(safe_target_preview_width):
                src_base_tile_c_in_st_grid_preview = min(src_st_tile_grid_w - 1, int(x_out_preview / output_pixels_per_base_tile_w))
                src_base_tile_r_in_st_grid_preview = min(src_st_tile_grid_h - 1, int(y_out_preview / output_pixels_per_base_tile_h))

                x_in_scaled_base_tile_area_preview = (x_out_preview / output_pixels_per_base_tile_w - src_base_tile_c_in_st_grid_preview) * output_pixels_per_base_tile_w
                y_in_scaled_base_tile_area_preview = (y_out_preview / output_pixels_per_base_tile_h - src_base_tile_r_in_st_grid_preview) * output_pixels_per_base_tile_h
                
                src_pixel_c_in_base_tile_preview = min(TILE_WIDTH - 1, int(x_in_scaled_base_tile_area_preview * src_pixels_per_output_pixel_w_ratio))
                src_pixel_r_in_base_tile_preview = min(TILE_HEIGHT - 1, int(y_in_scaled_base_tile_area_preview * src_pixels_per_output_pixel_h_ratio))

                pixel_color_hex_final_preview = INVALID_TILE_COLOR

                try:
                    tile_idx_from_st_def_preview = definition[src_base_tile_r_in_st_grid_preview][src_base_tile_c_in_st_grid_preview]
                    if 0 <= tile_idx_from_st_def_preview < num_tiles_in_set:
                        if not (0 <= src_pixel_r_in_base_tile_preview < TILE_HEIGHT and \
                                len(tileset_patterns[tile_idx_from_st_def_preview]) > src_pixel_r_in_base_tile_preview and \
                                0 <= src_pixel_c_in_base_tile_preview < TILE_WIDTH and \
                                len(tileset_patterns[tile_idx_from_st_def_preview][src_pixel_r_in_base_tile_preview]) > src_pixel_c_in_base_tile_preview and \
                                len(tileset_colors[tile_idx_from_st_def_preview]) > src_pixel_r_in_base_tile_preview):
                            pixel_color_hex_final_preview = INVALID_TILE_COLOR
                        else:
                            pattern_pixel_val_preview = tileset_patterns[tile_idx_from_st_def_preview][src_pixel_r_in_base_tile_preview][src_pixel_c_in_base_tile_preview]
                            fg_idx_val_preview, bg_idx_val_preview = tileset_colors[tile_idx_from_st_def_preview][src_pixel_r_in_base_tile_preview]
                            
                            if not (0 <= fg_idx_val_preview < len(self.active_msx_palette) and 0 <= bg_idx_val_preview < len(self.active_msx_palette)):
                                fg_color_preview = INVALID_TILE_COLOR; bg_color_preview = INVALID_TILE_COLOR
                            else:
                                fg_color_preview = self.active_msx_palette[fg_idx_val_preview]
                                bg_color_preview = self.active_msx_palette[bg_idx_val_preview]
                            pixel_color_hex_final_preview = fg_color_preview if pattern_pixel_val_preview == 1 else bg_color_preview
                except IndexError:
                    pixel_color_hex_final_preview = INVALID_TILE_COLOR
                
                row_colors_hex_preview.append(pixel_color_hex_final_preview)
            
            try:
                if safe_target_preview_width > 0:
                    img.put("{" + " ".join(row_colors_hex_preview) + "}", to=(0, y_out_preview))
            except tk.TclError as e:
                if row_colors_hex_preview and safe_target_preview_width > 0:
                    img.put(row_colors_hex_preview[0], to=(0, y_out_preview, safe_target_preview_width, y_out_preview + 1))
        
        self.supertile_image_cache[cache_key] = img # Store in the original cache
        return img

    # --- Menu Creation ---
    def create_menu(self):
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)

        # --- File Menu ---
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(
            label="New Project (All)", command=self.new_project, accelerator="Ctrl+N"
        )
        file_menu.add_separator()
        file_menu.add_command(
            label="Open Project...", command=self.open_project, accelerator="Ctrl+O"
        )
        file_menu.add_command(
            label="Save Project", command=self.save_project, accelerator="Ctrl+S"
        )
        file_menu.add_command(
            label="Save Project As...",
            command=self.save_project_as,
            accelerator="Ctrl+Shift+S",
        )
        file_menu.add_separator()
        file_menu.add_command(
            label="Open Palette (.msxpal)...", command=self.open_palette
        )
        file_menu.add_command(
            label="Save Palette (.msxpal)...", command=self.save_palette
        )
        file_menu.add_separator()
        file_menu.add_command(
            label="Open Tileset (.SC4Tiles)...", command=self.open_tileset
        )
        file_menu.add_command(
            label="Save Tileset (.SC4Tiles)...", command=self.save_tileset
        )
        # --- NEW: Import Tiles from ROM ---
        file_menu.add_command(
            label="Import Tiles from ROM...", command=self.open_rom_importer # New command
        )
        # --- End New ---
        file_menu.add_separator()
        file_menu.add_command(
            label="Open Supertiles (.SC4Super)...", command=self.open_supertiles
        )
        file_menu.add_command(
            label="Save Supertiles (.SC4Super)...", command=self.save_supertiles
        )
        file_menu.add_separator()
        file_menu.add_command(label="Open Map (.SC4Map)...", command=self.open_map)
        file_menu.add_command(label="Save Map (.SC4Map)...", command=self.save_map)
        file_menu.add_separator()
        file_menu.add_command(
            label="Exit", command=self.root.quit, accelerator="Ctrl+Q"
        )

        # --- Edit Menu (Modified) ---
        self.edit_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Edit", menu=self.edit_menu)

        self.edit_menu.add_command(
            label="Copy",
            command=self.handle_generic_copy,
            state=tk.DISABLED,
            accelerator="Ctrl+C",
        )
        self.copy_menu_item_index = self.edit_menu.index(tk.END)

        self.edit_menu.add_command(
            label="Paste",
            command=self.handle_generic_paste,
            state=tk.DISABLED,
            accelerator="Ctrl+V",
        )
        self.paste_menu_item_index = self.edit_menu.index(tk.END)

        self.edit_menu.add_separator()
        self.edit_menu.add_command(
            label="Clear Current Tile", command=self.clear_current_tile
        )
        self.edit_menu.add_command(
            label="Clear Current Supertile", command=self.clear_current_supertile
        )
        self.edit_menu.add_command(label="Clear Map", command=self.clear_map)
        self.edit_menu.add_separator()
        self.edit_menu.add_command(
            label="Set Tileset Size...", command=self.set_tileset_size
        )
        self.edit_menu.add_command(
            label="Set Supertile Count...", command=self.set_supertile_count
        )
        self.edit_menu.add_command(
            label="Set Map Dimensions...", command=self.set_map_dimensions
        )

        # --- View Menu ---
        view_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="View", menu=view_menu)
        view_menu.add_command(
            label="Show/Hide Minimap", command=self.toggle_minimap, accelerator="Ctrl+M"
        )

        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Help", menu=help_menu)
        help_menu.add_command(label="About...", command=self.show_about_box)

    # --- Widget Creation ---
    def create_palette_editor_widgets(self, parent_frame):
        main_frame = ttk.Frame(parent_frame)
        main_frame.pack(expand=True, fill="both")
        left_frame = ttk.Frame(main_frame, padding=5)
        left_frame.grid(row=0, column=0, sticky="ns")
        right_frame = ttk.Frame(main_frame, padding=5)
        right_frame.grid(row=0, column=1, sticky="nsew")
        main_frame.grid_rowconfigure(0, weight=1)
        main_frame.grid_columnconfigure(0, weight=0)
        main_frame.grid_columnconfigure(1, weight=1)
        # Left Frame Contents
        current_palette_frame = ttk.LabelFrame(
            left_frame, text="Active Palette (16 colors)"
        )
        current_palette_frame.pack(pady=(0, 10), fill="x")
        cp_canvas_width = 4 * (CURRENT_PALETTE_SLOT_SIZE + 2) + 2
        cp_canvas_height = 4 * (CURRENT_PALETTE_SLOT_SIZE + 2) + 2
        self.current_palette_canvas = tk.Canvas(
            current_palette_frame,
            width=cp_canvas_width,
            height=cp_canvas_height,
            borderwidth=0,
            highlightthickness=0,
        )
        self.current_palette_canvas.pack()
        self.current_palette_canvas.bind(
            "<Button-1>", self.handle_current_palette_click
        )
        info_frame = ttk.LabelFrame(left_frame, text="Selected Slot Info")
        info_frame.pack(pady=(0, 10), fill="x")
        self.selected_slot_label = ttk.Label(info_frame, text="Slot: 0")
        self.selected_slot_label.grid(
            row=0, column=0, columnspan=3, sticky="w", padx=5, pady=2
        )
        self.selected_slot_color_label = tk.Label(
            info_frame, text="      ", bg="#000000", relief="sunken", width=6
        )
        self.selected_slot_color_label.grid(row=1, column=0, padx=5, pady=2)
        self.selected_slot_rgb_label = ttk.Label(info_frame, text="RGB: #000000")
        self.selected_slot_rgb_label.grid(
            row=1, column=1, columnspan=2, sticky="w", padx=5
        )
        rgb_frame = ttk.LabelFrame(left_frame, text="Set Color (RGB 0-7)")
        rgb_frame.pack(pady=(0, 10), fill="x")
        r_label = ttk.Label(rgb_frame, text="R:")
        r_label.grid(row=0, column=0, padx=(5, 0))
        self.rgb_r_var = tk.StringVar(value="0")
        self.rgb_r_entry = ttk.Entry(rgb_frame, textvariable=self.rgb_r_var, width=2)
        self.rgb_r_entry.grid(row=0, column=1)
        g_label = ttk.Label(rgb_frame, text="G:")
        g_label.grid(row=0, column=2, padx=(5, 0))
        self.rgb_g_var = tk.StringVar(value="0")
        self.rgb_g_entry = ttk.Entry(rgb_frame, textvariable=self.rgb_g_var, width=2)
        self.rgb_g_entry.grid(row=0, column=3)
        b_label = ttk.Label(rgb_frame, text="B:")
        b_label.grid(row=0, column=4, padx=(5, 0))
        self.rgb_b_var = tk.StringVar(value="0")
        self.rgb_b_entry = ttk.Entry(rgb_frame, textvariable=self.rgb_b_var, width=2)
        self.rgb_b_entry.grid(row=0, column=5)
        apply_rgb_button = ttk.Button(
            rgb_frame, text="Set", command=self.handle_rgb_apply
        )
        apply_rgb_button.grid(row=0, column=6, padx=5, pady=5)
        reset_palette_button = ttk.Button(
            left_frame,
            text="Reset to MSX2 Default",
            command=self.reset_palette_to_default,
        )
        reset_palette_button.pack(pady=(0, 5), fill="x")
        # Right Frame Contents
        picker_frame = ttk.LabelFrame(right_frame, text="MSX2 512 Color Picker")
        picker_frame.pack(expand=True, fill="both")
        picker_canvas_width = MSX2_PICKER_COLS * (MSX2_PICKER_SQUARE_SIZE + 1) + 1
        picker_canvas_height = MSX2_PICKER_ROWS * (MSX2_PICKER_SQUARE_SIZE + 1) + 1
        picker_hbar = ttk.Scrollbar(picker_frame, orient=tk.HORIZONTAL)
        picker_vbar = ttk.Scrollbar(picker_frame, orient=tk.VERTICAL)
        self.msx2_picker_canvas = tk.Canvas(
            picker_frame,
            bg="lightgrey",
            scrollregion=(0, 0, picker_canvas_width, picker_canvas_height),
            xscrollcommand=picker_hbar.set,
            yscrollcommand=picker_vbar.set,
        )
        picker_hbar.config(command=self.msx2_picker_canvas.xview)
        picker_vbar.config(command=self.msx2_picker_canvas.yview)
        self.msx2_picker_canvas.grid(row=0, column=0, sticky="nsew")
        picker_vbar.grid(row=0, column=1, sticky="ns")
        picker_hbar.grid(row=1, column=0, sticky="ew")
        picker_frame.grid_rowconfigure(0, weight=1)
        picker_frame.grid_columnconfigure(0, weight=1)
        self.msx2_picker_canvas.bind("<Button-1>", self.handle_512_picker_click)
        self.draw_512_picker()

    def create_tile_editor_widgets(self, parent_frame):
        main_frame = ttk.Frame(parent_frame)
        main_frame.pack(expand=True, fill="both")

        # Left Frame (Editor, Attributes, Transform)
        left_frame = ttk.Frame(main_frame)
        left_frame.grid(row=0, column=0, sticky=tk.N, padx=(0, 10))

        editor_frame = ttk.LabelFrame(
            left_frame, text="Tile Editor (Left: FG, Right: BG)"
        )
        editor_frame.grid(row=0, column=0, pady=(0, 10), sticky="ew") 
        
        self.editor_canvas = tk.Canvas(
            editor_frame,
            width=TILE_WIDTH * EDITOR_PIXEL_SIZE,
            height=TILE_HEIGHT * EDITOR_PIXEL_SIZE,
            bg="grey",
        )
        self.editor_canvas.grid(row=0, column=0, sticky=tk.NSEW) 
        editor_frame.grid_rowconfigure(0, weight=1) 
        editor_frame.grid_columnconfigure(0, weight=0) 


        self.editor_canvas.bind("<Button-1>", self.handle_editor_click)
        self.editor_canvas.bind("<B1-Motion>", self.handle_editor_drag)
        self.editor_canvas.bind(
            "<Button-3>", self.handle_editor_click
        ) 
        self.editor_canvas.bind(
            "<B3-Motion>", self.handle_editor_drag
        ) 
        self.editor_canvas.bind("<Enter>", self._set_pencil_cursor)
        self.editor_canvas.bind("<Leave>", self._reset_cursor)

        # --- FG/BG Buttons Container ---
        fg_bg_buttons_container = ttk.Frame(editor_frame)
        fg_bg_buttons_container.grid(row=0, column=1, sticky=(tk.N, tk.S), padx=(10, 0))
        editor_frame.grid_columnconfigure(1, weight=0) 
        # fg_bg_buttons_container.grid_rowconfigure(0, weight=0) # Removed as title label was removed

        self.attr_row_frames = [] 
        self.attr_fg_labels = []
        self.attr_bg_labels = []

        for r_idx in range(TILE_HEIGHT): # Renamed r to r_idx
            row_control_frame = ttk.Frame(fg_bg_buttons_container)
            row_control_frame.grid(row=r_idx, column=0, sticky=tk.EW) # Start row at 0
            fg_bg_buttons_container.grid_rowconfigure(r_idx, weight=1) 

            row_control_frame.grid_columnconfigure(0, weight=0)  
            row_control_frame.grid_columnconfigure(1, weight=1)  
            row_control_frame.grid_columnconfigure(2, weight=0)  


            row_num_label = ttk.Label(row_control_frame, text=f"{r_idx}:")
            row_num_label.grid(row=0, column=0, padx=(0, 5), sticky=tk.W)

            fg_label = tk.Label(
                row_control_frame, text=" FG ", width=3, relief="raised", borderwidth=2
            )
            fg_label.grid(row=0, column=1, padx=(0, 2), sticky=tk.E) 
            fg_label.bind("<Button-1>", lambda e, row=r_idx: self.set_row_color(row, "fg")) # Ensure correct lambda capture if r_idx is used
            self.attr_fg_labels.append(fg_label)

            bg_label = tk.Label(
                row_control_frame, text=" BG ", width=3, relief="raised", borderwidth=2
            )
            bg_label.grid(row=0, column=2, padx=(2, 0), sticky=tk.W) 
            bg_label.bind("<Button-1>", lambda e, row=r_idx: self.set_row_color(row, "bg")) # Ensure correct lambda capture
            self.attr_bg_labels.append(bg_label)
            
            self.attr_row_frames.append(row_control_frame)
        # --- End FG/BG Buttons Container ---

        # --- Transform Frame below editor_frame in left_frame ---
        transform_frame = ttk.LabelFrame(left_frame, text="Transform")
        transform_frame.grid(row=1, column=0, pady=(0, 5), sticky="ew") 
        
        flip_h_button = ttk.Button(
            transform_frame, text="Flip H", command=self.flip_tile_horizontal
        )
        flip_h_button.grid(row=0, column=0, padx=3, pady=3)
        flip_v_button = ttk.Button(
            transform_frame, text="Flip V", command=self.flip_tile_vertical
        )
        flip_v_button.grid(row=0, column=1, padx=3, pady=3)
        rotate_button = ttk.Button(
            transform_frame, text="Rotate", command=self.rotate_tile_90cw
        )
        rotate_button.grid(row=0, column=2, padx=3, pady=3)
        shift_up_button = ttk.Button(
            transform_frame, text="Shift Up", command=self.shift_tile_up
        )
        shift_up_button.grid(row=1, column=0, padx=3, pady=3)
        shift_down_button = ttk.Button(
            transform_frame, text="Shift Down", command=self.shift_tile_down
        )
        shift_down_button.grid(row=1, column=1, padx=3, pady=3)
        shift_left_button = ttk.Button(
            transform_frame, text="Shift Left", command=self.shift_tile_left
        )
        shift_left_button.grid(row=1, column=2, padx=3, pady=3)
        shift_right_button = ttk.Button(
            transform_frame, text="Shift Right", command=self.shift_tile_right
        )
        shift_right_button.grid(row=1, column=3, padx=3, pady=3)
        
        # --- Mark Unused Button below transform_frame in left_frame ---
        # This button is now placed directly in left_frame, at row=2
        self.mark_unused_tiles_button = ttk.Button( # Store as self attribute
            left_frame, text="Mark Unused", command=self.handle_mark_unused_tiles
        )
        self.mark_unused_tiles_button.grid(row=2, column=0, pady=(5, 10), sticky="ew") 

        # Right Frame (Palette, Tileset Viewer, Buttons)
        right_frame = ttk.Frame(main_frame)
        right_frame.grid(
            row=0, column=1, sticky=(tk.N, tk.S, tk.W, tk.E)
        ) 
        main_frame.grid_rowconfigure(0, weight=1)
        main_frame.grid_columnconfigure(0, weight=0) 
        main_frame.grid_columnconfigure(1, weight=1) 

        palette_frame = ttk.LabelFrame(
            right_frame, text="Color Selector (Click to draw)"
        )
        palette_frame.grid(row=0, column=0, pady=(0, 10), sticky=(tk.N, tk.W, tk.E))
        self.tile_editor_palette_canvas = tk.Canvas(
            palette_frame,
            width=4 * (PALETTE_SQUARE_SIZE + 2),
            height=4 * (PALETTE_SQUARE_SIZE + 2),
            borderwidth=0,
            highlightthickness=0,
        )
        self.tile_editor_palette_canvas.grid(row=0, column=0)
        self.tile_editor_palette_canvas.bind(
            "<Button-1>", self.handle_tile_editor_palette_click
        )

        viewer_frame = ttk.LabelFrame(right_frame, text="Tileset")
        viewer_frame.grid(row=1, column=0, sticky=(tk.N, tk.S, tk.W, tk.E))
        right_frame.grid_rowconfigure(0, weight=0) 
        right_frame.grid_rowconfigure(1, weight=1) 
        right_frame.grid_rowconfigure(2, weight=0) 
        right_frame.grid_rowconfigure(3, weight=0) 
        right_frame.grid_columnconfigure(0, weight=1) 

        viewer_canvas_width = NUM_TILES_ACROSS * (VIEWER_TILE_SIZE + 1) + 1
        num_rows_in_viewer = math.ceil(MAX_TILES / NUM_TILES_ACROSS)
        viewer_canvas_height = num_rows_in_viewer * (VIEWER_TILE_SIZE + 1) + 1
        viewer_hbar = ttk.Scrollbar(viewer_frame, orient=tk.HORIZONTAL)
        viewer_vbar = ttk.Scrollbar(viewer_frame, orient=tk.VERTICAL)
        self.tileset_canvas = tk.Canvas(
            viewer_frame,
            bg="lightgrey",
            scrollregion=(0, 0, viewer_canvas_width, viewer_canvas_height),
            xscrollcommand=viewer_hbar.set,
            yscrollcommand=viewer_vbar.set,
        )
        viewer_hbar.config(command=self.tileset_canvas.xview)
        viewer_vbar.config(command=self.tileset_canvas.yview)
        self.tileset_canvas.grid(row=0, column=0, sticky=(tk.N, tk.S, tk.W, tk.E))
        viewer_vbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        viewer_hbar.grid(row=1, column=0, sticky=(tk.W, tk.E))
        viewer_frame.grid_rowconfigure(0, weight=1)
        viewer_frame.grid_columnconfigure(0, weight=1)

        self.tileset_canvas.bind("<Button-1>", self.handle_tileset_click)
        self.tileset_canvas.bind("<B1-Motion>", self.handle_viewer_drag_motion)
        self.tileset_canvas.bind("<ButtonRelease-1>", self.handle_viewer_drag_release)

        tile_button_frame = ttk.Frame(right_frame)
        tile_button_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(5, 0))

        self.add_tile_button = ttk.Button(
            tile_button_frame, text="Add New", command=self.handle_add_tile
        )
        self.add_tile_button.pack(side=tk.LEFT, padx=(0, 3))

        self.insert_tile_button = ttk.Button(
            tile_button_frame, text="Insert", command=self.handle_insert_tile
        )
        self.insert_tile_button.pack(side=tk.LEFT, padx=3)

        self.delete_tile_button = ttk.Button(
            tile_button_frame, text="Delete", command=self.handle_delete_tile
        )
        self.delete_tile_button.pack(side=tk.LEFT, padx=3)

        self.tile_info_label = ttk.Label(right_frame, text="Tile: 0/0")
        self.tile_info_label.grid(row=3, column=0, sticky=tk.W, pady=(2, 0))

    def create_supertile_editor_widgets(self, parent_frame):
        main_frame = ttk.Frame(parent_frame)
        main_frame.pack(expand=True, fill="both")
        left_frame = ttk.Frame(main_frame)
        left_frame.grid(row=0, column=0, sticky=tk.N, padx=(0, 10))

        # Supertile Definition Frame (Row 0)
        def_frame = ttk.LabelFrame(
            left_frame, text="Supertile Definition (Click to place selected tile)"
        )
        def_frame.grid(row=0, column=0, pady=(0, 5), sticky="ew")
        
        # Calculate definition canvas size dynamically
        # SUPERTILE_DEF_TILE_SIZE is the display size of one mini-tile in the editor (e.g., 32)
        def_canvas_width_actual = self.supertile_grid_width * SUPERTILE_DEF_TILE_SIZE
        def_canvas_height_actual = self.supertile_grid_height * SUPERTILE_DEF_TILE_SIZE
        # Ensure minimum size if dimensions are very small, e.g. 1x1 supertile
        def_canvas_width_actual = max(SUPERTILE_DEF_TILE_SIZE, def_canvas_width_actual)
        def_canvas_height_actual = max(SUPERTILE_DEF_TILE_SIZE, def_canvas_height_actual)

        self.supertile_def_canvas = tk.Canvas(
            def_frame, width=def_canvas_width_actual, height=def_canvas_height_actual, bg="darkgrey"
        )
        self.supertile_def_canvas.grid(row=0, column=0) # Consider adding sticky="nsew" if def_frame can resize
        def_frame.grid_rowconfigure(0, weight=1) # Allow canvas to expand if def_frame resizes
        def_frame.grid_columnconfigure(0, weight=1)


        self.supertile_def_canvas.bind("<Button-1>", self.handle_supertile_def_click)
        self.supertile_def_canvas.bind("<B1-Motion>", self.handle_supertile_def_drag)
        self.supertile_def_canvas.bind(
            "<ButtonRelease-1>", self.handle_supertile_def_release
        )
        self.supertile_def_canvas.bind(
            "<Button-3>", self.handle_supertile_def_right_click
        )
        self.supertile_def_canvas.bind("<Enter>", self._set_pencil_cursor)
        self.supertile_def_canvas.bind("<Leave>", self._reset_cursor)

        # Info Labels Frame (Row 1)
        info_labels_frame = ttk.Frame(left_frame)
        info_labels_frame.grid(
            row=1, column=0, pady=(0, 5), sticky="ew"
        )
        self.supertile_def_info_label = ttk.Label(
            info_labels_frame, text=f"Editing Supertile: {current_supertile_index}"
        )
        self.supertile_def_info_label.pack(anchor=tk.W)
        self.supertile_tile_select_label = ttk.Label(
            info_labels_frame,
            text=f"Selected Tile for Placing: {selected_tile_for_supertile}",
        )
        self.supertile_tile_select_label.pack(anchor=tk.W)

        # Transformation Frame (Row 2)
        st_transform_frame = ttk.LabelFrame(left_frame, text="Transform Supertile")
        st_transform_frame.grid(
            row=2, column=0, pady=(0, 5), sticky="ew"
        )

        st_flip_h_button = ttk.Button(
            st_transform_frame, text="Flip H", command=self.flip_supertile_horizontal
        )
        st_flip_h_button.grid(row=0, column=0, padx=3, pady=(5, 3))
        st_flip_v_button = ttk.Button(
            st_transform_frame, text="Flip V", command=self.flip_supertile_vertical
        )
        st_flip_v_button.grid(row=0, column=1, padx=3, pady=(5, 3))
        
        # Store reference to the rotate button
        self.st_rotate_button = ttk.Button(
            st_transform_frame, text="Rotate", command=self.rotate_supertile_90cw
        )
        self.st_rotate_button.grid(row=0, column=2, padx=3, pady=(5, 3))

        st_shift_up_button = ttk.Button(
            st_transform_frame, text="Shift Up", command=self.shift_supertile_up
        )
        st_shift_up_button.grid(row=1, column=0, padx=3, pady=3)
        st_shift_down_button = ttk.Button(
            st_transform_frame, text="Shift Down", command=self.shift_supertile_down
        )
        st_shift_down_button.grid(row=1, column=1, padx=3, pady=3)
        st_shift_left_button = ttk.Button(
            st_transform_frame, text="Shift Left", command=self.shift_supertile_left
        )
        st_shift_left_button.grid(row=1, column=2, padx=3, pady=3)
        st_shift_right_button = ttk.Button(
            st_transform_frame, text="Shift Right", command=self.shift_supertile_right
        )
        st_shift_right_button.grid(row=1, column=3, padx=3, pady=3)

        # --- Mark Unused Button (Row 3 in left_frame) ---
        self.mark_unused_st_button = ttk.Button(
            left_frame, text="Mark Unused", command=self.handle_mark_unused_supertiles_and_tiles
        )
        self.mark_unused_st_button.grid(row=3, column=0, pady=(5, 10), sticky="ew")

        # Right Frame
        right_frame = ttk.Frame(main_frame)
        right_frame.grid(row=0, column=1, sticky=(tk.N, tk.S, tk.W, tk.E))
        main_frame.grid_columnconfigure(1, weight=1)
        main_frame.grid_rowconfigure(0, weight=1)

        # Tileset Viewer Frame
        tileset_viewer_frame = ttk.LabelFrame(
            right_frame, text="Tileset (Click to select tile for definition)"
        )
        tileset_viewer_frame.grid(
            row=0, column=0, sticky=(tk.N, tk.S, tk.W, tk.E), pady=(0, 10)
        )
        right_frame.grid_rowconfigure(0, weight=1)

        viewer_canvas_width_tiles = NUM_TILES_ACROSS * (VIEWER_TILE_SIZE + 1) + 1 # Keep using constant for tile viewer
        num_rows_in_tile_viewer = math.ceil(MAX_TILES / NUM_TILES_ACROSS)
        viewer_canvas_height_tiles = num_rows_in_tile_viewer * (VIEWER_TILE_SIZE + 1) + 1

        st_viewer_hbar = ttk.Scrollbar(tileset_viewer_frame, orient=tk.HORIZONTAL)
        st_viewer_vbar = ttk.Scrollbar(tileset_viewer_frame, orient=tk.VERTICAL)
        self.st_tileset_canvas = tk.Canvas(
            tileset_viewer_frame,
            bg="lightgrey",
            scrollregion=(0, 0, viewer_canvas_width_tiles, viewer_canvas_height_tiles),
            xscrollcommand=st_viewer_hbar.set,
            yscrollcommand=st_viewer_vbar.set,
        )

        st_viewer_hbar.config(command=self.st_tileset_canvas.xview)
        st_viewer_vbar.config(command=self.st_tileset_canvas.yview)
        self.st_tileset_canvas.grid(row=0, column=0, sticky=(tk.N, tk.S, tk.W, tk.E))
        st_viewer_vbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        st_viewer_hbar.grid(row=1, column=0, sticky=(tk.W, tk.E))
        tileset_viewer_frame.grid_rowconfigure(0, weight=1)
        tileset_viewer_frame.grid_columnconfigure(0, weight=1)

        self.st_tileset_canvas.bind("<Button-1>", self.handle_st_tileset_click)
        self.st_tileset_canvas.bind("<B1-Motion>", self.handle_viewer_drag_motion)
        self.st_tileset_canvas.bind(
            "<ButtonRelease-1>", self.handle_viewer_drag_release
        )

        # Supertile Selector Frame
        st_selector_frame = ttk.LabelFrame(
            right_frame, text="Supertile Selector (Click to edit)"
        )
        st_selector_frame.grid(row=1, column=0, sticky=(tk.N, tk.S, tk.W, tk.E))
        right_frame.grid_rowconfigure(1, weight=1)

        # Scrollregion for supertile selector will be set dynamically in draw_supertile_selector
        # For initial setup, provide a minimal valid scrollregion.
        # Canvas width aims for 256px (TARGET_SELECTOR_CANVAS_WIDTH), height determined by content.
        target_selector_width = 256 # Matches the desired target layout width
        self.supertile_selector_canvas = tk.Canvas(
            st_selector_frame,
            bg="lightgrey",
            scrollregion=(0, 0, 1, 1), # Placeholder, will be updated
            width=target_selector_width # Request this width
        )
        st_sel_hbar = ttk.Scrollbar(st_selector_frame, orient=tk.HORIZONTAL)
        st_sel_vbar = ttk.Scrollbar(st_selector_frame, orient=tk.VERTICAL)
        self.supertile_selector_canvas.config(
            xscrollcommand=st_sel_hbar.set,
            yscrollcommand=st_sel_vbar.set
        )
        st_sel_hbar.config(command=self.supertile_selector_canvas.xview)
        st_sel_vbar.config(command=self.supertile_selector_canvas.yview)

        self.supertile_selector_canvas.grid(
            row=0, column=0, sticky=(tk.N, tk.S, tk.W, tk.E)
        )
        st_sel_vbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        st_sel_hbar.grid(row=1, column=0, sticky=(tk.W, tk.E))
        st_selector_frame.grid_rowconfigure(0, weight=1)
        st_selector_frame.grid_columnconfigure(0, weight=1) # Allow canvas to take space

        self.supertile_selector_canvas.bind(
            "<Button-1>", self.handle_supertile_selector_click
        )
        self.supertile_selector_canvas.bind(
            "<B1-Motion>", self.handle_viewer_drag_motion
        )
        self.supertile_selector_canvas.bind(
            "<ButtonRelease-1>", self.handle_viewer_drag_release
        )

        # Bottom Buttons/Labels Frame
        bottom_controls_frame = ttk.Frame(right_frame)
        bottom_controls_frame.grid(
            row=2, column=0, sticky="ew", pady=(5, 0)
        )
        right_frame.grid_rowconfigure(2, weight=0)

        self.add_supertile_button = ttk.Button(
            bottom_controls_frame, text="Add New", command=self.handle_add_supertile
        )
        self.add_supertile_button.pack(side=tk.LEFT, padx=(0, 3))

        self.insert_supertile_button = ttk.Button(
            bottom_controls_frame, text="Insert", command=self.handle_insert_supertile
        )
        self.insert_supertile_button.pack(side=tk.LEFT, padx=3)

        self.delete_supertile_button = ttk.Button(
            bottom_controls_frame, text="Delete", command=self.handle_delete_supertile
        )
        self.delete_supertile_button.pack(side=tk.LEFT, padx=3)

        self.supertile_sel_info_label = ttk.Label(
            bottom_controls_frame, text=f"Supertiles: {num_supertiles}"
        )
        self.supertile_sel_info_label.pack(side=tk.LEFT, anchor=tk.W, padx=(10, 0))

    def create_map_editor_widgets(self, parent_frame):
        # Create the main container frame for this tab
        main_frame = ttk.Frame(parent_frame)
        main_frame.pack(expand=True, fill="both")

        # --- Create Left and Right Columns ---
        left_frame = ttk.Frame(main_frame)
        left_frame.grid(row=0, column=0, sticky=(tk.N, tk.S, tk.W, tk.E), padx=(0, 10))
        right_frame = ttk.Frame(main_frame)
        right_frame.grid(row=0, column=1, sticky=(tk.N, tk.S))

        # --- Configure Main Frame Grid Weights ---
        main_frame.grid_columnconfigure(0, weight=1)
        main_frame.grid_columnconfigure(1, weight=0)
        main_frame.grid_rowconfigure(0, weight=1)

        # --- Configure Left Frame Contents ---

        # Row 0: Map Size and Zoom Controls
        controls_frame = ttk.Frame(left_frame)
        controls_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        size_label = ttk.Label(controls_frame, text="Map Size:")
        size_label.grid(row=0, column=0, padx=(0, 5), pady=2)
        self.map_size_label = ttk.Label(
            controls_frame, text=f"{map_width} x {map_height}"
        )
        self.map_size_label.grid(row=0, column=1, padx=(0, 10), pady=2)
        zoom_frame = ttk.Frame(controls_frame)
        zoom_frame.grid(row=0, column=2, padx=(10, 0), pady=2)
        zoom_out_button = ttk.Button(
            zoom_frame,
            text="-",
            width=2,
            command=lambda: self.change_map_zoom_mult(1 / 1.25),
        )
        zoom_out_button.pack(side=tk.LEFT)
        self.map_zoom_label = ttk.Label(
            zoom_frame, text="100%", width=5, anchor=tk.CENTER
        )
        self.map_zoom_label.pack(side=tk.LEFT, padx=2)
        zoom_in_button = ttk.Button(
            zoom_frame,
            text="+",
            width=2,
            command=lambda: self.change_map_zoom_mult(1.25),
        )
        zoom_in_button.pack(side=tk.LEFT)
        zoom_reset_button = ttk.Button(
            zoom_frame, text="Reset", width=5, command=lambda: self.set_map_zoom(1.0)
        )
        zoom_reset_button.pack(side=tk.LEFT, padx=(5, 0))
        self.map_coords_label = ttk.Label(
            controls_frame, text="ST Coords: -, -", width=15
        )
        self.map_coords_label.grid(row=0, column=3, padx=(10, 5), sticky="w")

        # Row 1: Window View Toggle and Size Inputs
        win_controls_frame = ttk.Frame(left_frame)
        win_controls_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        win_view_check = ttk.Checkbutton(
            win_controls_frame,
            text="Show Window View",
            variable=self.show_window_view,
            command=self.toggle_window_view,
        )
        win_view_check.grid(row=0, column=0, padx=5, sticky="w")
        win_w_label = ttk.Label(win_controls_frame, text="Width:")
        win_w_label.grid(row=0, column=1, padx=(10, 0))
        self.win_view_w_entry = ttk.Entry(
            win_controls_frame, textvariable=self.window_view_tile_w, width=4
        )
        self.win_view_w_entry.grid(row=0, column=2)
        win_h_label = ttk.Label(win_controls_frame, text="Height:")
        win_h_label.grid(row=0, column=3, padx=(5, 0))
        self.win_view_h_entry = ttk.Entry(
            win_controls_frame, textvariable=self.window_view_tile_h, width=4
        )
        self.win_view_h_entry.grid(row=0, column=4)
        win_apply_button = ttk.Button(
            win_controls_frame,
            text="Apply Size",
            command=self.apply_window_size_from_entries,
        )
        win_apply_button.grid(row=0, column=5, padx=5)
        self.win_view_w_entry.bind(
            "<Return>", lambda e: self.apply_window_size_from_entries()
        )
        self.win_view_h_entry.bind(
            "<Return>", lambda e: self.apply_window_size_from_entries()
        )

        # Row 2: Grid Controls
        grid_controls_frame = ttk.Frame(left_frame)
        grid_controls_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        st_grid_check = ttk.Checkbutton(
            grid_controls_frame,
            text="Show Supertile Grid (Press 'G' to Cycle Colors)",
            variable=self.show_supertile_grid,
            command=self.toggle_supertile_grid,
        )
        st_grid_check.grid(row=0, column=0, padx=5, sticky="w")

        # Row 3: Map Canvas Frame
        map_canvas_frame = ttk.LabelFrame(left_frame, text="Map")
        map_canvas_frame.grid(row=3, column=0, sticky=(tk.N, tk.S, tk.W, tk.E))

        # --- Configure Left Frame Grid Weights ---
        left_frame.grid_rowconfigure(0, weight=0)
        left_frame.grid_rowconfigure(1, weight=0)
        left_frame.grid_rowconfigure(2, weight=0)
        left_frame.grid_rowconfigure(3, weight=1)
        left_frame.grid_columnconfigure(0, weight=1)

        # --- Create Map Canvas and Scrollbars ---
        self.map_hbar = ttk.Scrollbar(map_canvas_frame, orient=tk.HORIZONTAL)
        self.map_vbar = ttk.Scrollbar(map_canvas_frame, orient=tk.VERTICAL)
        self.map_canvas = tk.Canvas(
            map_canvas_frame,
            bg="black", # Keep black background for map itself
            xscrollcommand=self.map_hbar.set,
            yscrollcommand=self.map_vbar.set,
        )
        self.map_hbar.config(command=self.map_canvas.xview)
        self.map_vbar.config(command=self.map_canvas.yview)
        self.map_canvas.grid(row=0, column=0, sticky=(tk.N, tk.S, tk.W, tk.E))
        self.map_vbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        self.map_hbar.grid(row=1, column=0, sticky=(tk.W, tk.E))

        # --- Configure Map Canvas Frame Grid Weights ---
        map_canvas_frame.grid_rowconfigure(0, weight=1)
        map_canvas_frame.grid_columnconfigure(0, weight=1)
        map_canvas_frame.grid_rowconfigure(1, weight=0) # Scrollbar
        map_canvas_frame.grid_columnconfigure(1, weight=0) # Scrollbar

        # --- Configure Right Frame Contents ---
        st_selector_frame = ttk.LabelFrame(
            right_frame, text="Supertile Palette (Click to select for map)"
        )
        st_selector_frame.grid(row=0, column=0, sticky=(tk.N, tk.S, tk.W, tk.E)) # Allow it to use available space
        right_frame.grid_rowconfigure(0, weight=1) # Allow selector frame to expand vertically
        right_frame.grid_rowconfigure(1, weight=0) # Label below
        right_frame.grid_columnconfigure(0, weight=1) # Allow selector frame to expand horizontally (though its content aims for 256px)

        # Supertile Palette Canvas Setup (Map Tab)
        # Scrollregion will be set dynamically in draw_supertile_selector
        target_selector_width_map = 256 # Matches the desired target layout width
        self.map_supertile_selector_canvas = tk.Canvas(
            st_selector_frame,
            bg="lightgrey", # Background for the selector grid
            scrollregion=(0, 0, 1, 1), # Placeholder, will be updated
            width=target_selector_width_map # Request this width
        )
        map_st_sel_hbar = ttk.Scrollbar(st_selector_frame, orient=tk.HORIZONTAL)
        map_st_sel_vbar = ttk.Scrollbar(st_selector_frame, orient=tk.VERTICAL)
        self.map_supertile_selector_canvas.config(
             xscrollcommand=map_st_sel_hbar.set,
             yscrollcommand=map_st_sel_vbar.set
        )
        map_st_sel_hbar.config(command=self.map_supertile_selector_canvas.xview)
        map_st_sel_vbar.config(command=self.map_supertile_selector_canvas.yview)

        self.map_supertile_selector_canvas.grid(
            row=0, column=0, sticky=(tk.N, tk.S, tk.W, tk.E)
        )
        map_st_sel_vbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        map_st_sel_hbar.grid(row=1, column=0, sticky=(tk.W, tk.E))

        st_selector_frame.grid_rowconfigure(0, weight=1) # Canvas takes most space
        st_selector_frame.grid_columnconfigure(0, weight=1) # Canvas takes most space
        st_selector_frame.grid_rowconfigure(1, weight=0) # Scrollbar
        st_selector_frame.grid_columnconfigure(1, weight=0) # Scrollbar

        self.map_supertile_selector_canvas.bind(
            "<Button-1>", self.handle_map_supertile_selector_click
        )
        self.map_supertile_selector_canvas.bind(
            "<B1-Motion>", self.handle_viewer_drag_motion
        )
        self.map_supertile_selector_canvas.bind(
            "<ButtonRelease-1>", self.handle_viewer_drag_release
        )

        self.map_supertile_select_label = ttk.Label(
            right_frame,
            text=f"Selected Supertile for Painting: {selected_supertile_for_map}",
        )
        self.map_supertile_select_label.grid(row=1, column=0, sticky=tk.W, pady=(5, 0))

    # --- Use this as the SINGLE definition for setting up bindings ---
    def _setup_map_canvas_bindings(self):
        """Sets up ALL event bindings for the map canvas and related root bindings.
        Includes initial unbind step for robustness.
        """
        canvas = self.map_canvas

        # --- Unbind ALL PREVIOUSLY POTENTIAL MAP CANVAS BINDINGS ---
        # ... (all unbind lines remain the same) ...
        canvas.unbind("<Button-1>")
        canvas.unbind("<B1-Motion>")
        canvas.unbind("<ButtonRelease-1>")
        canvas.unbind("<Button-3>")
        canvas.unbind("<Control-ButtonPress-1>")
        canvas.unbind("<Control-B1-Motion>")
        canvas.unbind("<Shift-ButtonPress-1>") 
        canvas.unbind("<Shift-B1-Motion>") 
        canvas.unbind("<Shift-ButtonRelease-1>") 
        canvas.unbind("<Control-MouseWheel>")
        canvas.unbind("<Control-Button-4>")
        canvas.unbind("<Control-Button-5>")
        canvas.unbind("<FocusIn>")
        canvas.unbind("<FocusOut>")
        canvas.unbind("<KeyPress-w>")
        canvas.unbind("<KeyPress-a>")
        canvas.unbind("<KeyPress-s>")
        canvas.unbind("<KeyPress-d>")
        canvas.unbind("<KeyPress-W>")
        canvas.unbind("<KeyPress-A>")
        canvas.unbind("<KeyPress-S>")
        canvas.unbind("<KeyPress-D>")
        canvas.unbind("<KeyPress-Escape>") 
        canvas.unbind("<Enter>")
        canvas.unbind("<Leave>")
        canvas.unbind("<Motion>")
        # --- End Unbind ---

        # --- Mouse Button 1 (Primary) - Checks Shift/Ctrl internally ---
        canvas.bind("<Button-1>", self.handle_map_click_or_drag_start)
        canvas.bind("<B1-Motion>", self.handle_map_drag)
        canvas.bind("<ButtonRelease-1>", self.handle_map_drag_release)

        # --- Mouse Button 3 (Right-Click for Selection) ---
        canvas.bind("<Button-3>", self.handle_map_canvas_right_click)

        # --- Panning (Ctrl + Mouse Button 1) - Checks Shift internally ---
        canvas.bind("<Control-ButtonPress-1>", self.handle_pan_start)
        canvas.bind("<Control-B1-Motion>", self.handle_pan_motion) # This will be modified

        # --- Selection (Shift + Mouse Button 1) ---
        canvas.bind("<Shift-ButtonPress-1>", self.handle_map_selection_start)
        canvas.bind("<Shift-B1-Motion>", self.handle_map_selection_motion)
        canvas.bind("<Shift-ButtonRelease-1>", self.handle_map_selection_release)

        # --- Zooming (Ctrl + Mouse Wheel) ---
        canvas.bind("<Control-MouseWheel>", self.handle_map_zoom_scroll)
        canvas.bind("<Control-Button-4>", self.handle_map_zoom_scroll)
        canvas.bind("<Control-Button-5>", self.handle_map_zoom_scroll)

        # --- Keyboard ---
        canvas.bind("<FocusIn>", lambda e: self.map_canvas.focus_set())
        canvas.bind("<FocusOut>", lambda e: self._update_map_cursor())
        canvas.bind("<KeyPress-w>", self.handle_map_keypress)
        canvas.bind("<KeyPress-a>", self.handle_map_keypress)
        canvas.bind("<KeyPress-s>", self.handle_map_keypress)
        canvas.bind("<KeyPress-d>", self.handle_map_keypress)
        canvas.bind("<KeyPress-W>", self.handle_map_keypress)
        canvas.bind("<KeyPress-A>", self.handle_map_keypress)
        canvas.bind("<KeyPress-S>", self.handle_map_keypress)
        canvas.bind("<KeyPress-D>", self.handle_map_keypress)
        canvas.bind("<KeyPress-Escape>", self.handle_map_escape)

        # --- Modifier Key State Tracking (Bound to root window) ---
        self.root.bind("<KeyPress-Control_L>", self.handle_ctrl_press, add="+")
        self.root.bind("<KeyPress-Control_R>", self.handle_ctrl_press, add="+")
        self.root.bind("<KeyRelease-Control_L>", self.handle_ctrl_release, add="+")
        self.root.bind("<KeyRelease-Control_R>", self.handle_ctrl_release, add="+")
        self.root.bind("<KeyPress-Shift_L>", self.handle_shift_press, add="+")
        self.root.bind("<KeyPress-Shift_R>", self.handle_shift_press, add="+")
        self.root.bind("<KeyRelease-Shift_L>", self.handle_shift_release, add="+")
        self.root.bind("<KeyRelease-Shift_R>", self.handle_shift_release, add="+")

        # --- Mouse Enter/Leave/Motion Canvas (for cursor updates) ---
        canvas.bind("<Enter>", self.handle_canvas_enter)
        canvas.bind("<Leave>", self.handle_canvas_leave)
        canvas.bind("<Motion>", self._update_map_cursor_and_coords)

        # --- Scrollbar Interaction (Update map canvas AND minimap) ---
        if hasattr(self, "map_hbar") and self.map_hbar:
            # For scrollbar drag (B1-Motion) and discrete clicks (ButtonRelease-1)
            self.map_hbar.bind("<B1-Motion>", self._handle_map_scroll_event)
            self.map_hbar.bind("<ButtonRelease-1>", self._handle_map_scroll_event) 
        if hasattr(self, "map_vbar") and self.map_vbar:
            self.map_vbar.bind("<B1-Motion>", self._handle_map_scroll_event)
            self.map_vbar.bind("<ButtonRelease-1>", self._handle_map_scroll_event)

    # --- Drawing Functions ---
    def update_all_displays(self, changed_level="all"):
        """Updates UI elements ONLY for the currently VISIBLE tab,
        based on the level of change indicated by changed_level.
        Also handles global updates like palette if necessary.
        """
        # Get current visible tab index (safer way)
        current_tab_index = -1
        try:
            if self.notebook and self.notebook.winfo_exists():
                selected_tab = self.notebook.select()
                if selected_tab:
                    current_tab_index = self.notebook.index(selected_tab)
        except tk.TclError:
            print("Warning: Could not get current tab index in update_all_displays.")
            return  # Avoid errors if notebook state is weird

        # --- Always handle Palette changes first, as they affect look of all tabs ---
        palette_changed = changed_level in ["all", "palette"]
        if palette_changed:
            # Update the palette editor widgets regardless of visibility
            # (They are cheap to update and data source for others)
            self.draw_current_palette()
            self.update_palette_info_labels()
            # Cache invalidation for palette changes is handled by the caller
            # (e.g., handle_rgb_apply, reset_palette...)

        # --- Update widgets ONLY for the VISIBLE tab ---

        # Palette Editor Tab (Index 0)
        if current_tab_index == 0:
            # Widgets already updated above if palette_changed is True.
            # No other data changes directly affect only this tab's display.
            pass  # print("Updating Palette Tab (Visible)")

        # Tile Editor Tab (Index 1)
        elif current_tab_index == 1:
            # Update if tile data changed OR palette changed (affects colors)
            if changed_level in ["all", "tile"] or palette_changed:
                # print(f"Updating Tile Tab (Visible), Level: {changed_level}, PaletteChanged: {palette_changed}")
                self.draw_editor_canvas()
                self.draw_attribute_editor()
                self.draw_palette()  # Uses active_msx_palette
                self.draw_tileset_viewer(
                    self.tileset_canvas, current_tile_index
                )  # Main viewer
                self.update_tile_info_label()
                # We intentionally DO NOT update self.st_tileset_canvas here.
                # It will be updated when the Supertile tab becomes visible.

        # Supertile Editor Tab (Index 2)
        elif current_tab_index == 2:
            # Update if supertile data changed, underlying tile data changed, OR palette changed
            if changed_level in ["all", "supertile", "tile"] or palette_changed:
                # print(f"Updating Supertile Tab (Visible), Level: {changed_level}, PaletteChanged: {palette_changed}")
                self.draw_supertile_definition_canvas()  # Uses tiles & palette
                self.draw_tileset_viewer(
                    self.st_tileset_canvas, selected_tile_for_supertile
                )  # Uses tiles & palette
                self.draw_supertile_selector(
                    self.supertile_selector_canvas, current_supertile_index
                )  # Uses tiles & palette
                self.update_supertile_info_labels()
                # We intentionally DO NOT update self.map_supertile_selector_canvas here.

        # Map Editor Tab (Index 3)
        elif current_tab_index == 3:
            # Update if map data changed, underlying supertile/tile data changed, OR palette changed
            if changed_level in ["all", "map", "supertile", "tile"] or palette_changed:
                # print(f"Updating Map Tab (Visible), Level: {changed_level}, PaletteChanged: {palette_changed}")
                # Map canvas redraw is complex, redraw if map changed OR dependencies changed
                self.draw_map_canvas()  # Handles overlays, uses ST/Tiles/Palette
                self.draw_supertile_selector(
                    self.map_supertile_selector_canvas, selected_supertile_for_map
                )  # Uses ST/Tiles/Palette
                self.update_map_info_labels()  # Update size/zoom/window entries
                self.draw_minimap()  # Uses Map/ST/Tiles/Palette

    # ... (draw_editor_canvas, draw_attribute_editor, draw_palette unchanged) ...
    def draw_editor_canvas(self):
        self.editor_canvas.delete("all")
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        pattern = tileset_patterns[current_tile_index]
        colors = tileset_colors[current_tile_index]
        for r in range(TILE_HEIGHT):
            try:
                fg_idx, bg_idx = colors[r]
                fg_color = self.active_msx_palette[fg_idx]
                bg_color = self.active_msx_palette[bg_idx]
            except IndexError:
                fg_color, bg_color = INVALID_TILE_COLOR, INVALID_TILE_COLOR
            for c in range(TILE_WIDTH):
                try:
                    pixel_val = pattern[r][c]
                except IndexError:
                    pixel_val = 0
                color = fg_color if pixel_val == 1 else bg_color
                x1 = c * EDITOR_PIXEL_SIZE
                y1 = r * EDITOR_PIXEL_SIZE
                x2 = x1 + EDITOR_PIXEL_SIZE
                y2 = y1 + EDITOR_PIXEL_SIZE
                self.editor_canvas.create_rectangle(
                    x1, y1, x2, y2, fill=color, outline="darkgrey", width=1
                )

    def draw_attribute_editor(self):
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        colors = tileset_colors[current_tile_index]
        for r in range(TILE_HEIGHT):
            try:
                fg_idx, bg_idx = colors[r]
                fg_color_hex = self.active_msx_palette[fg_idx]
                bg_color_hex = self.active_msx_palette[bg_idx]
            except IndexError:
                fg_color_hex, bg_color_hex = INVALID_TILE_COLOR, INVALID_TILE_COLOR
            self.attr_fg_labels[r].config(
                bg=fg_color_hex, fg=get_contrast_color(fg_color_hex)
            )
            self.attr_bg_labels[r].config(
                bg=bg_color_hex, fg=get_contrast_color(bg_color_hex)
            )

    def draw_palette(self):  # Renamed draw_palette to this for clarity
        """Draws the 16-color selector palette in the Tile Editor tab."""
        canvas = self.tile_editor_palette_canvas
        canvas.delete("all")
        size = PALETTE_SQUARE_SIZE
        padding = 2
        for i in range(16):
            row, col = divmod(i, 4)
            x1 = col * (size + padding) + padding
            y1 = row * (size + padding) + padding
            x2 = x1 + size
            y2 = y1 + size
            color = self.active_msx_palette[i]  # Use active palette
            outline_color = "red" if i == selected_color_index else "grey"
            outline_width = 2 if i == selected_color_index else 1
            canvas.create_rectangle(
                x1,
                y1,
                x2,
                y2,
                fill=color,
                outline=outline_color,
                width=outline_width,
                tags=f"pal_sel_{i}",
            )

    # --- vvv Palette Editor Drawing vvv ---
    def draw_current_palette(self):
        canvas = self.current_palette_canvas
        canvas.delete("all")
        size = CURRENT_PALETTE_SLOT_SIZE
        padding = 2
        for i in range(16):
            row, col = divmod(i, 4)
            x1 = col * (size + padding) + padding
            y1 = row * (size + padding) + padding
            x2 = x1 + size
            y2 = y1 + size
            color = self.active_msx_palette[i]
            outline_color = "red" if i == self.selected_palette_slot else "grey"
            outline_width = 3 if i == self.selected_palette_slot else 1
            canvas.create_rectangle(
                x1,
                y1,
                x2,
                y2,
                fill=color,
                outline=outline_color,
                width=outline_width,
                tags=f"pal_slot_{i}",
            )

    def draw_512_picker(self):
        canvas = self.msx2_picker_canvas
        canvas.delete("all")
        size = MSX2_PICKER_SQUARE_SIZE
        padding = 1
        cols = MSX2_PICKER_COLS
        for i in range(512):
            row, col = divmod(i, cols)
            x1 = col * (size + padding) + padding
            y1 = row * (size + padding) + padding
            x2 = x1 + size
            y2 = y1 + size
            hex_color = msx2_512_colors_hex[i]
            r, g, b = msx2_512_colors_rgb7[i]
            canvas.create_rectangle(
                x1,
                y1,
                x2,
                y2,
                fill=hex_color,
                outline="grey",
                width=1,
                tags=(f"msx2_picker_{i}", f"msx2_rgb_{r}_{g}_{b}"),
            )

    def update_palette_info_labels(self):
        slot = self.selected_palette_slot
        if 0 <= slot < 16:
            color_hex = self.active_msx_palette[slot]
            rgb7 = (-1, -1, -1)
            try:
                idx512 = msx2_512_colors_hex.index(color_hex)
                rgb7 = msx2_512_colors_rgb7[idx512]
            except ValueError:
                pass
            self.selected_slot_label.config(text=f"Slot: {slot}")
            self.selected_slot_color_label.config(bg=color_hex)
            self.selected_slot_rgb_label.config(
                text=f"RGB: {color_hex} ({rgb7[0]},{rgb7[1]},{rgb7[2]})"
            )
            self.rgb_r_var.set(str(rgb7[0]) if rgb7[0] != -1 else "?")
            self.rgb_g_var.set(str(rgb7[1]) if rgb7[1] != -1 else "?")
            self.rgb_b_var.set(str(rgb7[2]) if rgb7[2] != -1 else "?")
        else:
            self.selected_slot_label.config(text="Slot: -")
            self.selected_slot_color_label.config(bg="grey")
            self.selected_slot_rgb_label.config(text="RGB: -")
            self.rgb_r_var.set("")
            self.rgb_g_var.set("")
            self.rgb_b_var.set("")

    def draw_tileset_viewer(self, canvas, highlighted_tile_index):
        """Draws tileset viewer, highlighting selected, dragged, or unused tile."""
        # Check if drag is active and involves a tile from *any* tileset viewer
        is_dragging_tile = self.drag_active and self.drag_item_type == "tile"
        dragged_tile_index = self.drag_start_index if is_dragging_tile else -1

        try:
            canvas.delete("all")
            padding = 1
            size = VIEWER_TILE_SIZE
            max_rows = math.ceil(num_tiles_in_set / NUM_TILES_ACROSS)
            canvas_height = max(1, max_rows * (size + padding) + padding)  
            canvas_width = max(
                1, NUM_TILES_ACROSS * (size + padding) + padding
            )  
            str_scroll = f"0 0 {float(canvas_width)} {float(canvas_height)}"

            # Safely get current scroll region
            current_scroll = ""
            try:
                current_scroll_val = canvas.cget("scrollregion")
                if isinstance(current_scroll_val, tuple):
                    current_scroll = " ".join(map(str, current_scroll_val))
                else:
                    current_scroll = str(current_scroll_val)
            except tk.TclError:
                # Canvas might not be fully ready
                pass

            # Update scrollregion if needed
            if current_scroll != str_scroll:
                canvas.config(scrollregion=(0, 0, canvas_width, canvas_height))

            # Draw each tile
            for i in range(num_tiles_in_set):
                tile_r, tile_c = divmod(i, NUM_TILES_ACROSS)
                base_x = tile_c * (size + padding) + padding
                base_y = tile_r * (size + padding) + padding

                # Get cached image
                img = self.create_tile_image(i, size)
                canvas.create_image(
                    base_x,
                    base_y,
                    image=img,
                    anchor=tk.NW,
                    tags=(f"tile_img_{i}", "tile_image"),
                )

                # Determine outline style
                outline_color = "grey" 
                outline_width = 1
                if i == dragged_tile_index: # Highest priority: item being dragged
                    outline_color = "yellow" 
                    outline_width = 3
                elif i == highlighted_tile_index: # Next priority: current selection
                    outline_color = "red"
                    outline_width = 2
                elif i in self.marked_unused_tiles: # Then, check for unused highlight
                    outline_color = "blue" # Blue for unused
                    outline_width = 3 # Bold blue (width 3)

                # Draw the border rectangle
                bx1 = max(0, base_x - padding / 2)
                by1 = max(0, base_y - padding / 2)
                bx2 = base_x + size + padding / 2
                by2 = base_y + size + padding / 2
                canvas.create_rectangle(
                    bx1,
                    by1,
                    bx2,
                    by2,
                    outline=outline_color,
                    width=outline_width,
                    tags=f"tile_border_{i}",
                )

        except tk.TclError as e:
            # Catch errors if the canvas is destroyed during redraw
            print(f"TclError during draw_tileset_viewer: {e}")
        except Exception as e:
            print(f"Unexpected error during draw_tileset_viewer: {e}")

    def update_tile_info_label(self):
        self.tile_info_label.config(
            text=f"Tile: {current_tile_index}/{max(0, num_tiles_in_set-1)}"
        )

    def draw_supertile_definition_canvas(self):
        canvas = self.supertile_def_canvas
        canvas.delete("all")
        if not (0 <= current_supertile_index < num_supertiles):
            return

        definition = supertiles_data[current_supertile_index]
        
        # Ensure definition has expected structure based on current project dimensions
        # This is a safeguard. Data should ideally be consistent.
        if not definition or len(definition) != self.supertile_grid_height or \
           (self.supertile_grid_height > 0 and (len(definition[0]) != self.supertile_grid_width)):
            # print(f"Warning: Supertile {current_supertile_index} definition dimensions mismatch in draw_supertile_definition_canvas.")
            # Optionally draw an error indicator on the canvas
            canvas_w = canvas.winfo_width()
            canvas_h = canvas.winfo_height()
            canvas.create_text(canvas_w/2, canvas_h/2, text="Dim Mismatch!", fill="red", anchor="center")
            return

        # SUPERTILE_DEF_TILE_SIZE is the display size of one mini-tile (e.g., 32x32 pixels)
        mini_tile_display_size = SUPERTILE_DEF_TILE_SIZE 

        for r_def in range(self.supertile_grid_height):
            for c_def in range(self.supertile_grid_width):
                try:
                    tile_idx = definition[r_def][c_def]
                except IndexError: # Should be caught by the check above, but for safety
                    # print(f"Error drawing ST def: index out of bounds for ST {current_supertile_index} at {r_def},{c_def}")
                    tile_idx = 0 # Default to tile 0 on error

                base_x = c_def * mini_tile_display_size
                base_y = r_def * mini_tile_display_size
                
                img = self.create_tile_image(tile_idx, mini_tile_display_size)
                canvas.create_image(
                    base_x, base_y, image=img, anchor=tk.NW, tags=f"def_tile_{r_def}_{c_def}"
                )
                canvas.create_rectangle(
                    base_x, base_y, base_x + mini_tile_display_size, base_y + mini_tile_display_size, outline="grey"
                )
    
    def draw_supertile_selector(self, canvas, highlighted_supertile_index):
        is_dragging_supertile = self.drag_active and self.drag_item_type == "supertile"
        dragged_supertile_index = self.drag_start_index if is_dragging_supertile else -1

        try:
            if not canvas.winfo_exists():
                return
            canvas.delete("all")
            
            # Item (preview) pixel dimensions are now the *actual* pixel dimensions of the supertile
            item_pixel_w = self.supertile_grid_width * TILE_WIDTH
            item_pixel_h = self.supertile_grid_height * TILE_HEIGHT
            padding = 1 

            if item_pixel_w <= 0 or item_pixel_h <= 0:
                return

            target_layout_width = 256
            actual_canvas_width = canvas.winfo_width()
            if actual_canvas_width <= 1: 
                 canvas.after(50, lambda: self.draw_supertile_selector(canvas, highlighted_supertile_index))
                 return

            effective_layout_width = min(target_layout_width, actual_canvas_width)
            
            items_across = 0
            for p_o_2 in [32, 16, 8, 4, 2, 1]: # Check powers of 2
                if p_o_2 == 0: continue
                required_width_for_po2 = (p_o_2 * item_pixel_w) + ((p_o_2 + 1) * padding)
                if required_width_for_po2 <= effective_layout_width:
                    items_across = p_o_2
                    break
            
            if items_across == 0: 
                if item_pixel_w + 2 * padding <= effective_layout_width: items_across = 1
                elif item_pixel_w <= effective_layout_width: items_across = 1
                else: items_across = 1 
            items_across = max(1, items_across)

            num_logical_rows = math.ceil(num_supertiles / items_across) if items_across > 0 else 0
            scroll_content_width = (items_across * item_pixel_w) + ((items_across + 1) * padding)
            scroll_content_height = (num_logical_rows * item_pixel_h) + ((num_logical_rows + 1) * padding)
            scroll_content_width = max(1.0, float(scroll_content_width))
            scroll_content_height = max(1.0, float(scroll_content_height))

            str_scroll = f"0 0 {scroll_content_width} {scroll_content_height}"
            current_scroll_val_str = ""
            try:
                current_scroll_val = canvas.cget("scrollregion")
                current_scroll_val_str = " ".join(map(str, current_scroll_val)) if isinstance(current_scroll_val, tuple) else str(current_scroll_val)
            except tk.TclError: pass

            if current_scroll_val_str != str_scroll :
                try:
                    canvas.config(scrollregion=(0, 0, scroll_content_width, scroll_content_height))
                except tk.TclError: return

            view_y1 = canvas.canvasy(0)
            view_y2 = canvas.canvasy(canvas.winfo_height())
            start_draw_row = max(0, int(view_y1 // (item_pixel_h + padding)))
            end_draw_row = min(num_logical_rows, int(math.ceil(view_y2 / (item_pixel_h + padding))))

            for r_grid in range(start_draw_row, end_draw_row):
                for c_grid in range(items_across):
                    st_idx = r_grid * items_across + c_grid
                    if st_idx >= num_supertiles: break

                    base_x = (c_grid * (item_pixel_w + padding)) + padding
                    base_y = (r_grid * (item_pixel_h + padding)) + padding

                    # Call create_supertile_image with actual target width and height
                    img = self.create_supertile_image(st_idx, item_pixel_w, item_pixel_h) 
                    
                    if not canvas.winfo_exists(): return
                    canvas.create_image(
                        base_x, base_y, image=img, anchor=tk.NW, tags=(f"st_img_{st_idx}", "st_image")
                    )

                    outline_color = "grey"
                    outline_width = 1
                    if st_idx == dragged_supertile_index: outline_color = "yellow"; outline_width = 3
                    elif st_idx == highlighted_supertile_index: outline_color = "red"; outline_width = 2
                    elif st_idx in self.marked_unused_supertiles: outline_color = "blue"; outline_width = 3
                    
                    bx1 = base_x - (padding / 2 if padding > 0 else 0.5) 
                    by1 = base_y - (padding / 2 if padding > 0 else 0.5)
                    bx2 = base_x + item_pixel_w + (padding / 2 if padding > 0 else 0.5) # Use item_pixel_w for border
                    by2 = base_y + item_pixel_h + (padding / 2 if padding > 0 else 0.5) # Use item_pixel_h for border
                    
                    if not canvas.winfo_exists(): return
                    canvas.create_rectangle(
                        bx1, by1, bx2, by2, outline=outline_color, width=outline_width, tags=f"st_border_{st_idx}"
                    )
                if st_idx >= num_supertiles -1 : break
        except tk.TclError: pass
        except Exception as e: print(f"Unexpected error during draw_supertile_selector: {e}")

    def update_supertile_info_labels(self):
        self.supertile_def_info_label.config(
            text=f"Editing Supertile: {current_supertile_index}/{max(0, num_supertiles-1)}"
        )
        self.supertile_tile_select_label.config(
            text=f"Selected Tile for Placing: {selected_tile_for_supertile}"
        )
        self.supertile_sel_info_label.config(text=f"Supertiles: {num_supertiles}")

    def draw_map_canvas(self):
        canvas = self.map_canvas
        if not canvas.winfo_exists():
            return
        canvas.delete("all")

        # --- 1. Calculate Sizes ---
        zoomed_tile_size = self.get_zoomed_tile_size() 
        if zoomed_tile_size <= 0: return

        # Supertile dimensions in current zoom (pixels)
        # Uses self.supertile_grid_width/height from project settings
        zoomed_supertile_pixel_width, zoomed_supertile_pixel_height = self._get_zoomed_supertile_pixel_dims()
        if zoomed_supertile_pixel_width <= 0 or zoomed_supertile_pixel_height <= 0: return

        # --- 2. Update Scroll Region ---
        map_pixel_width_total = map_width * zoomed_supertile_pixel_width
        map_pixel_height_total = map_height * zoomed_supertile_pixel_height
        
        safe_scroll_width = max(1.0, float(map_pixel_width_total))
        safe_scroll_height = max(1.0, float(map_pixel_height_total))
        str_scroll = f"0 0 {safe_scroll_width} {safe_scroll_height}"
        current_scroll = ""
        try:
            current_scroll_val = canvas.cget("scrollregion")
            if isinstance(current_scroll_val, tuple):
                current_scroll = " ".join(map(str, current_scroll_val))
            else:
                current_scroll = str(current_scroll_val)
        except tk.TclError: pass

        if current_scroll != str_scroll:
            try:
                canvas.config(scrollregion=(0, 0, safe_scroll_width, safe_scroll_height))
            except tk.TclError: pass
        
        # --- 3. Draw Supertile Images ---
        # Determine visible supertile range for optimized drawing
        view_x1_map_draw = canvas.canvasx(0)
        view_y1_map_draw = canvas.canvasy(0)
        view_x2_map_draw = canvas.canvasx(canvas.winfo_width())
        view_y2_map_draw = canvas.canvasy(canvas.winfo_height())

        start_col_map_draw = max(0, int(view_x1_map_draw // zoomed_supertile_pixel_width))
        start_row_map_draw = max(0, int(view_y1_map_draw // zoomed_supertile_pixel_height))
        end_col_map_draw = min(map_width, int(math.ceil(view_x2_map_draw / zoomed_supertile_pixel_width)))
        end_row_map_draw = min(map_height, int(math.ceil(view_y2_map_draw / zoomed_supertile_pixel_height)))


        for r_map in range(start_row_map_draw, end_row_map_draw):
            for c_map in range(start_col_map_draw, end_col_map_draw):
                try:
                    supertile_idx = map_data[r_map][c_map]
                    base_x = c_map * zoomed_supertile_pixel_width
                    base_y = r_map * zoomed_supertile_pixel_height
                    
                    img = self.create_map_render_of_supertile(
                        supertile_idx, int(zoomed_supertile_pixel_width), int(zoomed_supertile_pixel_height)
                    )
                    
                    item_id = canvas.create_image(
                        base_x, base_y, image=img, anchor=tk.NW, tags=("map_supertile_image", f"map_cell_{r_map}_{c_map}")
                    )
                except IndexError:
                    pass
                except Exception as e:
                    pass

        # --- 4. Draw Supertile Grid (if enabled) ---
        if self.show_supertile_grid.get():
            grid_color = GRID_COLOR_CYCLE[self.grid_color_index]
            
            # Vertical lines: Iterate through columns that *could* have a line
            # Draw lines from 0 to map_pixel_height_total (map content boundary)
            # Tkinter canvas will clip lines that are partially or fully outside the visible area.
            for c_grid in range(map_width + 1): # Iterate all possible lines for the map width
                x_line = c_grid * zoomed_supertile_pixel_width
                # Only draw if the line itself is within the current view for minor optimization
                if x_line >= view_x1_map_draw and x_line <= view_x2_map_draw:
                     canvas.create_line(x_line, 0, x_line, map_pixel_height_total, 
                                        fill=grid_color, dash=GRID_DASH_PATTERN, tags="supertile_grid")
                # Optimization: if x_line is already past the view, no need to check further c_grid for this specific view
                # However, this optimization is complex if scroll changes rapidly. Simpler to let Tkinter clip.
                # For small maps smaller than canvas, the loop range itself (map_width+1) limits lines.

            # Horizontal lines: Iterate through rows that *could* have a line
            # Draw lines from 0 to map_pixel_width_total (map content boundary)
            for r_grid in range(map_height + 1): # Iterate all possible lines for the map height
                y_line = r_grid * zoomed_supertile_pixel_height
                if y_line >= view_y1_map_draw and y_line <= view_y2_map_draw:
                    canvas.create_line(0, y_line, map_pixel_width_total, y_line,
                                       fill=grid_color, dash=GRID_DASH_PATTERN, tags="supertile_grid")

        # --- 5. Draw FINAL Selection Rectangle ---
        self._draw_selection_rectangle()

        # --- 6. Draw Window View Overlay (if enabled) ---
        if self.show_window_view.get():
            grid_color_win = GRID_COLOR_CYCLE[self.grid_color_index] 
            win_tx = self.window_view_tile_x 
            win_ty = self.window_view_tile_y
            win_tw = self.window_view_tile_w.get() 
            win_th = self.window_view_tile_h.get() 

            win_px_start = win_tx * zoomed_tile_size
            win_py_start = win_ty * zoomed_tile_size
            win_pixel_width_total = win_tw * zoomed_tile_size
            win_pixel_height_total = win_th * zoomed_tile_size

            canvas.create_rectangle(win_px_start, win_py_start, 
                                    win_px_start + win_pixel_width_total, 
                                    win_py_start + win_pixel_height_total, 
                                    outline=grid_color_win, width=2, tags=("window_view_rect", "window_view_item"))
            
            if win_th == MAX_WIN_VIEW_HEIGHT_TILES: 
                half_tile_h_px_zoomed = zoomed_tile_size / 2
                dark_y1 = win_py_start + win_pixel_height_total - half_tile_h_px_zoomed
                dark_y2 = win_py_start + win_pixel_height_total
                canvas.create_rectangle(win_px_start, dark_y1, 
                                        win_px_start + win_pixel_width_total, dark_y2, 
                                        fill="gray50", stipple="gray50", outline="", tags=("window_view_overscan", "window_view_item"))
            
            handle_size = WIN_VIEW_HANDLE_SIZE
            hs2 = handle_size // 2
            handle_fill = grid_color_win
            handle_outline = "black" if grid_color_win != "#000000" else "white"
            handles_coords = { 
                "nw": (win_px_start, win_py_start), 
                "n": (win_px_start + win_pixel_width_total / 2, win_py_start), 
                "ne": (win_px_start + win_pixel_width_total, win_py_start),
                "w": (win_px_start, win_py_start + win_pixel_height_total / 2),
                "e": (win_px_start + win_pixel_width_total, win_py_start + win_pixel_height_total / 2),
                "sw": (win_px_start, win_py_start + win_pixel_height_total), 
                "s": (win_px_start + win_pixel_width_total / 2, win_py_start + win_pixel_height_total), 
                "se": (win_px_start + win_pixel_width_total, win_py_start + win_pixel_height_total),
            }
            for tag_handle, (cx_handle, cy_handle) in handles_coords.items():
                x1h, y1h, x2h, y2h = cx_handle - hs2, cy_handle - hs2, cx_handle + hs2, cy_handle + hs2
                canvas.create_rectangle(x1h, y1h, x2h, y2h, fill=handle_fill, outline=handle_outline, width=1, tags=("window_view_handle", f"handle_{tag_handle}", "window_view_item"))

        # --- 7. Draw Paste Preview Rectangle ---
        self._clear_paste_preview_rect() 
        if self.map_clipboard_data:
            is_map_tab_active = False
            if self.notebook and self.notebook.winfo_exists():
                try:
                    if self.notebook.index(self.notebook.select()) == 3: # Map editor index
                        is_map_tab_active = True
                except tk.TclError: pass

            if is_map_tab_active:
                try:
                    pointer_x_widget = canvas.winfo_pointerx() - canvas.winfo_rootx()
                    pointer_y_widget = canvas.winfo_pointery() - canvas.winfo_rooty()
                    if (0 <= pointer_x_widget < canvas.winfo_width() and
                        0 <= pointer_y_widget < canvas.winfo_height()):
                        canvas_x_content = canvas.canvasx(pointer_x_widget)
                        canvas_y_content = canvas.canvasy(pointer_y_widget)
                        self._draw_paste_preview_rect(canvas_coords=(canvas_x_content, canvas_y_content))
                except Exception: pass 

        # --- 8. Update Zoom Label ---
        if hasattr(self, 'map_zoom_label') and self.map_zoom_label.winfo_exists():
            self.map_zoom_label.config(text=f"{int(self.map_zoom_level * 100)}%")

    def update_map_info_labels(self):
        self.map_size_label.config(text=f"{map_width} x {map_height}")
        self.map_supertile_select_label.config(
            text=f"Selected Supertile for Painting: {selected_supertile_for_map}"
        )
        # Update window size entries from state variables
        self.window_view_tile_w.set(
            self.window_view_tile_w.get()
        )  # Ensure IntVar reflects internal state if needed
        self.window_view_tile_h.set(self.window_view_tile_h.get())
        # Zoom label updated in draw_map_canvas

    def on_tab_change(self, event):
        self._clear_marked_unused(trigger_redraw=False)

        current_tab_index = -1
        new_tab_index = -1
        try:
            if self.notebook and self.notebook.winfo_exists():
                selected_tab_name = self.notebook.select()
                if selected_tab_name:
                    new_tab_index = self.notebook.index(selected_tab_name)
        except tk.TclError:
            pass

        if self.map_paste_preview_rect_id:
            self._clear_paste_preview_rect()

        self.update_all_displays(changed_level="all")
        self._update_edit_menu_state()
        self._update_editor_button_states()
        self._update_supertile_rotate_button_state() # Update rotate button based on current ST dims

        try:
            self.root.unbind("<KeyPress-g>")
            self.root.unbind("<KeyPress-G>")
        except tk.TclError:
            pass

        if new_tab_index == 3:  # Map Editor Tab
            self.root.bind("<KeyPress-g>", self.handle_map_tab_keypress, add="+")
            self.root.bind("<KeyPress-G>", self.handle_map_tab_keypress, add="+")
            if hasattr(self, 'map_canvas') and self.map_canvas.winfo_exists():
                self.root.after(50, self.map_canvas.focus_set)

            if self.map_clipboard_data:
                try:
                    if hasattr(self, 'map_canvas') and self.map_canvas.winfo_exists():
                        pointer_x = self.map_canvas.winfo_pointerx() - self.map_canvas.winfo_rootx()
                        pointer_y = self.map_canvas.winfo_pointery() - self.map_canvas.winfo_rooty()
                        if (0 <= pointer_x < self.map_canvas.winfo_width() and
                            0 <= pointer_y < self.map_canvas.winfo_height()):
                             canvas_x = self.map_canvas.canvasx(pointer_x)
                             canvas_y = self.map_canvas.canvasy(pointer_y)
                             self._draw_paste_preview_rect(canvas_coords=(canvas_x, canvas_y))
                except Exception:
                     pass

    # --- Palette Editor Handlers ---
    def handle_current_palette_click(self, event):
        canvas = self.current_palette_canvas
        size = CURRENT_PALETTE_SLOT_SIZE
        padding = 2
        col = event.x // (size + padding)
        row = event.y // (size + padding)
        clicked_slot = row * 4 + col
        if 0 <= clicked_slot < 16:
            if self.selected_palette_slot != clicked_slot:
                self.selected_palette_slot = clicked_slot
                self.draw_current_palette()  # Redraw highlight
                self.update_palette_info_labels()  # Update info display

    def handle_512_picker_click(self, event):
        if not (0 <= self.selected_palette_slot < 16):
            return
        canvas = self.msx2_picker_canvas
        size = MSX2_PICKER_SQUARE_SIZE
        padding = 1
        cols = MSX2_PICKER_COLS
        canvas_x = canvas.canvasx(event.x)
        canvas_y = canvas.canvasy(event.y)
        col = int(canvas_x // (size + padding))
        row = int(canvas_y // (size + padding))
        clicked_index = row * cols + col
        
        if 0 <= clicked_index < 512:
            new_color_hex = msx2_512_colors_hex[clicked_index]
            target_slot = self.selected_palette_slot
            if self.active_msx_palette[target_slot] != new_color_hex:
                if self._clear_marked_unused(trigger_redraw=False):
                    pass
                
                self._mark_project_modified()
                self.active_msx_palette[target_slot] = new_color_hex
                print(f"Set Palette Slot {target_slot} to {new_color_hex}")
                self.clear_all_caches()
                self.update_all_displays(changed_level="all")
        else:
            print("Clicked outside valid color range in picker.")

    def handle_rgb_apply(self):
        if not (0 <= self.selected_palette_slot < 16):
            return
        try:
            r_val = int(self.rgb_r_var.get()) # Renamed r
            g_val = int(self.rgb_g_var.get()) # Renamed g
            b_val = int(self.rgb_b_var.get()) # Renamed b
            if not (0 <= r_val <= 7 and 0 <= g_val <= 7 and 0 <= b_val <= 7):
                raise ValueError("RGB values must be 0-7.")
            
            new_color_hex = self._rgb7_to_hex(r_val, g_val, b_val)
            target_slot = self.selected_palette_slot
            
            if self.active_msx_palette[target_slot] != new_color_hex:
                if self._clear_marked_unused(trigger_redraw=False): # Clear before palette change
                    pass # Full redraw will happen anyway
                
                self._mark_project_modified()
                self.active_msx_palette[target_slot] = new_color_hex
                print(f"Set Palette Slot {target_slot} to {new_color_hex} via RGB")
                self.clear_all_caches()
                self.update_all_displays(changed_level="all") # "all" because palette affects everything
        except ValueError as e:
            messagebox.showerror("Invalid RGB", f"Invalid RGB input: {e}")

    def reset_palette_to_default(self):
        confirm = messagebox.askokcancel(
            "Reset Palette",
            "Reset the active palette to the MSX2 default colors?\nThis will affect the appearance of all tiles and supertiles.",
        )
        if confirm:
            new_default_palette = []
            for r_val, g_val, b_val in MSX2_RGB7_VALUES: # Renamed r,g,b
                new_default_palette.append(self._rgb7_to_hex(r_val, g_val, b_val))
            
            if self.active_msx_palette != new_default_palette:
                if self._clear_marked_unused(trigger_redraw=False):
                    pass

                self._mark_project_modified()
                self.active_msx_palette = new_default_palette
                self.selected_palette_slot = 0
                global selected_color_index
                selected_color_index = 0 # Or WHITE_IDX depending on desired default
                self.clear_all_caches()
                self.update_all_displays(changed_level="all")
                print("Palette reset to MSX2 defaults.")
            else:
                print("Palette is already set to MSX2 defaults.")

    # --- Tile Editor Handlers ---
    def handle_editor_click(self, event):
        global last_drawn_pixel, current_tile_index, tileset_patterns
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        
        # --- Clear marked unused if an actual drawing action occurs ---
        c = event.x // EDITOR_PIXEL_SIZE
        r = event.y // EDITOR_PIXEL_SIZE
        if 0 <= r < TILE_HEIGHT and 0 <= c < TILE_WIDTH:
            pixel_value_to_set = 1 if event.num == 1 else 0 # Determine based on left/right click
            if tileset_patterns[current_tile_index][r][c] != pixel_value_to_set:
                # Call _clear_marked_unused only if a change is about to be made
                if self._clear_marked_unused(trigger_redraw=False): # Clear state first
                    self.update_all_displays(changed_level="all") # Redraw if marks were cleared
                
                self._mark_project_modified()
                tileset_patterns[current_tile_index][r][c] = pixel_value_to_set
                self.invalidate_tile_cache(current_tile_index)
                # update_all_displays will be called again if marks were cleared,
                # otherwise, a more targeted update is fine.
                if not (self.marked_unused_tiles or self.marked_unused_supertiles): # if no marks were cleared
                    self.update_all_displays(changed_level="tile")
            last_drawn_pixel = (r, c)

    def handle_editor_drag(self, event):
        global last_drawn_pixel, current_tile_index, tileset_patterns
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        
        c = event.x // EDITOR_PIXEL_SIZE
        r = event.y // EDITOR_PIXEL_SIZE
        if 0 <= r < TILE_HEIGHT and 0 <= c < TILE_WIDTH:
            if (r, c) != last_drawn_pixel:
                pixel_value_to_set = (
                    1 if event.state & 0x100 else (0 if event.state & 0x400 else -1)
                ) # Determine based on button state during drag
                if (
                    pixel_value_to_set != -1
                    and tileset_patterns[current_tile_index][r][c] != pixel_value_to_set
                ):
                    # Call _clear_marked_unused only if a change is about to be made
                    if self._clear_marked_unused(trigger_redraw=False): # Clear state first
                        self.update_all_displays(changed_level="all") # Redraw if marks were cleared

                    self._mark_project_modified()
                    tileset_patterns[current_tile_index][r][c] = pixel_value_to_set
                    self.invalidate_tile_cache(current_tile_index)
                    if not (self.marked_unused_tiles or self.marked_unused_supertiles):
                        self.update_all_displays(changed_level="tile")
                last_drawn_pixel = (r, c)

    def handle_tile_editor_palette_click(self, event):
        global selected_color_index
        canvas = self.tile_editor_palette_canvas
        size = PALETTE_SQUARE_SIZE
        padding = 2
        col = event.x // (size + padding)
        row = event.y // (size + padding)
        clicked_index = row * 4 + col
        if 0 <= clicked_index < 16:
            if selected_color_index != clicked_index:
                selected_color_index = clicked_index
                self.draw_palette()  # Redraw this palette only

    def set_row_color(self, row, fg_or_bg):
        global tileset_colors, current_tile_index, selected_color_index
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        if not (0 <= selected_color_index < 16):
            return
        if 0 <= row < TILE_HEIGHT:
            current_fg_idx, current_bg_idx = tileset_colors[current_tile_index][row]
            changed = False
            if fg_or_bg == "fg" and current_fg_idx != selected_color_index:
                if self._clear_marked_unused(trigger_redraw=False): # Clear state first
                    self.update_all_displays(changed_level="all") # Redraw if marks were cleared
                tileset_colors[current_tile_index][row] = (
                    selected_color_index,
                    current_bg_idx,
                )
                changed = True
            elif fg_or_bg == "bg" and current_bg_idx != selected_color_index:
                if self._clear_marked_unused(trigger_redraw=False): # Clear state first
                    self.update_all_displays(changed_level="all") # Redraw if marks were cleared
                tileset_colors[current_tile_index][row] = (
                    current_fg_idx,
                    selected_color_index,
                )
                changed = True
            
            if changed:
                self._mark_project_modified()
                self.invalidate_tile_cache(current_tile_index)
                if not (self.marked_unused_tiles or self.marked_unused_supertiles):
                    self.update_all_displays(changed_level="tile")

    def handle_tileset_click(self, event):
        canvas = event.widget
        clicked_index = self._get_index_from_canvas_coords(
            canvas, event.x, event.y, "tile"
        )

        self.drag_active = False 
        self.drag_item_type = None
        self.drag_start_index = -1
        self.drag_press_x = 0 
        self.drag_press_y = 0
        self.drag_canvas = None
        if self.drag_indicator_id:
            try:
                event.widget.delete(self.drag_indicator_id) # Use current canvas
            except tk.TclError:
                pass
            self.drag_indicator_id = None
        try:
            if canvas.winfo_exists(): canvas.config(cursor="")
        except tk.TclError: pass

        if 0 <= clicked_index < num_tiles_in_set:
            self.drag_item_type = "tile"
            self.drag_start_index = clicked_index
            self.drag_press_x = event.x 
            self.drag_press_y = event.y 
            self.drag_canvas = canvas
            # self.drag_active is NOT set to True here

    def flip_tile_horizontal(self):
        global tileset_patterns, current_tile_index, num_tiles_in_set
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        
        # Clear marks if any, and redraw if marks were present
        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all") 

        current_pattern = tileset_patterns[current_tile_index]
        new_pattern = [[0] * TILE_WIDTH for _ in range(TILE_HEIGHT)]
        for r in range(TILE_HEIGHT):
            new_pattern[r] = current_pattern[r][::-1]
        tileset_patterns[current_tile_index] = new_pattern
        
        self.invalidate_tile_cache(current_tile_index)
        # If marks were not cleared above, do a targeted update
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="tile")
        self._mark_project_modified()
        print(f"Tile {current_tile_index} flipped horizontally.")

    def flip_tile_vertical(self):
        global tileset_patterns, tileset_colors, current_tile_index, num_tiles_in_set
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        
        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        tileset_patterns[current_tile_index].reverse()
        tileset_colors[current_tile_index].reverse()
        
        self.invalidate_tile_cache(current_tile_index)
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="tile")
        self._mark_project_modified()
        print(f"Tile {current_tile_index} flipped vertically.")

    def rotate_tile_90cw(self):
        global tileset_patterns, tileset_colors, current_tile_index, num_tiles_in_set, WHITE_IDX, BLACK_IDX
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        
        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        current_pattern = tileset_patterns[current_tile_index]
        new_pattern = [[0 for _ in range(TILE_WIDTH)] for _ in range(TILE_HEIGHT)]
        for r in range(TILE_HEIGHT):
            for c in range(TILE_WIDTH):
                new_pattern[c][(TILE_HEIGHT - 1) - r] = current_pattern[r][c]
        tileset_patterns[current_tile_index] = new_pattern
        tileset_colors[current_tile_index] = [
            (WHITE_IDX, BLACK_IDX) for _ in range(TILE_HEIGHT)
        ]  
        
        self._mark_project_modified()
        messagebox.showinfo(
            "Rotation Complete", "Tile rotated.\nRow colors have been reset to default."
        )
        self.invalidate_tile_cache(current_tile_index)
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="tile")
        print(f"Tile {current_tile_index} rotated 90 CW (colors reset).")

    def shift_tile_up(self):
        global tileset_patterns, tileset_colors, current_tile_index, num_tiles_in_set
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        
        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        current_pattern = tileset_patterns[current_tile_index]
        current_colors = tileset_colors[current_tile_index]
        first_pattern_row = current_pattern[0]
        first_color_row = current_colors[0]
        for i in range(TILE_HEIGHT - 1):
            current_pattern[i] = current_pattern[i + 1]
            current_colors[i] = current_colors[i + 1]
        current_pattern[TILE_HEIGHT - 1] = first_pattern_row
        current_colors[TILE_HEIGHT - 1] = first_color_row
        
        self.invalidate_tile_cache(current_tile_index)
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="tile")
        self._mark_project_modified()
        print(f"Tile {current_tile_index} shifted up.")

    def shift_tile_down(self):
        global tileset_patterns, tileset_colors, current_tile_index, num_tiles_in_set
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        
        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        current_pattern = tileset_patterns[current_tile_index]
        current_colors = tileset_colors[current_tile_index]
        last_pattern_row = current_pattern[TILE_HEIGHT - 1]
        last_color_row = current_colors[TILE_HEIGHT - 1]
        for i in range(TILE_HEIGHT - 1, 0, -1):
            current_pattern[i] = current_pattern[i - 1]
            current_colors[i] = current_colors[i - 1]
        current_pattern[0] = last_pattern_row
        current_colors[0] = last_color_row
        
        self.invalidate_tile_cache(current_tile_index)
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="tile")
        self._mark_project_modified()
        print(f"Tile {current_tile_index} shifted down.")

    def shift_tile_left(self):
        global tileset_patterns, current_tile_index, num_tiles_in_set
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        
        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        current_pattern = tileset_patterns[current_tile_index]
        for r_idx in range(TILE_HEIGHT): # Renamed r to r_idx to avoid conflict
            row_data = current_pattern[r_idx]
            first_pixel = 0 # Default if TILE_WIDTH is 0
            if TILE_WIDTH > 0:
                first_pixel = row_data[0]
            for c in range(TILE_WIDTH - 1):
                row_data[c] = row_data[c + 1]
            if TILE_WIDTH > 0: # Ensure assignment only if width > 0
                row_data[TILE_WIDTH - 1] = first_pixel
        
        self.invalidate_tile_cache(current_tile_index)
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="tile")
        self._mark_project_modified()
        print(f"Tile {current_tile_index} shifted left.")

    def shift_tile_right(self):
        global tileset_patterns, current_tile_index, num_tiles_in_set
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        
        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        current_pattern = tileset_patterns[current_tile_index]
        for r_idx in range(TILE_HEIGHT): # Renamed r to r_idx
            row_data = current_pattern[r_idx]
            last_pixel = 0 # Default if TILE_WIDTH is 0
            if TILE_WIDTH > 0:
                last_pixel = row_data[TILE_WIDTH - 1]
            for c in range(TILE_WIDTH - 1, 0, -1):
                row_data[c] = row_data[c - 1]
            if TILE_WIDTH > 0: # Ensure assignment only if width > 0
                row_data[0] = last_pixel
        
        self.invalidate_tile_cache(current_tile_index)
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="tile")
        self._mark_project_modified()
        print(f"Tile {current_tile_index} shifted right.")

    # --- Supertile Editor Handlers ---
    def handle_st_tileset_click(self, event):
        canvas = event.widget
        clicked_index = self._get_index_from_canvas_coords(
            canvas, event.x, event.y, "tile"
        )

        self.drag_active = False
        self.drag_item_type = None
        self.drag_start_index = -1
        self.drag_press_x = 0
        self.drag_press_y = 0
        self.drag_canvas = None
        if self.drag_indicator_id:
            try:
                event.widget.delete(self.drag_indicator_id)
            except tk.TclError:
                pass
            self.drag_indicator_id = None
        try:
            if canvas.winfo_exists(): canvas.config(cursor="")
        except tk.TclError: pass

        if 0 <= clicked_index < num_tiles_in_set:
            self.drag_item_type = "tile"
            self.drag_start_index = clicked_index
            self.drag_press_x = event.x
            self.drag_press_y = event.y
            self.drag_canvas = canvas
            # self.drag_active is NOT set to True here

    def handle_supertile_def_click(self, event):
        if not (0 <= selected_tile_for_supertile < num_tiles_in_set):
            messagebox.showwarning("Place Tile", "Please select a valid tile first.")
            return

        canvas = self.supertile_def_canvas
        # SUPERTILE_DEF_TILE_SIZE is the display size of one mini-tile in the editor
        mini_tile_display_size = SUPERTILE_DEF_TILE_SIZE 
        if mini_tile_display_size <= 0 or not canvas.winfo_exists():
            return

        # Calculate col and row in the definition grid based on pixel size of mini-tiles
        col = event.x // mini_tile_display_size
        row = event.y // mini_tile_display_size

        # Reset drag state
        self.last_placed_supertile_cell = None

        # _place_tile_in_supertile will use self.supertile_grid_width/height for its internal bounds check
        placed = self._place_tile_in_supertile(row, col)

        if placed:
            self.last_placed_supertile_cell = (row, col)

    def handle_supertile_selector_click(self, event):
        canvas = event.widget
        clicked_index = self._get_index_from_canvas_coords(
            canvas, event.x, event.y, "supertile"
        )

        self.drag_active = False
        self.drag_item_type = None
        self.drag_start_index = -1
        self.drag_press_x = 0
        self.drag_press_y = 0
        self.drag_canvas = None
        if self.drag_indicator_id:
            try:
                event.widget.delete(self.drag_indicator_id)
            except tk.TclError:
                pass
            self.drag_indicator_id = None
        try:
            if canvas.winfo_exists(): canvas.config(cursor="")
        except tk.TclError: pass

        if 0 <= clicked_index < num_supertiles:
            self.drag_item_type = "supertile"
            self.drag_start_index = clicked_index
            self.drag_press_x = event.x
            self.drag_press_y = event.y
            self.drag_canvas = canvas
            # self.drag_active is NOT set to True here

    # --- Map Editor Handlers ---
    def handle_map_supertile_selector_click(self, event):
        canvas = event.widget
        clicked_index = self._get_index_from_canvas_coords(
            canvas, event.x, event.y, "supertile"
        )

        self.drag_active = False
        self.drag_item_type = None
        self.drag_start_index = -1
        self.drag_press_x = 0
        self.drag_press_y = 0
        self.drag_canvas = None
        if self.drag_indicator_id:
            try:
                event.widget.delete(self.drag_indicator_id)
            except tk.TclError:
                pass
            self.drag_indicator_id = None
        try:
            if canvas.winfo_exists(): canvas.config(cursor="")
        except tk.TclError: pass

        if 0 <= clicked_index < num_supertiles:
            self.drag_item_type = "supertile"
            self.drag_start_index = clicked_index
            self.drag_press_x = event.x
            self.drag_press_y = event.y
            self.drag_canvas = canvas
            # self.drag_active is NOT set to True here

    def _paint_map_cell(self, canvas_x, canvas_y):
        global map_data, last_painted_map_cell, selected_supertile_for_map

        canvas = self.map_canvas
        
        # Get zoomed supertile pixel dimensions
        zoomed_st_w, zoomed_st_h = self._get_zoomed_supertile_pixel_dims()
        if zoomed_st_w <= 0 or zoomed_st_h <= 0:
            return

        # Calculate supertile column and row on the map
        c_map = int(canvas_x // zoomed_st_w)
        r_map = int(canvas_y // zoomed_st_h)

        if not (0 <= r_map < map_height and 0 <= c_map < map_width):
            return

        current_cell_id = (r_map, c_map)
        try:
            current_data_val = map_data[r_map][c_map]
        except IndexError:
            # print(f"  ERROR: IndexError accessing map_data[{r_map}][{c_map}]. Map size: {map_width}x{map_height}")
            return

        if current_cell_id != last_painted_map_cell:
            if current_data_val != selected_supertile_for_map:
                if self._clear_marked_unused(trigger_redraw=False):
                    self.update_all_displays(changed_level="all")

                self._mark_project_modified()
                map_data[r_map][c_map] = selected_supertile_for_map
                self.invalidate_minimap_background_cache()

                base_x_draw = c_map * zoomed_st_w
                base_y_draw = r_map * zoomed_st_h
                
                # Use the new rendering function for map display
                img = self.create_map_render_of_supertile(
                    selected_supertile_for_map, int(zoomed_st_w), int(zoomed_st_h)
                )
                tag_cell = f"map_cell_{r_map}_{c_map}"

                items_found = canvas.find_withtag(tag_cell)
                if items_found:
                    canvas.itemconfig(items_found[0], image=img)
                else:
                    # This branch might not be strictly necessary if draw_map_canvas always pre-populates images
                    # but good for robustness if an image was somehow missed.
                    canvas.create_image(
                        base_x_draw,
                        base_y_draw,
                        image=img,
                        anchor=tk.NW,
                        tags=(tag_cell, "map_supertile_image"),
                    )
                    # Ensure new image is below grid if grid is visible
                    if self.show_supertile_grid.get():
                        if canvas.find_withtag("supertile_grid"):
                            canvas.tag_lower(tag_cell, "supertile_grid")
                
                self.draw_minimap()

            last_painted_map_cell = current_cell_id

    # --- Map Grid/Window Event Handlers ---
    def toggle_supertile_grid(self):
        """Callback for the supertile grid checkbutton."""
        self.draw_map_canvas()  # Redraw map to show/hide grid

    def toggle_window_view(self):
        """Callback for the window view checkbutton."""
        self.draw_map_canvas()
        self.root.update_idletasks()
        self.draw_minimap()

    def cycle_grid_color(self):
        """Cycles through the available grid colors."""
        self.grid_color_index = (self.grid_color_index + 1) % len(GRID_COLOR_CYCLE)
        # Redraw map if grids are visible
        if self.show_supertile_grid.get() or self.show_window_view.get():
            self.draw_map_canvas()
        print(f"Grid color set to: {GRID_COLOR_CYCLE[self.grid_color_index]}")

    def apply_window_size_from_entries(self):
        """Applies the W/H values from the Entry widgets."""
        try:
            new_w = self.window_view_tile_w.get()  # Get value from IntVar
            new_h = self.window_view_tile_h.get()

            # Validate range
            min_w, max_w = 1, 32
            min_h, max_h = 1, MAX_WIN_VIEW_HEIGHT_TILES  # Use constant
            if not (min_w <= new_w <= max_w and min_h <= new_h <= max_h):
                messagebox.showerror(
                    "Invalid Size",
                    f"Window width must be {min_w}-{max_w}, height {min_h}-{max_h}.",
                )
                # Reset entries to current state if invalid
                self.update_window_size_entries()
                return

            # If size changed, redraw the map
            # (IntVar should already hold the value, no need to set self.window_view_tile_w/h directly)
            self.draw_map_canvas()
            print(f"Window view size set to {new_w}x{new_h} tiles via input.")

        except tk.TclError:
            messagebox.showerror(
                "Invalid Input",
                "Please enter valid integer numbers for width and height.",
            )
            self.update_window_size_entries()  # Reset on error
        except Exception as e:
            messagebox.showerror("Error", f"Could not apply size: {e}")
            self.update_window_size_entries()

    def update_window_size_entries(self):
        """Updates the W/H entry boxes to match the current state."""
        # This ensures IntVars linked to entries have the correct value
        self.window_view_tile_w.set(self.window_view_tile_w.get())
        self.window_view_tile_h.set(self.window_view_tile_h.get())

    def _do_window_move_drag(self, current_canvas_x, current_canvas_y):
        zoomed_tile_size = self.get_zoomed_tile_size() # Base tile (8x8 MSX) zoomed size
        if zoomed_tile_size <= 0:
            return

        delta_x = current_canvas_x - self.drag_start_x
        delta_y = current_canvas_y - self.drag_start_y

        delta_tile_x = round(delta_x / zoomed_tile_size)
        delta_tile_y = round(delta_y / zoomed_tile_size)

        new_tx = self.drag_start_win_tx + delta_tile_x
        new_ty = self.drag_start_win_ty + delta_tile_y
        
        # Max window position is based on total map tiles, not supertile grid directly here
        # Total map dimension in base tiles:
        total_map_tiles_w = map_width * self.supertile_grid_width
        total_map_tiles_h = map_height * self.supertile_grid_height

        max_tile_x_win = total_map_tiles_w - self.window_view_tile_w.get()
        max_tile_y_win = total_map_tiles_h - self.window_view_tile_h.get()
        
        # Ensure max is not negative if window is larger than map (should be prevented by other logic)
        max_tile_x_win = max(0, max_tile_x_win)
        max_tile_y_win = max(0, max_tile_y_win)

        clamped_tx = max(0, min(new_tx, max_tile_x_win))
        clamped_ty = max(0, min(new_ty, max_tile_y_win))

        if (
            self.window_view_tile_x != clamped_tx
            or self.window_view_tile_y != clamped_ty
        ):
            self.window_view_tile_x = clamped_tx
            self.window_view_tile_y = clamped_ty
            self.draw_map_canvas()
            self.draw_minimap() # Added to update minimap during window drag

    def _do_window_resize_drag(self, current_canvas_x, current_canvas_y):
        zoomed_tile_size = self.get_zoomed_tile_size()
        if zoomed_tile_size <= 0:
            return

        start_tx = self.drag_start_win_tx
        start_ty = self.drag_start_win_ty
        start_tw = self.drag_start_win_tw
        start_th = self.drag_start_win_th

        current_tile_x = round(current_canvas_x / zoomed_tile_size)
        current_tile_y = round(current_canvas_y / zoomed_tile_size)

        new_tx = start_tx
        new_ty = start_ty
        new_tw = start_tw
        new_th = start_th
        handle = self.window_view_resize_handle

        if "w" in handle:
            new_tx = min(current_tile_x, start_tx + start_tw - 1)
            new_tw = start_tw + (start_tx - new_tx)
        elif "e" in handle:
            new_tw = max(1, current_tile_x - start_tx + 1)

        if "n" in handle:
            new_ty = min(current_tile_y, start_ty + start_th - 1)
            new_th = start_th + (start_ty - new_ty)
        elif "s" in handle:
            new_th = max(1, current_tile_y - start_ty + 1)

        min_w, max_w = 1, 32
        min_h, max_h = 1, MAX_WIN_VIEW_HEIGHT_TILES
        clamped_tw = max(min_w, min(new_tw, max_w))
        clamped_th = max(min_h, min(new_th, max_h))

        if "w" in handle and clamped_tw != new_tw:
            new_tx = start_tx + start_tw - clamped_tw
        if "n" in handle and clamped_th != new_th:
            new_ty = start_ty + start_th - clamped_th
        
        # Total map dimension in base tiles:
        total_map_tiles_w = map_width * self.supertile_grid_width
        total_map_tiles_h = map_height * self.supertile_grid_height

        max_map_tile_x_for_win = total_map_tiles_w
        max_map_tile_y_for_win = total_map_tiles_h
        
        clamped_tx = max(0, min(new_tx, max_map_tile_x_for_win - clamped_tw))
        clamped_ty = max(0, min(new_ty, max_map_tile_y_for_win - clamped_th))
        
        # Final check if clamping position changed dimensions again
        final_tw = min(clamped_tw, max_map_tile_x_for_win - clamped_tx)
        final_th = min(clamped_th, max_map_tile_y_for_win - clamped_ty)
        final_tw = max(1, final_tw) # Ensure min width of 1
        final_th = max(1, final_th) # Ensure min height of 1


        if (
            self.window_view_tile_x != clamped_tx
            or self.window_view_tile_y != clamped_ty
            or self.window_view_tile_w.get() != final_tw # Use final_tw/th
            or self.window_view_tile_h.get() != final_th
        ):
            self.window_view_tile_x = clamped_tx
            self.window_view_tile_y = clamped_ty
            self.window_view_tile_w.set(final_tw)
            self.window_view_tile_h.set(final_th)
            self.draw_map_canvas()
            self.draw_minimap() # Added to update minimap

    def move_window_view_keyboard(self, dx_tile, dy_tile):
        if not self.show_window_view.get():
            return

        new_tx = self.window_view_tile_x + dx_tile
        new_ty = self.window_view_tile_y + dy_tile

        current_w = self.window_view_tile_w.get()
        current_h = self.window_view_tile_h.get()

        # Total map dimension in base tiles:
        total_map_tiles_w = map_width * self.supertile_grid_width
        total_map_tiles_h = map_height * self.supertile_grid_height
        
        # Max top-left position for the window view
        max_win_pos_x = total_map_tiles_w - current_w
        max_win_pos_y = total_map_tiles_h - current_h
        
        # Ensure max is not negative if window is larger than map
        max_win_pos_x = max(0, max_win_pos_x)
        max_win_pos_y = max(0, max_win_pos_y)

        clamped_tx = max(0, min(new_tx, max_win_pos_x))
        clamped_ty = max(0, min(new_ty, max_win_pos_y))

        if (
            self.window_view_tile_x != clamped_tx
            or self.window_view_tile_y != clamped_ty
        ):
            self.window_view_tile_x = clamped_tx
            self.window_view_tile_y = clamped_ty
            self.draw_map_canvas()
            self.draw_minimap()

    def handle_map_keypress(self, event):
        """Handles key presses when the map canvas has focus (WASD, G)."""
        key = event.keysym.lower()  # Get lowercase keysym

        if key == "g":  # MODIFIED CHECK
            self.cycle_grid_color()
            return "break"  # Prevent other 'g' bindings
        elif self.show_window_view.get():  # Only move window if visible
            moved = False
            if key == "w":
                self.move_window_view_keyboard(0, -1)
                moved = True
            elif key == "a":
                self.move_window_view_keyboard(-1, 0)
                moved = True
            elif key == "s":
                self.move_window_view_keyboard(0, 1)
                moved = True
            elif key == "d":
                self.move_window_view_keyboard(1, 0)
                moved = True

            if moved:
                return "break"

    # --- Map Zoom Handlers ---
    def handle_map_zoom_scroll(self, event):
        canvas = self.map_canvas
        factor = 0.0
        if event.num == 4 or event.delta > 0: # Zoom In
            factor = 1.1
        elif event.num == 5 or event.delta < 0: # Zoom Out
            factor = 1 / 1.1
        else:
            return

        # --- Step 1: Get map coordinates under cursor BEFORE zoom ---
        # These are in the map's content coordinate system at the current zoom
        map_x_under_cursor_before_zoom = canvas.canvasx(event.x)
        map_y_under_cursor_before_zoom = canvas.canvasy(event.y)

        current_zoom_before = self.map_zoom_level # Store old zoom level

        # --- Step 2: Update zoom level (delegated) ---
        # zoom_map_at_point will set self.map_zoom_level and call draw_map_canvas,
        # which updates the scrollregion and redraws content.
        # The previous scroll adjustment logic within zoom_map_at_point was complex
        # and is now simplified. We will apply the scroll adjustment here.
        
        # Call a variant or directly update zoom level and then redraw.
        # For simplicity, let's assume zoom_map_at_point now primarily sets self.map_zoom_level
        # and calls draw_map_canvas. The point-fixing scroll is done here.

        min_zoom, max_zoom = 0.1, 6.0
        new_zoom_level = max(min_zoom, min(max_zoom, current_zoom_before * factor))

        if abs(new_zoom_level - current_zoom_before) < 1e-9:
            return # No significant zoom change

        self.map_zoom_level = new_zoom_level # Update the zoom level

        # --- Step 3: Redraw map with new zoom (updates scrollregion) ---
        # This is important so that subsequent calculations of total map dimensions are correct.
        self.draw_map_canvas() 
        # self.draw_minimap() will be called at the end

        # --- Step 4: Calculate new scroll position to keep point under cursor ---
        # After zoom and redraw (which set new scrollregion), the total map dimensions have changed.
        # We want the 'map_x_under_cursor_before_zoom' (which is a fixed point on the map's drawing)
        # to now appear under the screen coordinate event.x.

        # Total pixel dimensions of map content at the NEW zoom level
        # (get_zoomed_tile_size uses the new self.map_zoom_level)
        zoomed_tile_size_after = self.get_zoomed_tile_size()
        map_total_w_new = map_width * self.supertile_grid_width * zoomed_tile_size_after
        map_total_h_new = map_height * self.supertile_grid_height * zoomed_tile_size_after
        
        map_total_w_new = max(1.0, map_total_w_new) # Avoid division by zero
        map_total_h_new = max(1.0, map_total_h_new)

        # The desired new top-left of the viewport (scroll position in map units)
        # so that map_x_under_cursor_before_zoom appears at screen coordinate event.x
        # new_scroll_x_map_units = map_x_under_cursor_before_zoom - event.x # This is conceptual
        # We need to convert event.x (screen pixels) to how many map units it represents at new zoom.
        # Pixels per map unit at new zoom: self.map_zoom_level (if base is 1px=1unit) or related factor.
        # Here, "map units" are the scaled pixels used by canvasx.

        # Desired canvas.canvasx(0) = map_x_under_cursor_before_zoom - event.x
        # (No, this is not right. event.x is widget relative, canvasx is content relative)
        #
        # We want the map coordinate 'map_x_under_cursor_before_zoom'
        # to be at screen position 'event.x' after zooming.
        # Let new_vx = new canvas.canvasx(0).
        # event.x = map_x_under_cursor_before_zoom - new_vx  (if 1 screen pixel = 1 map unit at current zoom)
        # This is not quite right as canvasx itself depends on zoom.

        # Simpler scroll target using fractions, adapted from Tkinter examples:
        # The point on the map content (map_x_under_cursor_before_zoom) should now be
        # positioned at widget coordinate event.x.
        # The amount of canvas content to the left of event.x should be map_x_under_cursor_before_zoom.
        # So, canvas.canvasx(event.x) should ideally be map_x_under_cursor_before_zoom.
        #
        # canvas.xview_moveto(fraction)
        # fraction = (map_coord_of_interest - screen_coord_of_interest_relative_to_viewport_edge) / total_content_width
        
        # Target x-scroll fraction:
        # We want the content coordinate `map_x_under_cursor_before_zoom` to appear at `event.x` on screen.
        # The distance from the left edge of the content to `map_x_under_cursor_before_zoom` is `map_x_under_cursor_before_zoom`.
        # The distance from the left edge of the viewport to `event.x` is `event.x`.
        # So, the amount of content hidden to the left of the viewport should be:
        # `map_x_under_cursor_before_zoom - event.x` (if assuming 1:1 pixel mapping between content and screen for this formula part)
        # This is the new canvas.canvasx(0).
        
        new_scroll_offset_x = map_x_under_cursor_before_zoom - event.x
        new_scroll_offset_y = map_y_under_cursor_before_zoom - event.y
        
        # Convert absolute scroll offset to fraction for xview_moveto
        target_frac_x = new_scroll_offset_x / map_total_w_new
        target_frac_y = new_scroll_offset_y / map_total_h_new

        # Clamp fractions
        target_frac_x = max(0.0, min(1.0 - (canvas.winfo_width() / map_total_w_new), target_frac_x)) if map_total_w_new > canvas.winfo_width() else 0.0
        target_frac_y = max(0.0, min(1.0 - (canvas.winfo_height() / map_total_h_new), target_frac_y)) if map_total_h_new > canvas.winfo_height() else 0.0
        
        # Apply the scroll
        canvas.xview_moveto(target_frac_x)
        canvas.yview_moveto(target_frac_y)

        # Final redraw might be needed if moveto didn't trigger it, or to update minimap
        # self.draw_map_canvas() # Already called once, this might be redundant unless moveto is async
        self.draw_minimap()

    def change_map_zoom_mult(self, factor):
        """Applies multiplicative zoom, centered on the current canvas center."""
        canvas = self.map_canvas
        # Get current canvas view center
        cx = canvas.canvasx(canvas.winfo_width() / 2)
        cy = canvas.canvasy(canvas.winfo_height() / 2)
        # Zoom towards the center
        self.zoom_map_at_point(factor, cx, cy)

    def set_map_zoom(self, new_zoom_level):
        """Sets absolute zoom level, centered on current canvas center."""
        safe_zoom = max(0.1, min(6.0, float(new_zoom_level)))  # Clamp to new limits
        current_zoom = self.map_zoom_level
        if current_zoom != safe_zoom:
            factor = safe_zoom / current_zoom
            # Calculate center point to zoom around
            canvas = self.map_canvas
            cx = canvas.canvasx(canvas.winfo_width() / 2)
            cy = canvas.canvasy(canvas.winfo_height() / 2)
            # Apply zoom using the calculated factor
            self.zoom_map_at_point(factor, cx, cy)  # zoom_map_at_point handles redraw

    def get_zoomed_tile_size(self):
        """Calculates the current TILE size (base 8x8) based on zoom."""
        # Base size for 100% zoom is 8 pixels per tile edge
        zoomed_size = 8 * self.map_zoom_level
        # Ensure minimum size of 1 pixel
        return max(1, int(zoomed_size))

    def zoom_map_at_point(self, factor, zoom_x_canvas, zoom_y_canvas):
        canvas = self.map_canvas
        current_zoom = self.map_zoom_level
        min_zoom, max_zoom = 0.1, 6.0
        new_zoom = max(min_zoom, min(max_zoom, current_zoom * factor))

        if abs(new_zoom - current_zoom) < 1e-9:
            return

        map_coord_x_at_cursor = canvas.canvasx(zoom_x_canvas) # This is canvasx from event.x, not event.x itself
        map_coord_y_at_cursor = canvas.canvasy(zoom_y_canvas) # This is canvasy from event.y

        scale_change = new_zoom / current_zoom
        self.map_zoom_level = new_zoom # Update state first

        # Ideal scroll position calculation
        new_map_coord_x_target = map_coord_x_at_cursor # The point under cursor should ideally stay the same *map* coordinate
        new_map_coord_y_target = map_coord_y_at_cursor

        # To keep new_map_coord_x_target at screen position zoom_x_canvas,
        # the new canvas.canvasx(0) should be:
        # new_scroll_x_abs = new_map_coord_x_target - zoom_x_canvas 
        # This interpretation was slightly off. Let's re-evaluate.
        #
        # The point on the map that was at (zoom_x_canvas, zoom_y_canvas) on screen
        # before zoom was (map_coord_x_at_cursor, map_coord_y_at_cursor) in map units.
        # After zoom, this map point (map_coord_x_at_cursor, map_coord_y_at_cursor)
        # should still appear at (zoom_x_canvas, zoom_y_canvas) on screen.
        #
        # Let S0 = old scroll offset (canvas.canvasx(0))
        # Let S1 = new scroll offset
        # zoom_x_canvas = map_coord_x_at_cursor_on_map_relative_to_origin / old_zoom_level - S0
        # zoom_x_canvas = map_coord_x_at_cursor_on_map_relative_to_origin / new_zoom_level - S1
        # This is getting complicated. Tkinter's own scaling:
        # canvas.scale("all", zoom_x_canvas, zoom_y_canvas, scale_change, scale_change)
        # This scales the *content*. Then we'd need to adjust scrollregion and redraw.
        #
        # Let's use the simpler scroll adjustment logic that worked before,
        # it relies on the fact that draw_map_canvas will correctly set the new scrollregion.

        # Calculate where the map point under the cursor *would* move to if we only scaled
        new_x_if_only_scaled = map_coord_x_at_cursor * scale_change # This is not quite right
        new_y_if_only_scaled = map_coord_y_at_cursor * scale_change

        # The amount the view origin needs to shift to keep the cursor point stationary
        # delta_x_scroll = new_x_if_only_scaled - map_coord_x_at_cursor # This is how much the map point moved
        # So canvas must scroll by this amount in map units.
        # If map_coord_x_at_cursor = C.canvasx(event.x)
        # then map_coord_x_at_cursor is already a coordinate in the current scrolled view.
        # After scaling, C.canvasx(event.x) * scale_change is where that point would be IF origin didn't move.
        # We want map_coord_x_at_cursor to remain at event.x (screen coordinate).
        
        # Calculate the new viewport origin such that the point under the cursor remains fixed.
        # (vx, vy) is the current top-left of the viewport in canvas coordinates.
        # We want to find (vx', vy')
        # zoom_x_canvas - vx = (map_point_x_under_cursor)
        # zoom_x_canvas - vx' = (map_point_x_under_cursor) / scale_change
        # vx' = zoom_x_canvas - (map_point_x_under_cursor / scale_change)
        # This is not how canvas.xview_scroll works. xview_scroll moves by delta units.

        # Original simpler logic for scroll adjustment:
        ideal_scroll_x_abs = (map_coord_x_at_cursor * scale_change) - zoom_x_canvas
        ideal_scroll_y_abs = (map_coord_y_at_cursor * scale_change) - zoom_y_canvas
        # This was for zoom_map_at_point when zoom_x_canvas was a screen coordinate.
        # Here, zoom_x_canvas is already a *map content* coordinate.

        # Simpler:
        # 1. Scale the canvas content around the specific point.
        #    This changes what map coordinates map to screen coordinates.
        #    Tkinter's canvas.scale() function does this.
        #    canvas.scale("all", zoom_x_canvas, zoom_y_canvas, scale_change, scale_change)
        #    This scales all *items* on the canvas. Since we redraw everything, this isn't what we want.

        # Let's use the previous "zoom_map_at_point" logic which seemed to work by adjusting scrollbars.
        # The key is that zoom_x_canvas and zoom_y_canvas are the *map content coordinates*
        # that should remain under the cursor.
        
        # Current view:
        # view_x1_old = canvas.canvasx(0)
        # view_y1_old = canvas.canvasy(0)
        
        # After zoom, the point (zoom_x_canvas, zoom_y_canvas) should still be at the same
        # relative position on the screen.
        # The offset of the cursor from the view origin is (zoom_x_canvas - view_x1_old)
        # This offset, when scaled, should be (zoom_x_canvas_new_scale - view_x1_new)
        # zoom_x_canvas * scale_change - view_x1_new = (zoom_x_canvas - view_x1_old) * scale_change
        # This is also complex.

        # Let's use the logic from the Tkinter wiki for zooming at a point:
        # This scrolls the view so that the canvas coordinate point (zoom_x_canvas, zoom_y_canvas)
        # appears at the same screen location after scaling the view.
        # Note: Tkinter's canvas view units are screen pixels.
        # Our zoom_x_canvas, zoom_y_canvas are already map content coords.
        
        # The amount of shift needed in the scroll view
        # This is how many *screen pixels* the view needs to shift.
        # Convert these screen pixel shifts to canvas "units" for scroll command.
        # This calculation was for when zoom_x_canvas was event.x (a screen coordinate)
        # If zoom_x_canvas is a map coordinate:
        # dx_scroll = (zoom_x_canvas * (1.0 - scale_change)) # Incorrect
        # dy_scroll = (zoom_y_canvas * (1.0 - scale_change)) # Incorrect

        # Simpler approach for scroll management (like before):
        # Calculate new total map dimensions
        zoomed_tile_size_new = self.get_zoomed_tile_size() # Uses updated self.map_zoom_level
        
        # These are the new total dimensions of the map content in pixels
        map_total_pixel_width_new = map_width * self.supertile_grid_width * zoomed_tile_size_new
        map_total_pixel_height_new = map_height * self.supertile_grid_height * zoomed_tile_size_new

        safe_map_width_new = max(1.0, map_total_pixel_width_new)
        safe_map_height_new = max(1.0, map_total_pixel_height_new)

        canvas_widget_width = canvas.winfo_width()
        canvas_widget_height = canvas.winfo_height()

        # The fraction of the map that zoom_x_canvas represents:
        frac_x = zoom_x_canvas / safe_map_width_new if current_zoom == 0 else zoom_x_canvas / (map_width * self.supertile_grid_width * (zoomed_tile_size_new / scale_change) )
        frac_y = zoom_y_canvas / safe_map_height_new if current_zoom == 0 else zoom_y_canvas / (map_height * self.supertile_grid_height * (zoomed_tile_size_new / scale_change) )
        
        # The screen coordinate where the zoom point should be fixed (relative to canvas widget)
        # This is NOT event.x, but the screen position of the map point zoom_x_canvas.
        # Let's assume zoom_x_canvas, zoom_y_canvas were the point under the *mouse cursor*.
        # We need to find where event.x, event.y was before the zoom,
        # then find where to scroll so that map point is still under event.x, event.y.

        # To keep `map_coord_x_at_cursor` (which *was* under the mouse) under the mouse *again*:
        # The mouse is at screen coordinate (event.x, event.y) relative to canvas widget.
        # New scroll left edge `s_x1` should be: `map_coord_x_at_cursor * scale_change - event.x`
        # (This assumes map_coord_x_at_cursor was from canvas.canvasx(event.x) using *old* zoom)
        
        # The effective map coordinate that should now be at the screen's event.x, event.y
        # is map_coord_x_at_cursor.
        # So, the new view's top-left (vx_new, vy_new) should be:
        # vx_new = map_coord_x_at_cursor - (event.x_relative_to_canvas * (1/new_zoom_level)) -> No, this uses absolute zoom.

        # Using the Tkinter canvas method of keeping a point stationary:
        # 1. Map the screen point (event.x, event.y) to canvas coordinates before zoom. (This is map_coord_x_at_cursor)
        # 2. Scale all canvas items by scale_change around that canvas coordinate.
        # Since we redraw items, we just need to adjust the view.
        # New scroll position:
        s_x = canvas.canvasx(0) # current scroll x
        s_y = canvas.canvasy(0) # current scroll y
        
        # zoom_x_canvas and zoom_y_canvas are already the map coordinates under the cursor
        
        # New scroll position needs to ensure that zoom_x_canvas (map coord)
        # is still at the same relative screen position it was.
        # This is equivalent to canvas.scan_mark(event.x,event.y) then canvas.scan_dragto but with scaling.

        # Calculate new scroll position to keep (zoom_x_canvas, zoom_y_canvas) stationary on screen
        # The delta applied to the scrollbar positions needs to be relative to the current view.
        # This means the logic from version 0.0.28 was likely more correct if it worked.
        # dx = zoom_x_canvas * (1.0 - 1.0/scale_change) # Amount to shift the view origin
        # dy = zoom_y_canvas * (1.0 - 1.0/scale_change)
        # canvas.xview_scroll(int(round(dx)), "units")
        # canvas.yview_scroll(int(round(dy)), "units")
        # This approach might be problematic because "units" for xview_scroll are poorly defined for scaled content.

        # A more reliable way: calculate absolute scroll fractions
        # The screen point (event.x, event.y) should correspond to map point (map_coord_x_at_cursor, map_coord_y_at_cursor)
        # after zoom.
        # The desired top-left canvas coordinate for the view (scroll position) would be:
        # new_scroll_abs_x = map_coord_x_at_cursor - (screen_pos_of_cursor_x * (1/self.map_zoom_level) )
        # This gets complex quickly.

        # Let's use the previous successful scroll adjustment from 0.0.28, assuming
        # zoom_x_canvas and zoom_y_canvas are the map coordinates that were under the cursor.
        # The screen position of the cursor (relative to canvas widget) must be known for this.
        # The handle_map_zoom_scroll passes event.x, event.y.
        # Let screen_cursor_x = event.x, screen_cursor_y = event.y from that handler.
        # So, map_coord_x_at_cursor = canvas.canvasx(screen_cursor_x) before zoom update.

        # Desired new canvas origin (scroll position)
        # new_vx = map_coord_x_at_cursor - screen_cursor_x * (1.0/self.map_zoom_level) # If map_zoom_level is pixel scale
        # new_vx = map_coord_x_at_cursor - screen_cursor_x # If map_zoom_level is just a factor relative to base
        # The 'units' for scroll are pixels of the *unzoomed* base if not careful.

        # Revert to the logic that shifts the view based on how the target point moves:
        # map_coord_x_at_cursor is the map coordinate.
        # Its new position if view didn't change: map_coord_x_at_cursor * scale_change (this is wrong, scale_change is for zoom level)
        # The point map_coord_x_at_cursor should remain at same screen spot.
        # Before zoom: screen_x = (map_coord_x_at_cursor - scroll_x_old) * old_pixel_per_map_unit
        # After zoom: screen_x = (map_coord_x_at_cursor - scroll_x_new) * new_pixel_per_map_unit
        # scroll_x_new = map_coord_x_at_cursor - (screen_x / new_pixel_per_map_unit)
        
        # The scroll factor is applied to the current view fractions.
        # This needs the event.x and event.y from the scroll handler.
        # For now, this method is called by change_map_zoom_mult (center zoom)
        # and handle_map_zoom_scroll (cursor zoom).
        # The parameters zoom_x_canvas, zoom_y_canvas are the *map coordinates* to keep fixed.
        
        # Initial scroll based on cursor point (map coordinates)
        # This attempts to keep the map point (zoom_x_canvas, zoom_y_canvas)
        # at the same fractional position within the viewport.
        current_xview_frac = canvas.xview()
        current_yview_frac = canvas.yview()

        # What fraction of the total map width/height does zoom_x_canvas represent BEFORE zoom?
        # Need pre-zoom total map dimensions.
        pre_zoom_tile_size = self.get_zoomed_tile_size() / scale_change # tile size before this zoom
        pre_map_total_w = map_width * self.supertile_grid_width * pre_zoom_tile_size
        pre_map_total_h = map_height * self.supertile_grid_height * pre_zoom_tile_size
        pre_map_total_w = max(1.0, pre_map_total_w) # Avoid division by zero
        pre_map_total_h = max(1.0, pre_map_total_h)

        frac_target_x = zoom_x_canvas / pre_map_total_w
        frac_target_y = zoom_y_canvas / pre_map_total_h
        
        # How much of the viewport width/height is visible (fraction of total map)
        view_frac_w = current_xview_frac[1] - current_xview_frac[0]
        view_frac_h = current_yview_frac[1] - current_yview_frac[0]
        
        # New scroll start fraction
        new_scroll_frac_x = frac_target_x - ( (zoom_x_canvas - canvas.canvasx(0)) / pre_map_total_w ) * (view_frac_w / (view_frac_w * scale_change) if view_frac_w > 0 else 1) # This needs event.x from scroll
        # This part is becoming overly complex again. The original simple shift worked if units were consistent.

        # Let's use the scroll adjustment based on how the fixed point moves relative to screen.
        # This requires the screen coordinates of the zoom point.
        # Assume zoom_x_canvas, zoom_y_canvas ARE the map points.
        # We need the event.x, event.y passed to handle_map_zoom_scroll.
        # This method should probably take event_x, event_y if it's cursor-centered.
        # If it's center-zoom, event_x/y are canvas.winfo_width/2.

        # If this method is called by handle_map_zoom_scroll, it will have event.x, event.y.
        # If called by change_map_zoom_mult, the zoom_x_canvas, zoom_y_canvas are center map points.
        
        # Simplified scroll adjustment:
        # This assumes zoom_x_canvas, zoom_y_canvas are the map coordinates that were under the mouse.
        # The view needs to shift such that this point remains under the mouse.
        # Let original scroll be (vx0, vy0).
        # Mouse screen pos: (mx, my).
        # Original map point under mouse: zoom_x_canvas = vx0 + mx / old_pixel_scale_factor
        # New scroll (vx1, vy1):
        # zoom_x_canvas = vx1 + mx / new_pixel_scale_factor
        # vx1 = zoom_x_canvas - mx / new_pixel_scale_factor
        # This requires screen mouse coords.
        
        # The critical part is that draw_map_canvas will correctly set the new scrollregion.
        # The scroll adjustment here is to keep the view centered or cursor-focused.
        # For now, let's assume a simple scroll to keep the *center of the new view*
        # roughly where the center of the old view was, scaled.
        # This means that the fractional scroll position should ideally remain similar.
        # canvas.xview_moveto(current_xview_frac[0])
        # canvas.yview_moveto(current_yview_frac[0])
        # This is too simple and doesn't zoom "to point".

        # The most reliable way is to adjust based on the delta of the fixed point.
        # This version relies on canvas.scan_dragto like behavior conceptually.
        # delta_x = zoom_x_canvas * (1.0 - scale_change) # Incorrect, scale_change is for zoom level
        # delta_y = zoom_y_canvas * (1.0 - scale_change)
        # canvas.xview_scroll(int(round(delta_x)), "units") # Units are problematic here.
        # canvas.yview_scroll(int(round(delta_y)), "units")
        
        # Reverting to a scroll logic that attempts to keep the *map point* stationary on screen.
        # This requires the screen coordinates of where that map point *was*.
        # If zoom_x_canvas, zoom_y_canvas ARE those map points:
        # Calculate the new desired scroll fractions based on keeping this point stationary
        # relative to the viewport's center, or a specific screen point if provided.
        # For now, just ensure clamping and full redraw. The scroll part needs a robust method.
        # The version from 0.0.29 for scroll adjustment was:
        # new_x = zoom_x_canvas * scale_change (incorrect if zoom_x_canvas is already a map coord of fixed point)
        # delta_x = new_x - zoom_x_canvas
        # canvas.xview_scroll(int(round(delta_x)), "units")
        # This scroll logic is the hardest to get right without Tk's direct item scaling.

        # The primary job of this function is to set self.map_zoom_level
        # and trigger a redraw. The scroll adjustment needs to be handled carefully
        # by the caller (handle_map_zoom_scroll) or by this function if it gets screen coords.

        # Clamping scroll position after any adjustment (or if no adjustment is made here)
        canvas_widget_width_after = canvas.winfo_width() # Re-query in case of changes
        canvas_widget_height_after = canvas.winfo_height()

        # This clamping ensures that if the map is smaller than the canvas, it's at 0,0.
        # It doesn't handle the zoom-to-point scrolling itself.
        if map_total_pixel_width_new < canvas_widget_width_after:
            canvas.xview_moveto(0.0)
        if map_total_pixel_height_new < canvas_widget_height_after:
            canvas.yview_moveto(0.0)
        
        # The crucial part: redraw the map. This function will use the new zoom level
        # and calculate the correct scroll region.
        self.draw_map_canvas()
        self.draw_minimap()

    # --- File Menu Commands ---
    # ... (new_project, save/load tileset/supertile/map remain mostly unchanged,
    #      ensure new_project resets new state like grid toggles, window view) ...
    def new_project(self):
        global tileset_patterns, tileset_colors, current_tile_index, num_tiles_in_set
        global supertiles_data, current_supertile_index, num_supertiles, selected_tile_for_supertile
        global map_data, map_width, map_height, selected_supertile_for_map, last_painted_map_cell
        global tile_clipboard_pattern, tile_clipboard_colors, supertile_clipboard_data

        confirm_new = True
        if self.project_modified:
            confirm_new = messagebox.askokcancel(
                "New Project", "Discard all current unsaved changes and start new?"
            )

        if confirm_new:
            # --- Get New Supertile Dimensions ---
            temp_st_width = self.supertile_grid_width # Store current to revert if dialog cancelled
            temp_st_height = self.supertile_grid_height

            new_dim_w_str = simpledialog.askstring(
                "New Supertile Width",
                "Enter supertile grid width (number of tiles, 1-32):",
                parent=self.root, initialvalue=str(self.supertile_grid_width)
            )
            if new_dim_w_str is None: return # User cancelled

            try:
                new_dim_w = int(new_dim_w_str)
                if not (1 <= new_dim_w <= 32):
                    messagebox.showerror("Invalid Width", "Width must be between 1 and 32.", parent=self.root)
                    return
            except ValueError:
                messagebox.showerror("Invalid Input", "Width must be a whole number.", parent=self.root)
                return

            new_dim_h_str = simpledialog.askstring(
                "New Supertile Height",
                "Enter supertile grid height (number of tiles, 1-32):",
                parent=self.root, initialvalue=str(self.supertile_grid_height)
            )
            if new_dim_h_str is None: return # User cancelled
            
            try:
                new_dim_h = int(new_dim_h_str)
                if not (1 <= new_dim_h <= 32):
                    messagebox.showerror("Invalid Height", "Height must be between 1 and 32.", parent=self.root)
                    return
            except ValueError:
                messagebox.showerror("Invalid Input", "Height must be a whole number.", parent=self.root)
                return

            self.supertile_grid_width = new_dim_w
            self.supertile_grid_height = new_dim_h
            print(f"New project: Supertile dimensions set to {self.supertile_grid_width}W x {self.supertile_grid_height}H.")
            # --- End Get New Supertile Dimensions ---

            self._clear_marked_unused(trigger_redraw=False)

            tileset_patterns = [
                [[0] * TILE_WIDTH for _ in range(TILE_HEIGHT)] for _ in range(MAX_TILES)
            ]
            tileset_colors = [
                [(WHITE_IDX, BLACK_IDX) for _ in range(TILE_HEIGHT)]
                for _ in range(MAX_TILES)
            ]
            current_tile_index = 0
            num_tiles_in_set = 1
            selected_tile_for_supertile = 0

            # Initialize supertiles_data with new dimensions
            supertiles_data = [
                [[0 for _c in range(self.supertile_grid_width)] for _r in range(self.supertile_grid_height)]
                for _st in range(MAX_SUPERTILES)
            ]
            current_supertile_index = 0
            num_supertiles = 1
            selected_supertile_for_map = 0

            map_width = DEFAULT_MAP_WIDTH
            map_height = DEFAULT_MAP_HEIGHT
            map_data = [[0 for _ in range(map_width)] for _ in range(map_height)]
            last_painted_map_cell = None

            tile_clipboard_pattern = None
            tile_clipboard_colors = None
            supertile_clipboard_data = None # This needs to be aware of ST dimensions if copied
            self.map_clipboard_data = None

            self.active_msx_palette = []
            for r_pal, g_pal, b_pal in MSX2_RGB7_VALUES:
                 self.active_msx_palette.append(self._rgb7_to_hex(r_pal, g_pal, b_pal))
            self.selected_palette_slot = 0
            global selected_color_index
            selected_color_index = WHITE_IDX

            self.map_zoom_level = 1.0
            self.show_supertile_grid.set(False)
            self.show_window_view.set(False)
            self.grid_color_index = 1
            self.window_view_tile_x = 0
            self.window_view_tile_y = 0
            self.window_view_tile_w.set(DEFAULT_WIN_VIEW_WIDTH_TILES)
            self.window_view_tile_h.set(DEFAULT_WIN_VIEW_HEIGHT_TILES)
            self.current_mouse_action = None
            self.window_view_resize_handle = None

            self._clear_map_selection()
            self._clear_paste_preview_rect()
            self.is_shift_pressed = False
            self.is_ctrl_pressed = False

            self.current_project_base_path = None
            self.project_modified = False # Reset modified flag AFTER asking and getting dimensions
            self._update_window_title()

            self.clear_all_caches()
            self.invalidate_minimap_background_cache()
            
            # Reconfigure supertile definition canvas size if it exists
            self._reconfigure_supertile_definition_canvas()
            
            self._trigger_minimap_reconfigure() # In case map proportions change due to ST dim change
            self.update_all_displays(changed_level="all")

            self._update_editor_button_states()
            self._update_edit_menu_state()
            self._update_supertile_rotate_button_state() # Update based on new dimensions

    def save_palette(self, filepath=None):
        """Saves the current 16 active palette colors to a binary file.
        Returns True on success, False on failure/cancel.
        If filepath is None, prompts the user.
        """
        save_path = filepath
        # Prompt user if no path provided
        if not save_path:
            save_path = filedialog.asksaveasfilename(
                defaultextension=".msxpal",
                filetypes=[("MSX Palette File", "*.msxpal"), ("All Files", "*.*")],
                title="Save MSX Palette As...",
            )
        # Return False if user cancelled dialog
        if not save_path:
            return False

        try:
            # Open file in binary write mode
            with open(save_path, "wb") as f:
                # Sanity check palette length
                if len(self.active_msx_palette) != 16:
                    # Use internal print for non-interactive error
                    print("ERROR: Active palette length is not 16 during save!")
                    # Show message box only if called directly by user
                    if filepath is None:
                        messagebox.showerror(
                            "Palette Error",
                            "Internal Error: Active palette does not contain 16 colors.",
                        )
                    return False  # Indicate failure

                # Write each color as 3 bytes (R,G,B 0-7)
                for i in range(16):
                    hex_color = self.active_msx_palette[i]
                    r, g, b = self._hex_to_rgb7(hex_color)  # Convert hex to 0-7 range
                    packed_bytes = struct.pack("BBB", r, g, b)  # Pack as 3 bytes
                    f.write(packed_bytes)

            # Show success message ONLY if called directly by user
            if filepath is None:
                messagebox.showinfo(
                    "Save Successful",
                    f"Palette saved successfully to {os.path.basename(save_path)}",
                )
            return True  # Indicate success

        except Exception as e:
            # Always show error message on failure
            messagebox.showerror(
                "Save Palette Error",
                f"Failed to save palette file '{os.path.basename(save_path)}':\n{e}",
            )
            return False  # Indicate failure

    def open_palette(self, filepath=None):
        """Loads a 16-color palette from a binary file.
        Returns True on success, False on failure/cancel.
        If filepath is None, prompts the user.
        """
        load_path = filepath
        if not load_path:
            load_path = filedialog.askopenfilename(
                filetypes=[("MSX Palette File", "*.msxpal"), ("All Files", "*.*")],
                title="Open MSX Palette",
            )
        if not load_path:
            return False

        try:
            expected_size = 16 * 3  
            new_palette_hex = []  

            with open(load_path, "rb") as f:
                palette_data = f.read(expected_size + 1)

                if len(palette_data) < expected_size:
                    raise ValueError(
                        f"Invalid file size. Expected {expected_size} bytes, got {len(palette_data)}."
                    )
                if len(palette_data) > expected_size:
                    print(
                        f"Warning: File '{os.path.basename(load_path)}' is larger than expected ({expected_size} bytes). Extra data ignored."
                    )

                for i in range(16):
                    offset = i * 3
                    r_val, g_val, b_val = struct.unpack_from("BBB", palette_data, offset) # Renamed r,g,b

                    if not (0 <= r_val <= 7 and 0 <= g_val <= 7 and 0 <= b_val <= 7):
                        print(
                            f"Warning: Invalid RGB ({r_val},{g_val},{b_val}) at slot {i} in '{os.path.basename(load_path)}'. Clamping."
                        )
                        r_val = max(0, min(7, r_val))
                        g_val = max(0, min(7, g_val))
                        b_val = max(0, min(7, b_val))

                    hex_color = self._rgb7_to_hex(r_val, g_val, b_val)
                    new_palette_hex.append(hex_color)

            confirm = True  
            if filepath is None:  
                confirm = messagebox.askokcancel(
                    "Load Palette",
                    "Replace the current active palette with data from this file?",
                )

            if confirm:
                # Clear marks BEFORE data change and full redraw
                if self._clear_marked_unused(trigger_redraw=False): 
                    # If marks were cleared, a full redraw will happen anyway via update_all_displays
                    pass # No need for immediate redraw here
                
                self.active_msx_palette = new_palette_hex
                self.selected_palette_slot = 0
                global selected_color_index
                selected_color_index = 0 # Default to first color
                
                self.clear_all_caches()
                self.invalidate_minimap_background_cache()  
                self.update_all_displays(changed_level="all") # This will redraw everything
                
                if filepath is None: # Only switch tab if loaded individually
                    self.notebook.select(self.tab_palette_editor)
                    messagebox.showinfo(
                        "Load Successful",
                        f"Loaded palette from {os.path.basename(load_path)}",
                    )
                # Mark project modified only if loaded individually (project load handles its own flag)
                if filepath is None:
                    self._mark_project_modified()
                return True  

            else: # User cancelled confirmation
                return False

        except FileNotFoundError:
            messagebox.showerror("Open Error", f"File not found:\n{load_path}")
            return False
        except (
            struct.error,
            ValueError,
            EOFError,
        ) as e:  
            messagebox.showerror(
                "Open Palette Error",
                f"Invalid data, size, or format in palette file '{os.path.basename(load_path)}':\n{e}",
            )
            return False
        except Exception as e:
            messagebox.showerror(
                "Open Palette Error",
                f"Failed to open or parse palette file '{os.path.basename(load_path)}':\n{e}",
            )
            return False

    def save_tileset(self, filepath=None):
        """Saves the current tileset data to a binary file.
        Returns True on success, False on failure/cancel.
        If filepath is None, prompts the user.
        """
        global num_tiles_in_set, tileset_patterns, tileset_colors
        save_path = filepath
        if not save_path:
            save_path = filedialog.asksaveasfilename(
                defaultextension=".SC4Tiles",
                filetypes=[("MSX Tileset", "*.SC4Tiles"), ("All Files", "*.*")],
                title="Save Tileset As...",
            )
        if not save_path:
            return False

        try:
            with open(save_path, "wb") as f:
                # Write number of tiles
                num_byte = struct.pack("B", num_tiles_in_set)
                f.write(num_byte)
                # Write data for each tile
                for i in range(num_tiles_in_set):
                    # Write pattern data (8 bytes)
                    pattern = tileset_patterns[i]
                    for r in range(TILE_HEIGHT):
                        byte_val = 0
                        row_pattern = pattern[r]
                        for c in range(TILE_WIDTH):
                            if row_pattern[c] == 1:
                                byte_val = byte_val | (1 << (7 - c))
                        pattern_byte = struct.pack("B", byte_val)
                        f.write(pattern_byte)
                    # Write color data (8 bytes)
                    colors = tileset_colors[i]
                    for r in range(TILE_HEIGHT):
                        fg_idx, bg_idx = colors[r]
                        color_byte_val = ((fg_idx & 0x0F) << 4) | (bg_idx & 0x0F)
                        color_byte = struct.pack("B", color_byte_val)
                        f.write(color_byte)
            # Show success message ONLY if called directly by user
            if filepath is None:
                messagebox.showinfo(
                    "Save Successful",
                    f"Tileset saved successfully to {os.path.basename(save_path)}",
                )
            return True  # Indicate success
        except Exception as e:
            messagebox.showerror(
                "Save Tileset Error",
                f"Failed to save tileset file '{os.path.basename(save_path)}':\n{e}",
            )
            return False  # Indicate failure

    def open_tileset(self, filepath=None):
        """Loads tileset data from a binary file.
        Returns True on success, False on failure/cancel.
        If filepath is None, prompts the user.
        """
        global tileset_patterns, tileset_colors, current_tile_index, num_tiles_in_set, selected_tile_for_supertile
        load_path = filepath
        if not load_path:
            load_path = filedialog.askopenfilename(
                filetypes=[("MSX Tileset", "*.SC4Tiles"), ("All Files", "*.*")],
                title="Open Tileset",
            )
        if not load_path:
            return False

        try:
            with open(load_path, "rb") as f:
                num_tiles_byte = f.read(1)
                if not num_tiles_byte:
                    raise ValueError("File empty or missing tile count byte.")
                loaded_num_tiles = struct.unpack("B", num_tiles_byte)[0]
                if not (1 <= loaded_num_tiles <= MAX_TILES):
                    raise ValueError(
                        f"Invalid tile count in file: {loaded_num_tiles} (must be 1-{MAX_TILES})"
                    )

                new_patterns = [
                    [[0] * TILE_WIDTH for _r in range(TILE_HEIGHT)]
                    for _i in range(MAX_TILES)
                ]
                new_colors = [
                    [(WHITE_IDX, BLACK_IDX) for _r in range(TILE_HEIGHT)]
                    for _i in range(MAX_TILES)
                ]

                for i in range(loaded_num_tiles):
                    pattern_bytes = f.read(
                        TILE_HEIGHT
                    )  
                    if len(pattern_bytes) < TILE_HEIGHT:
                        raise EOFError(f"EOF pattern T:{i}")
                    for r_idx in range(TILE_HEIGHT): # Renamed r
                        byte_val = pattern_bytes[r_idx]  
                        for c in range(TILE_WIDTH):
                            pixel_bit = (byte_val >> (7 - c)) & 1
                            new_patterns[i][r_idx][c] = pixel_bit
                    color_bytes = f.read(TILE_HEIGHT)  
                    if len(color_bytes) < TILE_HEIGHT:
                        raise EOFError(f"EOF color T:{i}")
                    for r_idx in range(TILE_HEIGHT): # Renamed r
                        byte_val = color_bytes[r_idx]
                        fg_idx = (byte_val >> 4) & 0x0F
                        bg_idx = byte_val & 0x0F
                        if not (0 <= fg_idx < 16 and 0 <= bg_idx < 16):
                            print(
                                f"Warning: Invalid palette index T:{i} R:{r_idx} ({fg_idx},{bg_idx}). Using default."
                            )
                            new_colors[i][r_idx] = (WHITE_IDX, BLACK_IDX)
                        else:
                            new_colors[i][r_idx] = (fg_idx, bg_idx)

            confirm = True
            if filepath is None:  
                confirm = messagebox.askokcancel(
                    "Load Tileset",
                    f"Replace current tileset with {loaded_num_tiles} tile(s) from this file?",
                )

            if confirm:
                if self._clear_marked_unused(trigger_redraw=False):
                    pass # Full redraw will happen later
                
                tileset_patterns = new_patterns
                tileset_colors = new_colors
                num_tiles_in_set = loaded_num_tiles
                current_tile_index = max(
                    0, min(current_tile_index, num_tiles_in_set - 1)
                )
                selected_tile_for_supertile = max(
                    0, min(selected_tile_for_supertile, num_tiles_in_set - 1)
                )

                self.clear_all_caches()  
                self.invalidate_minimap_background_cache()
                self.update_all_displays(changed_level="all")
                self._update_editor_button_states()  
                self._update_edit_menu_state()  

                if filepath is None:
                    self.notebook.select(self.tab_tile_editor)
                    messagebox.showinfo(
                        "Load Successful",
                        f"Loaded {num_tiles_in_set} tiles from {os.path.basename(load_path)}",
                    )
                if filepath is None:
                    self._mark_project_modified()
                return True  
            else:
                return False  

        except FileNotFoundError:
            messagebox.showerror("Open Error", f"File not found:\n{load_path}")
            return False
        except (EOFError, ValueError, struct.error) as e:
            messagebox.showerror(
                "Open Tileset Error",
                f"Invalid data, size, or format in tileset file '{os.path.basename(load_path)}':\n{e}",
            )
            return False
        except Exception as e:
            messagebox.showerror(
                "Open Tileset Error",
                f"Failed to open or parse tileset file '{os.path.basename(load_path)}':\n{e}",
            )
            return False

    def save_supertiles(self, filepath=None):
        global num_supertiles, supertiles_data # supertiles_data is global
        save_path = filepath
        if not save_path:
            save_path = filedialog.asksaveasfilename(
                defaultextension=".SC4Super",
                filetypes=[("MSX Supertiles", "*.SC4Super"), ("All Files", "*.*")],
                title="Save Supertiles As...",
            )
        if not save_path:
            return False

        try:
            with open(save_path, "wb") as f:
                # Write count of supertiles
                f.write(struct.pack("B", num_supertiles))
                
                # Write supertile grid dimensions
                f.write(struct.pack("B", self.supertile_grid_width))
                f.write(struct.pack("B", self.supertile_grid_height))
                
                # Write data for each supertile
                for i in range(num_supertiles):
                    definition = supertiles_data[i] # Access global
                    # Basic check for consistency, though data should be correct by now
                    if len(definition) != self.supertile_grid_height or \
                       (self.supertile_grid_height > 0 and (len(definition[0]) != self.supertile_grid_width)):
                        # print(f"Warning: Supertile {i} has inconsistent dimensions during save. Attempting to save what's there.")
                        # This could lead to problems on load if not handled carefully.
                        # For robustness, one might choose to pad/truncate here, or skip saving this ST.
                        # For now, we proceed, assuming the loops below will handle "ragged" arrays gracefully
                        # by only iterating up to the project's self.supertile_grid_width/height.
                        pass


                    for r_st in range(self.supertile_grid_height):
                        # Handle case where definition might be shorter than expected (e.g. corrupted data)
                        if r_st < len(definition):
                            row_data = definition[r_st]
                            for c_st in range(self.supertile_grid_width):
                                if c_st < len(row_data):
                                    tile_index_val = row_data[c_st]
                                else: # Row is too short, pad with 0
                                    tile_index_val = 0
                                f.write(struct.pack("B", tile_index_val))
                        else: # Definition is too short in height, pad rows with 0s
                            for _ in range(self.supertile_grid_width):
                                f.write(struct.pack("B", 0))
            
            if filepath is None:
                messagebox.showinfo(
                    "Save Successful",
                    f"Supertiles saved successfully to {os.path.basename(save_path)}",
                )
            return True
        except Exception as e:
            messagebox.showerror(
                "Save Supertile Error",
                f"Failed to save supertiles file '{os.path.basename(save_path)}':\n{e}",
            )
            return False

    def open_supertiles(self, filepath=None):
        global supertiles_data, num_supertiles, current_supertile_index, selected_supertile_for_map, num_tiles_in_set
        load_path = filepath
        if not load_path:
            load_path = filedialog.askopenfilename(
                filetypes=[("MSX Supertiles", "*.SC4Super"), ("All Files", "*.*")],
                title="Open Supertiles",
            )
        if not load_path:
            return False

        try:
            loaded_grid_width_from_file = 0 # To store dimensions from file
            loaded_grid_height_from_file = 0
            loaded_num_st_from_file = 0
            
            # Temporary list to hold data read from file before committing to globals
            temp_supertiles_data_from_file = []


            with open(load_path, "rb") as f:
                num_st_byte = f.read(1)
                if not num_st_byte:
                    raise ValueError("File empty or missing supertile count.")
                loaded_num_st_from_file = struct.unpack("B", num_st_byte)[0]
                if not (0 <= loaded_num_st_from_file <= MAX_SUPERTILES): # Allow 0 for an empty set
                    raise ValueError(
                        f"Invalid supertile count in file: {loaded_num_st_from_file} (must be 0-{MAX_SUPERTILES})"
                    )
                if loaded_num_st_from_file == 0 : # Handle empty supertile set gracefully
                    # print("Info: Loaded empty supertile set (0 supertiles).")
                    loaded_grid_width_from_file = SUPERTILE_GRID_DIM # Use default if file is empty of STs
                    loaded_grid_height_from_file = SUPERTILE_GRID_DIM
                    # temp_supertiles_data_from_file will remain empty
                else: # Proceed to read dimensions and data if count > 0
                    dim_w_byte = f.read(1)
                    dim_h_byte = f.read(1)
                    if not dim_w_byte or not dim_h_byte:
                        raise ValueError("File missing supertile dimension bytes.")
                    
                    loaded_grid_width_from_file = struct.unpack("B", dim_w_byte)[0]
                    loaded_grid_height_from_file = struct.unpack("B", dim_h_byte)[0]

                    if not (1 <= loaded_grid_width_from_file <= 32 and 1 <= loaded_grid_height_from_file <= 32):
                        raise ValueError(f"Invalid supertile dimensions in file: {loaded_grid_width_from_file}x{loaded_grid_height_from_file}")

                    # Initialize temp_supertiles_data_from_file structure
                    temp_supertiles_data_from_file = [
                        [[0 for _c in range(loaded_grid_width_from_file)] for _r in range(loaded_grid_height_from_file)]
                        for _st in range(loaded_num_st_from_file) # Only for the count in file
                    ]
                    
                    bytes_per_tile_val = 1
                    tiles_in_one_def = loaded_grid_width_from_file * loaded_grid_height_from_file
                    bytes_per_def = tiles_in_one_def * bytes_per_tile_val

                    for i in range(loaded_num_st_from_file):
                        st_bytes_read = f.read(bytes_per_def)
                        if len(st_bytes_read) < bytes_per_def:
                            raise EOFError(f"EOF reading data for supertile {i}")
                        byte_idx_val = 0
                        for r_load in range(loaded_grid_height_from_file):
                            for c_load in range(loaded_grid_width_from_file):
                                tile_idx_read = st_bytes_read[byte_idx_val]
                                byte_idx_val += 1
                                if not (0 <= tile_idx_read < num_tiles_in_set):
                                    # print(f"Warning: Invalid Tile index {tile_idx_read} in Supertile {i} at [{r_load},{c_load}]. Resetting to 0.")
                                    temp_supertiles_data_from_file[i][r_load][c_load] = 0
                                else:
                                    temp_supertiles_data_from_file[i][r_load][c_load] = tile_idx_read
            
            # At this point, file reading is done or an error was raised.

            confirm_load = True
            if filepath is None: # Only ask if opening stand-alone file
                confirm_load = messagebox.askokcancel(
                    "Load Supertiles",
                    f"Replace current supertiles with {loaded_num_st_from_file} definition(s) from this file?\n(Dimensions: {loaded_grid_width_from_file}W x {loaded_grid_height_from_file}H)",
                )

            if confirm_load:
                if self._clear_marked_unused(trigger_redraw=False):
                    pass

                # --- Commit loaded data to application state ---
                self.supertile_grid_width = loaded_grid_width_from_file
                self.supertile_grid_height = loaded_grid_height_from_file
                
                # Re-initialize global supertiles_data to MAX_SUPERTILES with new dimensions, then fill from temp
                supertiles_data = [
                    [[0 for _c in range(self.supertile_grid_width)] for _r in range(self.supertile_grid_height)]
                    for _st_init in range(MAX_SUPERTILES)
                ]
                for i in range(loaded_num_st_from_file):
                    supertiles_data[i] = temp_supertiles_data_from_file[i]

                num_supertiles = loaded_num_st_from_file
                if num_supertiles == 0: # If loaded an empty set
                    num_supertiles = 1 # Ensure at least one supertile exists for the editor
                    # And ensure supertiles_data[0] is initialized correctly
                    supertiles_data[0] = [[0 for _c in range(self.supertile_grid_width)] for _r in range(self.supertile_grid_height)]


                current_supertile_index = max(0, min(current_supertile_index, num_supertiles - 1))
                selected_supertile_for_map = max(0, min(selected_supertile_for_map, num_supertiles - 1))

                self.supertile_image_cache.clear()
                self.invalidate_minimap_background_cache()
                
                self._reconfigure_supertile_definition_canvas() # Update canvas size
                self.update_all_displays(changed_level="all")
                self._update_editor_button_states()
                self._update_edit_menu_state()
                self._update_supertile_rotate_button_state() # Update rotate button state

                if filepath is None:
                    self.notebook.select(self.tab_supertile_editor)
                    messagebox.showinfo(
                        "Load Successful",
                        f"Loaded {num_supertiles} supertiles ({self.supertile_grid_width}x{self.supertile_grid_height}) from {os.path.basename(load_path)}",
                    )
                if filepath is None:
                    self._mark_project_modified()
                return True
            else: # User cancelled confirmation
                return False

        except FileNotFoundError:
            messagebox.showerror("Open Error", f"File not found:\n{load_path}")
            return False
        except (EOFError, ValueError, struct.error) as e:
            messagebox.showerror(
                "Open Supertile Error",
                f"Invalid data, size, or format in supertile file '{os.path.basename(load_path)}':\n{e}",
            )
            return False
        except Exception as e:
            messagebox.showerror(
                "Open Supertile Error",
                f"Failed to open or parse supertiles file '{os.path.basename(load_path)}':\n{e}",
            )
            return False

    def save_map(self, filepath=None):
        """Saves the current map data to a binary file.
        Returns True on success, False on failure/cancel.
        If filepath is None, prompts the user.
        """
        global map_width, map_height, map_data
        save_path = filepath
        if not save_path:
            save_path = filedialog.asksaveasfilename(
                defaultextension=".SC4Map",
                filetypes=[("MSX Map", "*.SC4Map"), ("All Files", "*.*")],
                title="Save Map As...",
            )
        if not save_path:
            return False

        try:
            with open(save_path, "wb") as f:
                # Write dimensions (Big-endian)
                dim_bytes = struct.pack(">HH", map_width, map_height)
                f.write(dim_bytes)
                # Write map data
                for r in range(map_height):
                    row_data = map_data[r]
                    for c in range(map_width):
                        supertile_index = row_data[c]
                        index_byte = struct.pack("B", supertile_index)
                        f.write(index_byte)
            # Show success message ONLY if called directly
            if filepath is None:
                messagebox.showinfo(
                    "Save Successful",
                    f"Map saved successfully to {os.path.basename(save_path)}",
                )
            return True  # Indicate success
        except Exception as e:
            messagebox.showerror(
                "Save Map Error",
                f"Failed to save map file '{os.path.basename(save_path)}':\n{e}",
            )
            return False  # Indicate failure

    def open_map(self, filepath=None):
        global map_data, map_width, map_height, num_supertiles
        load_path = filepath
        if not load_path:
            load_path = filedialog.askopenfilename(
                filetypes=[("MSX Map", "*.SC4Map"), ("All Files", "*.*")],
                title="Open Map",
            )
        if not load_path:
            return False

        try:
            loaded_w_map = 0
            loaded_h_map = 0
            new_map_data_from_file = [] # Temp storage

            with open(load_path, "rb") as f:
                dim_bytes = f.read(4)
                if len(dim_bytes) < 4:
                    raise ValueError("Invalid map header: not enough bytes for dimensions.")
                loaded_w_map, loaded_h_map = struct.unpack(">HH", dim_bytes)
                
                min_dim_map, max_dim_map = 1, 1024
                if not (min_dim_map <= loaded_w_map <= max_dim_map and min_dim_map <= loaded_h_map <= max_dim_map):
                    raise ValueError(f"Invalid map dimensions in file: {loaded_w_map}x{loaded_h_map} (must be {min_dim_map}-{max_dim_map} per side)")

                new_map_data_from_file = [[0 for _c in range(loaded_w_map)] for _r in range(loaded_h_map)]

                for r_map_load in range(loaded_h_map):
                    for c_map_load in range(loaded_w_map):
                        st_idx_byte_read = f.read(1)
                        if not st_idx_byte_read:
                            raise EOFError(f"EOF reading map data at row {r_map_load}, col {c_map_load}")
                        
                        supertile_index_val_read = struct.unpack("B", st_idx_byte_read)[0]
                        
                        if not (0 <= supertile_index_val_read < num_supertiles): # Validate against current num_supertiles
                             # print(f"Warning: Invalid Supertile index {supertile_index_val_read} in Map at [{r_map_load},{c_map_load}]. Max is {num_supertiles-1}. Resetting to 0.")
                             new_map_data_from_file[r_map_load][c_map_load] = 0
                        else:
                            new_map_data_from_file[r_map_load][c_map_load] = supertile_index_val_read
            
            # File reading complete or error raised

            confirm_load_map = True
            if filepath is None: # Only ask if opening stand-alone
                confirm_load_map = messagebox.askokcancel("Load Map", "Replace current map with data from this file?")

            if confirm_load_map:
                if self._clear_marked_unused(trigger_redraw=False):
                    pass

                map_width = loaded_w_map
                map_height = loaded_h_map
                map_data = new_map_data_from_file # Assign from temp

                self.invalidate_minimap_background_cache()
                # The change in supertile dimensions (from a previous open_supertiles) will affect map display
                self.update_all_displays(changed_level="all") 
                self._trigger_minimap_reconfigure()
                
                if filepath is None:
                    self.notebook.select(self.tab_map_editor)
                    messagebox.showinfo(
                        "Load Successful",
                        f"Loaded {map_width}x{map_height} map from {os.path.basename(load_path)}",
                    )
                if filepath is None:
                    self._mark_project_modified()
                return True
            else: # User cancelled
                return False

        except FileNotFoundError:
            messagebox.showerror("Open Error", f"File not found:\n{load_path}")
            return False
        except (EOFError, ValueError, struct.error) as e:
            messagebox.showerror(
                "Open Map Error",
                f"Invalid data, size, or format in map file '{os.path.basename(load_path)}':\n{e}",
            )
            return False
        except Exception as e:
            messagebox.showerror(
                "Open Map Error",
                f"Failed to open or parse map file '{os.path.basename(load_path)}':\n{e}",
            )
            return False

    # --- Project Save/Load Methods ---

    def save_project_as(self):
        """Prompts user for a base project name and saves all four component files."""
        # Ask for base path (user types name, selects directory)
        base_path = filedialog.asksaveasfilename(
            filetypes=[("MSX Project (Enter Base Name)", "*.*")],  # Filter description
            title="Save Project As (Enter Base Name)",
        )
        # Exit if cancelled
        if not base_path:
            return

        # Construct full paths for each component file
        pal_path = base_path + ".msxpal"
        til_path = base_path + ".SC4Tiles"
        sup_path = base_path + ".SC4Super"
        map_path = base_path + ".SC4Map"

        # Attempt to save all components sequentially
        # Use the modified save methods which return True/False
        # Stop saving if any component fails
        success = True
        if success:
            success = self.save_palette(pal_path)
        if success:
            success = self.save_tileset(til_path)
        if success:
            success = self.save_supertiles(sup_path)
        if success:
            success = self.save_map(map_path)

        # Update state and UI if all saves were successful
        if success:
            self.current_project_base_path = base_path  # Store the base path
            self.project_modified = False
            self._update_window_title()
        else:
            # Individual error messages should have been shown by the failing save_* method
            messagebox.showerror(
                "Project Save Error", "One or more project components failed to save."
            )

    def save_project(self):
        """Saves the project using the current base path, or calls Save As if none."""
        # Check if a project path is already known
        if self.current_project_base_path:
            base_path = self.current_project_base_path
            # Construct component paths
            pal_path = base_path + ".msxpal"
            til_path = base_path + ".SC4Tiles"
            sup_path = base_path + ".SC4Super"
            map_path = base_path + ".SC4Map"

            # Attempt to save all components
            success = True
            if success:
                success = self.save_palette(pal_path)
            if success:
                success = self.save_tileset(til_path)
            if success:
                success = self.save_supertiles(sup_path)
            if success:
                success = self.save_map(map_path)

            # Show appropriate message
            if success:
                self.project_modified = False
                self._update_window_title()
            else:
                messagebox.showerror(
                    "Project Save Error",
                    "One or more project components failed to save.",
                )
        else:
            # If no project path is known, act like "Save As..."
            self.save_project_as()

    def open_project(self):
        """Prompts user to select ONE project file, then loads all four components."""
        filepath = filedialog.askopenfilename(
            filetypes=[
                (
                    "MSX Tileset File (*.SC4Tiles)", # Default to a common component
                    "*.SC4Tiles",
                ),  
                ("MSX Palette File (*.msxpal)", "*.msxpal"),
                ("MSX Supertile File (*.SC4Super)", "*.SC4Super"),
                ("MSX Map File (*.SC4Map)", "*.SC4Map"),
                ("All Files", "*.*"),
            ],
            title="Open Project (Select Any Component File)",
        )
        if not filepath:
            return

        directory = os.path.dirname(filepath)
        base_name_with_ext = os.path.basename(filepath)
        base_name, _ = os.path.splitext(base_name_with_ext)
        base_path = os.path.join(directory, base_name)

        pal_path = base_path + ".msxpal"
        til_path = base_path + ".SC4Tiles"
        sup_path = base_path + ".SC4Super"
        map_path = base_path + ".SC4Map"

        missing_files = []
        if not os.path.exists(pal_path):
            missing_files.append(os.path.basename(pal_path))
        if not os.path.exists(til_path):
            missing_files.append(os.path.basename(til_path))
        if not os.path.exists(sup_path):
            missing_files.append(os.path.basename(sup_path))
        if not os.path.exists(map_path):
            missing_files.append(os.path.basename(map_path))

        if missing_files:
            messagebox.showerror(
                "Open Project Error",
                f"Cannot open project '{base_name}'.\n"
                f"Missing component file(s):\n" + "\n".join(missing_files),
            )
            return

        if self.project_modified:
            confirm_discard = messagebox.askokcancel(
                "Unsaved Changes",
                f"Discard current unsaved changes and open project '{base_name}'?",
                icon="warning"
            )
            if not confirm_discard:
                return
        
        self.is_ctrl_pressed = False
        self.is_shift_pressed = False
        self.current_mouse_action = None
        
        global tile_clipboard_pattern, tile_clipboard_colors, supertile_clipboard_data
        tile_clipboard_pattern = None
        tile_clipboard_colors = None
        supertile_clipboard_data = None
        self.map_clipboard_data = None
        self._clear_map_selection() 
        self._clear_paste_preview_rect() 

        # Clear marked unused state BEFORE loading new data
        self._clear_marked_unused(trigger_redraw=False)

        self.clear_all_caches()
        self.invalidate_minimap_background_cache()

        success = True
        print(f"Loading project '{base_name}'...")

        # Load palette first, then tileset (STs depend on tiles, Map depends on STs)
        if success:
            print(f"  Loading palette: {pal_path}")
            success = self.open_palette(pal_path)
        if success:
            print(f"  Loading tileset: {til_path}")
            success = self.open_tileset(til_path) # Needs num_tiles_in_set for ST validation
        if success:
            print(f"  Loading supertiles: {sup_path}")
            success = self.open_supertiles(sup_path) # Needs num_supertiles for Map validation
        if success:
            print(f"  Loading map: {map_path}")
            success = self.open_map(map_path)

        self.is_ctrl_pressed = False
        self.is_shift_pressed = False
        self.current_mouse_action = None
        
        if success:
            self.project_modified = False 
            self.current_project_base_path = base_path
            self._update_window_title()
            self._update_editor_button_states()
            self.notebook.select(self.tab_map_editor) 
            self.update_all_displays(changed_level="all")
            self._update_edit_menu_state()
            self.root.after(10, self._update_map_cursor) 
        else:
            messagebox.showerror(
                "Project Open Error",
                f"Failed to load one or more components for project '{base_name}'. The application state might be inconsistent.",
            )
            self.project_modified = True 
            self._update_window_title()
            self._update_editor_button_states()
            self.update_all_displays(changed_level="all")
            self._update_edit_menu_state()
            self.root.after(10, self._update_map_cursor)

    # --- Edit Menu Commands ---

    def set_tileset_size(self):
        global num_tiles_in_set, current_tile_index, selected_tile_for_supertile

        prompt = f"Enter number of tiles (1-{MAX_TILES}):"
        new_size_str = simpledialog.askstring(
            "Set Tileset Size", prompt, initialvalue=str(num_tiles_in_set)
        )

        if new_size_str:
            try:
                new_size = int(new_size_str)

                if not (1 <= new_size <= MAX_TILES):
                    messagebox.showerror(
                        "Invalid Size", f"Size must be between 1 and {MAX_TILES}."
                    )
                    return

                if new_size == num_tiles_in_set:
                    return

                reduced = new_size < num_tiles_in_set
                confirmed_resize = True # Renamed for clarity
                if reduced:
                    affected_supertiles_list = set() # Use a set to avoid duplicates
                    for del_idx_tile in range(new_size, num_tiles_in_set):
                        # _check_tile_usage uses self.supertile_grid_width/height internally
                        usage_list = self._check_tile_usage(del_idx_tile)
                        for st_idx_affected in usage_list:
                            affected_supertiles_list.add(st_idx_affected)

                    confirm_prompt_msg = f"Reducing size to {new_size} will discard tiles {new_size} to {num_tiles_in_set-1}."
                    if affected_supertiles_list:
                        confirm_prompt_msg += "\n\n*** WARNING! ***\nDiscarded tiles are used by Supertile(s):\n"
                        affected_list_sorted = sorted(list(affected_supertiles_list))
                        confirm_prompt_msg += ", ".join(map(str, affected_list_sorted[:10]))
                        if len(affected_list_sorted) > 10:
                            confirm_prompt_msg += "..."
                        confirm_prompt_msg += "\n\nReferences to discarded tiles in these Supertiles will be reset to Tile 0."

                    confirmed_resize = messagebox.askokcancel(
                        "Reduce Tileset Size", confirm_prompt_msg, icon="warning"
                    )

                if confirmed_resize:
                    if self._clear_marked_unused(trigger_redraw=False):
                        pass

                    self._mark_project_modified()

                    if reduced:
                        for del_idx_tile_loop in range(new_size, num_tiles_in_set):
                            # _update_supertile_refs_for_tile_change uses self.supertile_grid_width/height
                            self._update_supertile_refs_for_tile_change(
                                del_idx_tile_loop, "delete"
                            )
                            self._adjust_marked_indices_after_delete(self.marked_unused_tiles, del_idx_tile_loop)
                        for i in range(new_size, num_tiles_in_set):
                            self.invalidate_tile_cache(i) # Invalidate cache for tiles being removed from active set
                        
                        # Trim the lists
                        del tileset_patterns[new_size:]
                        del tileset_colors[new_size:]
                        # Ensure they are padded back to MAX_TILES if that's the desired behavior for fixed-size arrays
                        # For dynamic Python lists, this just shortens them.
                        # If MAX_TILES is a hard limit for array indexing elsewhere, pad them:
                        # while len(tileset_patterns) < MAX_TILES:
                        #     tileset_patterns.append([[0]*TILE_WIDTH for _r in range(TILE_HEIGHT)])
                        #     tileset_colors.append([(WHITE_IDX, BLACK_IDX) for _r in range(TILE_HEIGHT)])


                    elif new_size > num_tiles_in_set: # Increasing size
                        # Add new blank tiles up to new_size, but not exceeding MAX_TILES
                        tiles_to_add = new_size - num_tiles_in_set
                        for _ in range(tiles_to_add):
                            if len(tileset_patterns) < MAX_TILES: # Check against actual list capacity
                                tileset_patterns.append(
                                    [[0] * TILE_WIDTH for _r in range(TILE_HEIGHT)]
                                )
                                tileset_colors.append(
                                    [(WHITE_IDX, BLACK_IDX) for _r in range(TILE_HEIGHT)]
                                )
                            else: # Should not happen if new_size <= MAX_TILES
                                break 
                    
                    num_tiles_in_set = new_size # Update the count of active tiles

                    current_tile_index = max(0, min(current_tile_index, num_tiles_in_set - 1))
                    selected_tile_for_supertile = max(0, min(selected_tile_for_supertile, num_tiles_in_set - 1))

                    self.clear_all_caches()
                    self.invalidate_minimap_background_cache()
                    self.update_all_displays(changed_level="all")
                    self._update_editor_button_states()
                    self._update_edit_menu_state()

            except ValueError:
                messagebox.showerror("Invalid Input", "Please enter a valid whole number.")
            except Exception as e:
                messagebox.showerror("Error", f"An error occurred: {e}")
                # print(f"Error setting tileset size: {e}")

    def set_supertile_count(self):
        global num_supertiles, current_supertile_index, selected_supertile_for_map

        prompt = f"Enter number of supertiles (1-{MAX_SUPERTILES}):"
        new_count_str = simpledialog.askstring(
            "Set Supertile Count", prompt, initialvalue=str(num_supertiles)
        )

        if new_count_str:
            try:
                new_count = int(new_count_str)

                if not (1 <= new_count <= MAX_SUPERTILES):
                    messagebox.showerror(
                        "Invalid Count",
                        f"Count must be between 1 and {MAX_SUPERTILES}.",
                    )
                    return

                if new_count == num_supertiles:
                    return

                reduced_count = new_count < num_supertiles # Renamed for clarity
                confirmed_st_resize = True # Renamed
                if reduced_count:
                    affected_map_cells_list = []
                    for del_idx_st in range(new_count, num_supertiles):
                        usage_on_map = self._check_supertile_usage(del_idx_st)
                        affected_map_cells_list.extend(usage_on_map)

                    confirm_prompt_st = f"Reducing count to {new_count} will discard supertiles {new_count} to {num_supertiles-1}."
                    if affected_map_cells_list: # Check if list is not empty
                        confirm_prompt_st += "\n\n*** WARNING! ***\nDiscarded supertiles are used on the Map."
                        confirm_prompt_st += (
                            "\n\nReferences on the Map will be reset to Supertile 0."
                        )

                    confirmed_st_resize = messagebox.askokcancel(
                        "Reduce Supertile Count", confirm_prompt_st, icon="warning"
                    )

                if confirmed_st_resize:
                    if self._clear_marked_unused(trigger_redraw=False):
                        pass

                    self._mark_project_modified()

                    if reduced_count:
                        for del_idx_st_loop in range(new_count, num_supertiles):
                            self._update_map_refs_for_supertile_change(
                                del_idx_st_loop, "delete"
                            )
                            self._adjust_marked_indices_after_delete(self.marked_unused_supertiles, del_idx_st_loop)
                        
                        # Trim the supertiles_data list
                        del supertiles_data[new_count:]
                        # Pad back to MAX_SUPERTILES if it's meant to be fixed-size array for indexing
                        # For dynamic lists, this just shortens.
                        # If padding:
                        # while len(supertiles_data) < MAX_SUPERTILES:
                        #    supertiles_data.append(
                        #        [[0] * self.supertile_grid_width for _r in range(self.supertile_grid_height)]
                        #    )


                    elif new_count > num_supertiles: # Increasing count
                        st_to_add = new_count - num_supertiles
                        for _ in range(st_to_add):
                            if len(supertiles_data) < MAX_SUPERTILES:
                                supertiles_data.append(
                                    [[0] * self.supertile_grid_width for _r_add in range(self.supertile_grid_height)]
                                )
                            else: # Should not happen if new_count <= MAX_SUPERTILES
                                break
                    
                    num_supertiles = new_count # Update active count

                    current_supertile_index = max(0, min(current_supertile_index, num_supertiles - 1))
                    selected_supertile_for_map = max(0, min(selected_supertile_for_map, num_supertiles - 1))

                    self.supertile_image_cache.clear()
                    self.invalidate_minimap_background_cache()
                    self.update_all_displays(
                        changed_level="all" # Changed to all for safety if map refs changed
                    )
                    self._update_editor_button_states()
                    self._update_edit_menu_state()
                    self._update_supertile_rotate_button_state() # Though ST count doesn't change W/H


            except ValueError:
                messagebox.showerror("Invalid Input", "Please enter a valid whole number.")
            except Exception as e:
                messagebox.showerror("Error", f"An error occurred: {e}")
                # print(f"Error setting supertile count: {e}")

    def set_map_dimensions(self):
        global map_width, map_height, map_data

        prompt = "Enter new dimensions (Width x Height):"
        dims_str = simpledialog.askstring(
            "Set Map Dimensions", prompt, initialvalue=f"{map_width}x{map_height}"
        )

        if dims_str:
            try:
                parts = dims_str.lower().split("x")
                if len(parts) != 2:
                    raise ValueError("Format must be WidthxHeight")

                new_w_str = parts[0].strip()
                new_h_str = parts[1].strip()
                new_w = int(new_w_str)
                new_h = int(new_h_str)

                min_dim, max_dim = 1, 1024
                if not (min_dim <= new_w <= max_dim):
                    raise ValueError(f"Width must be between {min_dim} and {max_dim}")
                if not (min_dim <= new_h <= max_dim):
                    raise ValueError(f"Height must be between {min_dim} and {max_dim}")

                if new_w == map_width and new_h == map_height:
                    return  

                reducing = new_w < map_width or new_h < map_height
                confirmed = True  
                if reducing:
                    confirm_prompt = "Reducing map size will discard data outside boundaries. Proceed?"
                    confirmed = messagebox.askokcancel("Resize Map", confirm_prompt)

                if confirmed:
                    if self._clear_marked_unused(trigger_redraw=False):
                        pass
                    self._mark_project_modified()
                    new_map_data = [[0 for _ in range(new_w)] for _ in range(new_h)]
                    rows_to_copy = min(map_height, new_h)
                    cols_to_copy = min(map_width, new_w)
                    for r_idx in range(rows_to_copy): # Renamed r
                        for c_idx in range(cols_to_copy): # Renamed c
                            new_map_data[r_idx][c_idx] = map_data[r_idx][c_idx]

                    map_width = new_w
                    map_height = new_h
                    map_data = new_map_data

                    self.update_all_displays(changed_level="map")
                    self._trigger_minimap_reconfigure()  

            except ValueError as e:
                messagebox.showerror("Invalid Input", f"Error setting dimensions: {e}")
            except Exception as e:
                messagebox.showerror(
                    "Error", f"An unexpected error occurred during resize: {e}"
                )

    def clear_current_tile(self):
        global tileset_patterns, tileset_colors, current_tile_index, WHITE_IDX, BLACK_IDX
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        prompt = f"Clear pattern and reset colors for tile {current_tile_index}?"
        if messagebox.askokcancel("Clear Tile", prompt):
            if self._clear_marked_unused(trigger_redraw=False):
                self.update_all_displays(changed_level="all") 

            self._mark_project_modified()
            tileset_patterns[current_tile_index] = [
                [0] * TILE_WIDTH for _ in range(TILE_HEIGHT)
            ]
            tileset_colors[current_tile_index] = [
                (WHITE_IDX, BLACK_IDX) for _ in range(TILE_HEIGHT)
            ]
            self.invalidate_tile_cache(current_tile_index)
            if not (self.marked_unused_tiles or self.marked_unused_supertiles):
                self.update_all_displays(changed_level="tile")

    def clear_current_supertile(self):
        global supertiles_data, current_supertile_index # supertiles_data is global
        if not (0 <= current_supertile_index < num_supertiles):
            return
        prompt = f"Clear definition (set all to tile 0) for supertile {current_supertile_index}?"
        if messagebox.askokcancel("Clear Supertile", prompt):
            if self._clear_marked_unused(trigger_redraw=False):
                self.update_all_displays(changed_level="all")

            self._mark_project_modified()
            # Initialize with current project's supertile dimensions
            supertiles_data[current_supertile_index] = [
                [0 for _c in range(self.supertile_grid_width)] for _r in range(self.supertile_grid_height)
            ]
            self.invalidate_supertile_cache(current_supertile_index)
            if not (self.marked_unused_tiles or self.marked_unused_supertiles): # If no marks were present
                self.update_all_displays(changed_level="supertile")
            else: # If marks were cleared, a full redraw (from above) already handled it or will.
                  # To be safe, if this branch is hit, ensure the supertile tab is updated.
                self.update_all_displays(changed_level="supertile")

    def clear_map(self):
        global map_data, map_width, map_height
        prompt = "Clear entire map (set all to supertile 0)?"
        if messagebox.askokcancel("Clear Map", prompt):
            if self._clear_marked_unused(trigger_redraw=False):
                self.update_all_displays(changed_level="all")

            self._mark_project_modified()
            map_data = [[0 for _ in range(map_width)] for _ in range(map_height)]
            self.invalidate_minimap_background_cache()
            if not (self.marked_unused_tiles or self.marked_unused_supertiles):
                self.update_all_displays(changed_level="map")

    def copy_current_tile(self):
        global tile_clipboard_pattern, tile_clipboard_colors, current_tile_index, num_tiles_in_set, tileset_patterns, tileset_colors
        if not (0 <= current_tile_index < num_tiles_in_set):
            messagebox.showwarning("Copy Tile", "No valid tile selected.")
            return
        tile_clipboard_pattern = copy.deepcopy(tileset_patterns[current_tile_index])
        tile_clipboard_colors = copy.deepcopy(tileset_colors[current_tile_index])
        print(f"Tile {current_tile_index} copied.")
        self._update_edit_menu_state()

    def paste_tile(self):
        global tile_clipboard_pattern, tile_clipboard_colors, current_tile_index, num_tiles_in_set, tileset_patterns, tileset_colors
        if tile_clipboard_pattern is None or tile_clipboard_colors is None:
            messagebox.showinfo("Paste Tile", "Tile clipboard is empty.")
            return
        if not (0 <= current_tile_index < num_tiles_in_set):
            messagebox.showwarning("Paste Tile", "No valid tile selected to paste onto.") # Clarified message
            return
        
        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        self._mark_project_modified()
        tileset_patterns[current_tile_index] = copy.deepcopy(tile_clipboard_pattern)
        tileset_colors[current_tile_index] = copy.deepcopy(tile_clipboard_colors)
        self.invalidate_tile_cache(current_tile_index)
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="tile")
        print(f"Pasted onto Tile {current_tile_index}.")

    def copy_current_supertile(self):
        global supertile_clipboard_data, current_supertile_index, num_supertiles, supertiles_data
        if not (0 <= current_supertile_index < num_supertiles):
            messagebox.showwarning("Copy Supertile", "No valid supertile selected.")
            return
        
        # The clipboard will store a definition matching current project's ST dimensions
        supertile_clipboard_data = copy.deepcopy(
            supertiles_data[current_supertile_index] # supertiles_data is global
        )
        # Store dimensions with clipboard data for safer paste
        if hasattr(self, 'supertile_grid_width') and hasattr(self, 'supertile_grid_height'):
             # This is a good idea, but supertile_clipboard_data is just the list of lists currently.
             # To store dimensions, we'd need to change it to a dictionary:
             # self.supertile_clipboard_data_with_dims = {
             #    "width": self.supertile_grid_width,
             #    "height": self.supertile_grid_height,
             #    "data": copy.deepcopy(supertiles_data[current_supertile_index])
             # }
             # For now, sticking to existing global structure of supertile_clipboard_data.
             # Paste operation will assume clipboard data matches current project ST dimensions.
             pass

        print(f"Supertile {current_supertile_index} copied.")
        self._update_edit_menu_state()

    def paste_supertile(self):
        global supertile_clipboard_data, current_supertile_index, num_supertiles, supertiles_data
        if supertile_clipboard_data is None:
            messagebox.showinfo("Paste Supertile", "Supertile clipboard is empty.")
            return
        if not (0 <= current_supertile_index < num_supertiles):
            messagebox.showwarning("Paste Supertile", "No valid supertile selected to paste onto.")
            return
        
        # --- Optional: Check for dimension mismatch if clipboard stored them ---
        # if hasattr(self, 'supertile_clipboard_data_with_dims'): # If clipboard was a dict
        #     clip_w = self.supertile_clipboard_data_with_dims["width"]
        #     clip_h = self.supertile_clipboard_data_with_dims["height"]
        #     clip_data_actual = self.supertile_clipboard_data_with_dims["data"]
        #     if clip_w != self.supertile_grid_width or clip_h != self.supertile_grid_height:
        #         if not messagebox.askokcancel("Dimension Mismatch",
        #             f"Clipboard ST is {clip_w}x{clip_h}, current project STs are {self.supertile_grid_width}x{self.supertile_grid_height}.\n"
        #             "Pasting may result in data truncation or padding. Continue?"):
        #             return
        #         # If continuing, would need logic to crop/pad clip_data_actual to fit current dimensions
        #         # For now, we assume direct copy of structure.
        #         # This is a placeholder for more advanced handling.
        # else:
        #     clip_data_actual = supertile_clipboard_data # Use as is

        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        # Direct copy of list structure. Assumes dimensions match.
        # If clipboard_data is from a different ST dimension, this could lead to issues.
        try:
            # Check clipboard structure against current supertile dimensions
            # This is a basic check; more robust would be deep comparison or explicit padding/truncation.
            if len(supertile_clipboard_data) == self.supertile_grid_height and \
               (self.supertile_grid_height == 0 or (self.supertile_grid_width > 0 and len(supertile_clipboard_data[0]) == self.supertile_grid_width) or self.supertile_grid_width == 0):
                supertiles_data[current_supertile_index] = copy.deepcopy(
                    supertile_clipboard_data # Global clipboard data
                )
                self._mark_project_modified()
                self.invalidate_supertile_cache(current_supertile_index)
                self.invalidate_minimap_background_cache()
                if not (self.marked_unused_tiles or self.marked_unused_supertiles):
                    self.update_all_displays(changed_level="supertile")
                else:
                    self.update_all_displays(changed_level="supertile") # Ensure supertile tab is updated
                print(f"Pasted onto Supertile {current_supertile_index}.")
            else:
                messagebox.showerror("Paste Error", "Supertile clipboard dimensions do not match current project supertile dimensions. Paste aborted.")
                # If marks were cleared but paste failed, redraw to reflect current state
                if self.marked_unused_tiles or self.marked_unused_supertiles:
                     self.update_all_displays(changed_level="all")

        except Exception as e:
            messagebox.showerror("Paste Error", f"Could not paste supertile data due to structure mismatch or error: {e}")
            # If marks were cleared but paste failed
            if self.marked_unused_tiles or self.marked_unused_supertiles:
                 self.update_all_displays(changed_level="all")

    def add_new_tile(self):
        global num_tiles_in_set, current_tile_index, WHITE_IDX, BLACK_IDX
        if num_tiles_in_set >= MAX_TILES:
            messagebox.showwarning("Maximum Tiles", f"Max {MAX_TILES} tiles reached.")
            return
        num_tiles_in_set += 1
        new_tile_idx = num_tiles_in_set - 1
        self._mark_project_modified()
        tileset_patterns[new_tile_idx] = [[0] * TILE_WIDTH for _ in range(TILE_HEIGHT)]
        tileset_colors[new_tile_idx] = [
            (WHITE_IDX, BLACK_IDX) for _ in range(TILE_HEIGHT)
        ]
        current_tile_index = new_tile_idx
        self.update_all_displays(changed_level="tile")
        self.scroll_viewers_to_tile(current_tile_index)

    def add_new_supertile(self):
        global num_supertiles, current_supertile_index, supertiles_data # supertiles_data is global
        if num_supertiles >= MAX_SUPERTILES:
            messagebox.showwarning(
                "Maximum Supertiles", f"Max {MAX_SUPERTILES} supertiles reached."
            )
            return
        
        if self._clear_marked_unused(trigger_redraw=False): # Clear marks before adding
            pass # Redraw will happen as part of update_all_displays

        num_supertiles += 1
        new_st_idx = num_supertiles - 1
        self._mark_project_modified()
        
        # Initialize new supertile with current project dimensions
        # supertiles_data is pre-allocated to MAX_SUPERTILES length.
        # We just need to set the definition for the new active supertile.
        if new_st_idx < len(supertiles_data): # Should always be true if num_supertiles <= MAX_SUPERTILES
            supertiles_data[new_st_idx] = [
                [0 for _c in range(self.supertile_grid_width)] for _r in range(self.supertile_grid_height)
            ]
        else:
            # This case means MAX_SUPERTILES was exceeded by num_supertiles increment,
            # which should be caught by the check at the beginning.
            # However, as a safeguard if supertiles_data wasn't fully pre-allocated:
            # supertiles_data.append([
            #    [0 for _c in range(self.supertile_grid_width)] for _r in range(self.supertile_grid_height)
            # ])
            print(f"Error: Attempted to add supertile beyond allocated 'supertiles_data' list size. Index: {new_st_idx}")
            num_supertiles -=1 # Revert count
            return


        current_supertile_index = new_st_idx
        
        self.supertile_image_cache.clear() # New ST might affect others if they were copies
        self.invalidate_minimap_background_cache() # Map data might change if this ST is used
        self.update_all_displays(changed_level="all") # Update all displays
        self.scroll_selectors_to_supertile(current_supertile_index)
        self._update_editor_button_states()
        self._update_supertile_rotate_button_state() # Though adding doesn't change W/H
        print(f"Added new supertile {new_st_idx}")

    # ... (shift methods unchanged) ...
    def shift_tile_up(self):
        global tileset_patterns, tileset_colors, current_tile_index, num_tiles_in_set
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        current_pattern = tileset_patterns[current_tile_index]
        current_colors = tileset_colors[current_tile_index]
        first_pattern_row = current_pattern[0]
        first_color_row = current_colors[0]
        for i in range(TILE_HEIGHT - 1):
            current_pattern[i] = current_pattern[i + 1]
            current_colors[i] = current_colors[i + 1]
        current_pattern[TILE_HEIGHT - 1] = first_pattern_row
        current_colors[TILE_HEIGHT - 1] = first_color_row
        self.invalidate_tile_cache(current_tile_index)
        self.update_all_displays(changed_level="tile")
        print(f"Tile {current_tile_index} shifted up.")

    def shift_tile_down(self):
        global tileset_patterns, tileset_colors, current_tile_index, num_tiles_in_set
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        current_pattern = tileset_patterns[current_tile_index]
        current_colors = tileset_colors[current_tile_index]
        last_pattern_row = current_pattern[TILE_HEIGHT - 1]
        last_color_row = current_colors[TILE_HEIGHT - 1]
        for i in range(TILE_HEIGHT - 1, 0, -1):
            current_pattern[i] = current_pattern[i - 1]
            current_colors[i] = current_colors[i - 1]
        current_pattern[0] = last_pattern_row
        current_colors[0] = last_color_row
        self.invalidate_tile_cache(current_tile_index)
        self.update_all_displays(changed_level="tile")
        print(f"Tile {current_tile_index} shifted down.")

    def shift_tile_left(self):
        global tileset_patterns, current_tile_index, num_tiles_in_set
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        current_pattern = tileset_patterns[current_tile_index]
        for r in range(TILE_HEIGHT):
            row_data = current_pattern[r]
            if TILE_WIDTH > 0:
                first_pixel = row_data[0]
            for c in range(TILE_WIDTH - 1):
                row_data[c] = row_data[c + 1]
            row_data[TILE_WIDTH - 1] = first_pixel
        self.invalidate_tile_cache(current_tile_index)
        self.update_all_displays(changed_level="tile")
        print(f"Tile {current_tile_index} shifted left.")

    def shift_tile_right(self):
        global tileset_patterns, current_tile_index, num_tiles_in_set
        if not (0 <= current_tile_index < num_tiles_in_set):
            return
        current_pattern = tileset_patterns[current_tile_index]
        for r in range(TILE_HEIGHT):
            row_data = current_pattern[r]
            if TILE_WIDTH > 0:
                last_pixel = row_data[TILE_WIDTH - 1]
            for c in range(TILE_WIDTH - 1, 0, -1):
                row_data[c] = row_data[c - 1]
            row_data[0] = last_pixel
        self.invalidate_tile_cache(current_tile_index)
        self.update_all_displays(changed_level="tile")
        print(f"Tile {current_tile_index} shifted right.")

    # --- Zoom Methods ---
    def change_map_zoom_mult(self, factor):  # Renamed from change_map_zoom
        """Applies multiplicative zoom, centered on the current canvas center."""
        canvas = self.map_canvas
        view_x1, view_y1, view_x2, view_y2 = (
            canvas.xview()[0],
            canvas.yview()[0],
            canvas.xview()[1],
            canvas.yview()[1],
        )
        center_x_canvas = canvas.canvasx(
            (canvas.winfo_width() / 2)
        )  # Approximation of center
        center_y_canvas = canvas.canvasy((canvas.winfo_height() / 2))
        self.zoom_map_at_point(factor, center_x_canvas, center_y_canvas)

    def set_map_zoom(self, new_zoom_level):
        """Sets absolute zoom level, centered on current canvas center."""
        min_zoom, max_zoom = 0.1, 6.0  # New limits
        safe_zoom = max(min_zoom, min(max_zoom, float(new_zoom_level)))
        current_zoom = self.map_zoom_level
        if abs(current_zoom - safe_zoom) > 1e-9:  # Avoid floating point noise
            factor = safe_zoom / current_zoom if current_zoom > 1e-9 else 1.0
            canvas = self.map_canvas
            center_x_canvas = canvas.canvasx(canvas.winfo_width() / 2)
            center_y_canvas = canvas.canvasy(canvas.winfo_height() / 2)
            self.zoom_map_at_point(factor, center_x_canvas, center_y_canvas)

    def get_zoomed_tile_size(self):
        """Calculates the current TILE size based on 8x8 base and zoom."""
        base_tile_size = 8  # 100% zoom = 8 pixels
        zoomed_size = base_tile_size * self.map_zoom_level
        return max(1, int(zoomed_size))  # Ensure at least 1 pixel

    def zoom_map_at_point(self, factor, zoom_x_canvas, zoom_y_canvas):
        """Zooms the map by 'factor', keeping the point (zoom_x/y_canvas) stationary,
        and clamps scroll to prevent gaps and ensure edges align correctly."""
        canvas = self.map_canvas
        current_zoom = self.map_zoom_level
        min_zoom, max_zoom = 0.1, 6.0
        new_zoom = max(min_zoom, min(max_zoom, current_zoom * factor))

        # Only proceed if zoom actually changes significantly
        if abs(new_zoom - current_zoom) < 1e-9:
            return

        # --- 1. Get map coordinates under cursor BEFORE zoom ---
        map_coord_x_at_cursor = canvas.canvasx(zoom_x_canvas)
        map_coord_y_at_cursor = canvas.canvasy(zoom_y_canvas)

        # --- 2. Update zoom level ---
        scale_change = new_zoom / current_zoom
        self.map_zoom_level = new_zoom  # Update state

        # --- 3. Calculate IDEAL scroll position (absolute pixels) for zoom-to-cursor ---
        # The map point map_coord_x_at_cursor should end up at the screen
        # position zoom_x_canvas after zooming.
        new_map_coord_x = map_coord_x_at_cursor * scale_change
        new_map_coord_y = map_coord_y_at_cursor * scale_change

        # Ideal absolute coordinate for the viewport's top-left (scroll position):
        ideal_scroll_x_abs = new_map_coord_x - zoom_x_canvas
        ideal_scroll_y_abs = new_map_coord_y - zoom_y_canvas

        # --- 4. Calculate new total map dimensions and widget size ---
        zoomed_tile_size_new = (
            self.get_zoomed_tile_size()
        )  # Uses updated self.map_zoom_level
        map_total_pixel_width_new = (
            map_width * SUPERTILE_GRID_DIM * zoomed_tile_size_new
        )
        map_total_pixel_height_new = (
            map_height * SUPERTILE_GRID_DIM * zoomed_tile_size_new
        )

        # Ensure dimensions are at least 1 for calculations
        safe_map_width = max(1.0, map_total_pixel_width_new)
        safe_map_height = max(1.0, map_total_pixel_height_new)

        canvas_widget_width = canvas.winfo_width()
        canvas_widget_height = canvas.winfo_height()

        # --- 5. Calculate the MAXIMUM possible scroll position (absolute pixels) ---
        # This is how far the top-left corner can move from (0,0) before the
        # map's right/bottom edge hits the canvas's right/bottom edge.
        # If map is smaller than canvas, max scroll is 0.
        max_scroll_x_abs = max(0.0, map_total_pixel_width_new - canvas_widget_width)
        max_scroll_y_abs = max(0.0, map_total_pixel_height_new - canvas_widget_height)

        # --- 6. Clamp the IDEAL scroll position to the valid range [0, max_scroll_abs] ---
        final_scroll_x_abs = max(0.0, min(ideal_scroll_x_abs, max_scroll_x_abs))
        final_scroll_y_abs = max(0.0, min(ideal_scroll_y_abs, max_scroll_y_abs))

        # --- 7. Convert the FINAL absolute clamped scroll position to fractions ---
        # This handles the case where the map is smaller than the canvas automatically,
        # because max_scroll_x_abs/max_scroll_y_abs would be 0, clamping final_scroll_*_abs to 0.
        # The fraction is relative to the total map size.
        final_x_fraction = final_scroll_x_abs / safe_map_width
        final_y_fraction = final_scroll_y_abs / safe_map_height

        # --- 8. Apply the FINAL definite scroll position using moveto ---
        # Ensure fractions are within [0, 1] just in case of float issues, although clamping should handle it.
        canvas.xview_moveto(max(0.0, min(1.0, final_x_fraction)))
        canvas.yview_moveto(max(0.0, min(1.0, final_y_fraction)))

        # --- 9. Final Redraw ---
        # Redraw the map. This uses the final scroll position set by moveto
        # and updates the scrollregion based on the new total map dimensions.
        self.draw_map_canvas()

        # Update the minimap viewport
        self.draw_minimap()

    def handle_map_zoom_scroll(self, event):
        """Handles Ctrl+MouseWheel zooming, centered on cursor."""
        factor = 0.0
        # Determine zoom direction and set multiplicative factor
        if event.num == 4 or event.delta > 0:  # Zoom In
            factor = 1.1  # Smaller steps often feel better for scroll wheel
        elif event.num == 5 or event.delta < 0:  # Zoom Out
            factor = 1 / 1.1
        else:
            return  # Ignore other wheel events

        # Get mouse position relative to canvas content (scrolled coords)
        canvas = self.map_canvas
        zoom_x_canvas = canvas.canvasx(event.x)
        zoom_y_canvas = canvas.canvasy(event.y)

        # Perform zoom centered on the cursor
        self.zoom_map_at_point(factor, zoom_x_canvas, zoom_y_canvas)

    # --- Scrolling Methods ---

    def scroll_viewers_to_tile(self, tile_index):
        """Scrolls the tileset viewers to make the specified tile index visible."""
        # Basic input validation
        if tile_index < 0:
            return

        # Define layout parameters
        padding = 1
        tile_size = VIEWER_TILE_SIZE
        items_per_row = NUM_TILES_ACROSS

        # Calculate target row and y-coordinate
        row, _ = divmod(tile_index, items_per_row)
        target_y = row * (tile_size + padding)

        # --- Scroll main viewer ---
        canvas_main = self.tileset_canvas
        try:
            # Get scroll region info (might be tuple or string)
            scroll_info_tuple = canvas_main.cget("scrollregion")
            # Convert to string and split for consistent parsing
            scroll_info = str(scroll_info_tuple).split()

            # Check if format is valid ("0 0 width height")
            if len(scroll_info) == 4:
                # Extract total height
                total_height = float(scroll_info[3])

                # Avoid division by zero
                if total_height > 0:
                    # Calculate scroll fraction
                    fraction = target_y / total_height
                    # Clamp fraction to valid range [0.0, 1.0]
                    clamped_fraction = min(1.0, max(0.0, fraction))
                    # Perform the scroll
                    canvas_main.yview_moveto(clamped_fraction)
            # else: (Optional: handle invalid scrollregion format if needed)
            #     print(f"Warning: Invalid scrollregion format for main tileset viewer: {scroll_info}")

        except Exception as e:
            # Catch any error during scrolling
            print(f"Error scrolling main tileset viewer: {e}")

        # --- Scroll Supertile tab's viewer ---
        canvas_st = self.st_tileset_canvas
        try:
            scroll_info_st_tuple = canvas_st.cget("scrollregion")
            scroll_info_st = str(scroll_info_st_tuple).split()

            if len(scroll_info_st) == 4:
                total_height_st = float(scroll_info_st[3])

                if total_height_st > 0:
                    fraction_st = target_y / total_height_st
                    clamped_fraction_st = min(1.0, max(0.0, fraction_st))
                    canvas_st.yview_moveto(clamped_fraction_st)
            # else:
            #     print(f"Warning: Invalid scrollregion format for ST tileset viewer: {scroll_info_st}")

        except Exception as e:
            print(f"Error scrolling ST tileset viewer: {e}")

    def scroll_selectors_to_supertile(self, supertile_index):
        """Scrolls the supertile selectors to make the specified index visible."""
        # Basic input validation
        if supertile_index < 0:
            return

        # Define layout parameters
        padding = 1
        item_size = SUPERTILE_SELECTOR_PREVIEW_SIZE
        items_per_row = NUM_SUPERTILES_ACROSS

        # Calculate target row and y-coordinate
        row, _ = divmod(supertile_index, items_per_row)
        target_y = row * (item_size + padding)

        # --- Scroll Supertile tab's selector ---
        canvas_st = self.supertile_selector_canvas
        try:
            scroll_info_tuple = canvas_st.cget("scrollregion")
            scroll_info = str(scroll_info_tuple).split()

            if len(scroll_info) == 4:
                total_height = float(scroll_info[3])

                if total_height > 0:
                    fraction = target_y / total_height
                    clamped_fraction = min(1.0, max(0.0, fraction))
                    canvas_st.yview_moveto(clamped_fraction)
            # else:
            #     print(f"Warning: Invalid scrollregion format for ST selector: {scroll_info}")

        except Exception as e:
            print(f"Error scrolling ST selector: {e}")

        # --- Scroll Map tab's selector ---
        canvas_map = self.map_supertile_selector_canvas
        try:
            scroll_info_map_tuple = canvas_map.cget("scrollregion")
            scroll_info_map = str(scroll_info_map_tuple).split()

            if len(scroll_info_map) == 4:
                total_height_map = float(scroll_info_map[3])

                if total_height_map > 0:
                    fraction_map = target_y / total_height_map
                    clamped_fraction_map = min(1.0, max(0.0, fraction_map))
                    canvas_map.yview_moveto(clamped_fraction_map)
            # else:
            #     print(f"Warning: Invalid scrollregion format for Map selector: {scroll_info_map}")

        except Exception as e:
            print(f"Error scrolling Map selector: {e}")

    # --- vvv NEW Grid/Window Handlers vvv ---
    def toggle_supertile_grid(self):
        """Callback for the supertile grid checkbutton."""
        self.draw_map_canvas()  # Redraw map to show/hide grid

    def toggle_window_view(self):
        """Callback for the window view checkbutton."""
        self.draw_map_canvas()  # Redraw map to show/hide window view
        self.draw_minimap()

    def cycle_grid_color(self):
        """Cycles through the available grid colors."""
        self.grid_color_index = (self.grid_color_index + 1) % len(GRID_COLOR_CYCLE)
        # Redraw map if grids are visible
        if self.show_supertile_grid.get() or self.show_window_view.get():
            self.draw_map_canvas()
        print(f"Grid color set to: {GRID_COLOR_CYCLE[self.grid_color_index]}")

    def apply_window_size_from_entries(self):
        """Applies the W/H values from the Entry widgets."""
        try:
            new_w = self.window_view_tile_w.get()  # Get value from IntVar
            new_h = self.window_view_tile_h.get()

            # Validate range
            min_w, max_w = 1, 32
            min_h, max_h = 1, MAX_WIN_VIEW_HEIGHT_TILES
            valid = True
            if not (min_w <= new_w <= max_w):
                messagebox.showerror(
                    "Invalid Width", f"Window width must be {min_w}-{max_w}."
                )
                valid = False
            if not (min_h <= new_h <= max_h):
                messagebox.showerror(
                    "Invalid Height", f"Window height must be {min_h}-{max_h}."
                )
                valid = False

            if not valid:
                # Reset entries to current state if invalid
                self._update_window_size_vars_from_state()  # Use internal helper
                return

            # If size changed (or even if not, just redraw for simplicity)
            self._clamp_window_view_position()  # Ensure position is valid for new size
            self.draw_map_canvas()
            self.draw_minimap()
            print(f"Window view size set to {new_w}x{new_h} tiles via input.")

        except tk.TclError:  # Handles non-integer input in IntVars
            messagebox.showerror(
                "Invalid Input",
                "Please enter valid integer numbers for width and height.",
            )
            self._update_window_size_vars_from_state()  # Reset on error
        except Exception as e:
            messagebox.showerror("Error", f"Could not apply size: {e}")
            self._update_window_size_vars_from_state()

    def _update_window_size_vars_from_state(self):
        """Internal helper to set IntVars from the state variables."""
        # Needed because the IntVars are bound to entries, direct setting is best
        self.window_view_tile_w.set(
            self.window_view_tile_w.get()
        )  # Trigger update if needed
        self.window_view_tile_h.set(self.window_view_tile_h.get())

    def _clamp_window_view_position(self):
        current_w = self.window_view_tile_w.get()
        current_h = self.window_view_tile_h.get()

        # Total map dimension in base tiles:
        total_map_tiles_w = map_width * self.supertile_grid_width
        total_map_tiles_h = map_height * self.supertile_grid_height

        # Max top-left position for the window view
        max_tile_x_clamp = total_map_tiles_w - current_w
        max_tile_y_clamp = total_map_tiles_h - current_h

        # Ensure max is not negative
        max_tile_x_clamp = max(0, max_tile_x_clamp)
        max_tile_y_clamp = max(0, max_tile_y_clamp)
        
        self.window_view_tile_x = max(0, min(self.window_view_tile_x, max_tile_x_clamp))
        self.window_view_tile_y = max(0, min(self.window_view_tile_y, max_tile_y_clamp))

    def move_window_view_keyboard(self, dx_tile, dy_tile):
        """Moves the window view by dx, dy TILE steps."""
        if not self.show_window_view.get():
            return  # Only move if visible

        # Calculate new target position
        new_tx = self.window_view_tile_x + dx_tile
        new_ty = self.window_view_tile_y + dy_tile

        # Clamp within map bounds (recalculate max based on current size)
        current_w = self.window_view_tile_w.get()
        current_h = self.window_view_tile_h.get()
        max_tile_x = max(0, (map_width * SUPERTILE_GRID_DIM) - current_w)
        max_tile_y = max(0, (map_height * SUPERTILE_GRID_DIM) - current_h)
        clamped_tx = max(0, min(new_tx, max_tile_x))
        clamped_ty = max(0, min(new_ty, max_tile_y))

        # Update if position changed
        if (
            self.window_view_tile_x != clamped_tx
            or self.window_view_tile_y != clamped_ty
        ):
            self.window_view_tile_x = clamped_tx
            self.window_view_tile_y = clamped_ty
            self.draw_map_canvas()  # Redraw to show moved window
            self.draw_minimap()

    def handle_map_keypress(self, event):
        """Handles key presses when the map canvas has focus."""
        key = event.keysym.lower()  # Get lowercase keysym

        if key == "c":
            self.cycle_grid_color()
        elif self.show_window_view.get():  # Only move window if visible
            if key == "w":
                self.move_window_view_keyboard(0, -1)  # Move up
            elif key == "a":
                self.move_window_view_keyboard(-1, 0)  # Move left
            elif key == "s":
                self.move_window_view_keyboard(0, 1)  # Move down
            elif key == "d":
                self.move_window_view_keyboard(1, 0)  # Move right

    # --- Window View Drag/Resize Handlers ---
    def _get_handle_at(self, canvas_x, canvas_y):
        """Checks if the click is on a resize handle, returns handle tag ('nw', 'n', etc.) or None."""
        if not self.show_window_view.get():
            return None
        # Find items tagged 'window_view_handle' near the click
        search_radius = WIN_VIEW_HANDLE_SIZE  # Search slightly larger than handle
        items = self.map_canvas.find_overlapping(
            canvas_x - search_radius,
            canvas_y - search_radius,
            canvas_x + search_radius,
            canvas_y + search_radius,
        )
        for item_id in items:
            tags = self.map_canvas.gettags(item_id)
            if "window_view_handle" in tags:
                for t in tags:
                    if t.startswith("handle_"):
                        return t.split("_")[1]  # Return 'nw', 'n', etc.
        return None  # No handle found

    def _is_inside_window_view(self, canvas_x, canvas_y):
        """Checks if the click is inside the window view rectangle bounds."""
        if not self.show_window_view.get():
            return False
        zoomed_tile_size = self.get_zoomed_tile_size()
        win_px = self.window_view_tile_x * zoomed_tile_size
        win_py = self.window_view_tile_y * zoomed_tile_size
        win_pw = self.window_view_tile_w.get() * zoomed_tile_size
        win_ph = self.window_view_tile_h.get() * zoomed_tile_size
        return (
            win_px <= canvas_x < win_px + win_pw
            and win_py <= canvas_y < win_py + win_ph
        )

    def handle_map_click_or_drag_start(self, event):
        """Handles initial NON-CTRL click: determines action (paint/window drag/resize).
        Sets up state AND performs the initial paint action if applicable.
        Also clears map selection if starting a paint/window action.
        """
        global last_painted_map_cell

        # --- Check for active modifiers that override this handler ---
        if self.is_shift_pressed:
            # print("Shift pressed, ignoring Button-1 for paint/window ops.")
            return "break"
        ctrl_pressed_at_click = event.state & 0x0004  # Check state at event time
        if ctrl_pressed_at_click:
            # print("Ctrl pressed, ignoring Button-1 for paint/window ops.")
            return "break"
        if self.current_mouse_action is not None:
            # print(f"Warning: Button-1 pressed while action '{self.current_mouse_action}' active.")
            return "break"
        # --- End Modifier Check ---

        # --- Clear previous selection when starting a new action ---
        self._clear_map_selection()  # Clear selection visual and state
        # --- End Clear Selection ---

        canvas = self.map_canvas
        canvas.focus_set()
        canvas_x = canvas.canvasx(event.x)
        canvas_y = canvas.canvasy(event.y)

        action_determined = None
        handle = self._get_handle_at(canvas_x, canvas_y)

        # Determine action based on click location
        if handle and self.show_window_view.get():
            action_determined = "window_resizing"
            self.current_mouse_action = action_determined
            self.window_view_resize_handle = handle
            self.drag_start_x = canvas_x
            self.drag_start_y = canvas_y
            self.drag_start_win_tx = self.window_view_tile_x
            self.drag_start_win_ty = self.window_view_tile_y
            self.drag_start_win_tw = self.window_view_tile_w.get()
            self.drag_start_win_th = self.window_view_tile_h.get()

        elif (
            self._is_inside_window_view(canvas_x, canvas_y)
            and self.show_window_view.get()
        ):
            action_determined = "window_dragging"
            self.current_mouse_action = action_determined
            self.drag_start_x = canvas_x
            self.drag_start_y = canvas_y
            self.drag_start_win_tx = self.window_view_tile_x
            self.drag_start_win_ty = self.window_view_tile_y

        else:  # Painting case
            action_determined = "painting"
            self.current_mouse_action = action_determined
            last_painted_map_cell = None  # Reset for this paint sequence
            self._paint_map_cell(canvas_x, canvas_y)  # Perform first paint

        self._update_map_cursor()  # Update cursor based on the determined action

        return "break"

    def handle_map_drag(self, event):
        """Handles motion for non-panning actions (paint, window drag/resize)."""

        # Ignore if panning or no suitable action is set from Button-1 press
        # This prevents interference if Ctrl was pressed *after* Button-1 was down but before motion.
        if self.current_mouse_action not in [
            "painting",
            "window_dragging",
            "window_resizing",
        ]:
            return  # Don't handle if not in a valid non-pan drag state

        canvas = self.map_canvas
        canvas_x = canvas.canvasx(event.x)
        canvas_y = canvas.canvasy(event.y)

        # Perform action based on the current state
        if self.current_mouse_action == "painting":
            self._paint_map_cell(canvas_x, canvas_y)
        elif self.current_mouse_action == "window_dragging":
            self._do_window_move_drag(canvas_x, canvas_y)
        elif self.current_mouse_action == "window_resizing":
            self._do_window_resize_drag(canvas_x, canvas_y)

        return "break"  # Prevent other B1-Motion bindings

    def handle_map_drag_release(self, event):
        """Handles mouse button release: ends the current action (paint, pan, window ops)."""
        global last_painted_map_cell  # Ensure global is accessible
        action_at_release = self.current_mouse_action

        last_painted_map_cell = None  # Stop continuous paint if it was happening

        # Reset the current action state FIRST
        self.current_mouse_action = None

        # Perform any finalization based on the action that just finished
        if action_at_release == "panning":
            pass  # No explicit action needed, scan_dragto stopped with motion

        elif action_at_release == "window_dragging":
            # Position is already snapped during drag, just update minimap (done below)
            pass

        elif action_at_release == "window_resizing":
            # Clamp final position and update entries/IntVar state just in case
            self._clamp_window_view_position()
            self._update_window_size_vars_from_state()  # Sync IntVars post-resize
            self.window_view_resize_handle = None
            # Redraw needed to finalize visual state and ensure entries match
            self.draw_map_canvas()  # Redraw map canvas to remove potential temp visuals

        elif action_at_release == "painting":
            pass  # No specific finalization needed

        self._update_map_cursor()
        self.draw_minimap()

    def _do_window_move_drag(self, current_canvas_x, current_canvas_y):
        """Helper: Calculates and applies window movement during drag."""
        zoomed_tile_size = self.get_zoomed_tile_size()
        if zoomed_tile_size <= 0:
            return

        delta_x_pixels = current_canvas_x - self.drag_start_x
        delta_y_pixels = current_canvas_y - self.drag_start_y

        # Calculate movement in TILE units, snapping to grid
        # Use floor for consistent snapping direction
        delta_tile_x = math.floor(delta_x_pixels / zoomed_tile_size)
        delta_tile_y = math.floor(delta_y_pixels / zoomed_tile_size)

        # Calculate potential new top-left TILE coordinate
        new_tx = self.drag_start_win_tx + delta_tile_x
        new_ty = self.drag_start_win_ty + delta_tile_y

        # Clamp position within map bounds (using current W/H)
        current_w = self.window_view_tile_w.get()
        current_h = self.window_view_tile_h.get()
        max_tile_x = max(0, (map_width * SUPERTILE_GRID_DIM) - current_w)
        max_tile_y = max(0, (map_height * SUPERTILE_GRID_DIM) - current_h)
        clamped_tx = max(0, min(new_tx, max_tile_x))
        clamped_ty = max(0, min(new_ty, max_tile_y))

        # Update state and redraw ONLY if position actually changes
        if (
            self.window_view_tile_x != clamped_tx
            or self.window_view_tile_y != clamped_ty
        ):
            self.window_view_tile_x = clamped_tx
            self.window_view_tile_y = clamped_ty
            self.draw_map_canvas()  # Redraw to show moved window
            self.draw_minimap()

    def _do_window_resize_drag(self, current_canvas_x, current_canvas_y):
        """Helper: Calculates and applies window resize during drag."""
        zoomed_tile_size = self.get_zoomed_tile_size()
        if zoomed_tile_size <= 0:
            return

        # Starting state in TILE units
        start_tx = self.drag_start_win_tx
        start_ty = self.drag_start_win_ty
        start_tw = self.drag_start_win_tw
        start_th = self.drag_start_win_th
        start_br_tx = start_tx + start_tw  # Bottom-right tile X (exclusive)
        start_br_ty = start_ty + start_th  # Bottom-right tile Y (exclusive)

        # Current mouse position snapped to TILE grid
        current_tile_x = math.floor(current_canvas_x / zoomed_tile_size)
        current_tile_y = math.floor(current_canvas_y / zoomed_tile_size)

        # Calculate new potential corners based on handle
        new_tx = start_tx
        new_ty = start_ty
        new_br_tx = start_br_tx
        new_br_ty = start_br_ty
        handle = self.window_view_resize_handle

        # Adjust based on handle dragged
        if "n" in handle:
            new_ty = current_tile_y
        if "s" in handle:
            new_br_ty = current_tile_y + 1  # +1 because BR is exclusive
        if "w" in handle:
            new_tx = current_tile_x
        if "e" in handle:
            new_br_tx = current_tile_x + 1

        # Ensure top-left is never beyond bottom-right
        new_tx = min(new_tx, new_br_tx - 1)  # Ensure width >= 1
        new_ty = min(new_ty, new_br_ty - 1)  # Ensure height >= 1
        new_br_tx = max(new_br_tx, new_tx + 1)
        new_br_ty = max(new_br_ty, new_ty + 1)

        # Calculate new width and height in tiles
        new_tw = new_br_tx - new_tx
        new_th = new_br_ty - new_ty

        # Clamp dimensions to allowed limits
        min_w, max_w = 1, 32
        min_h, max_h = 1, MAX_WIN_VIEW_HEIGHT_TILES
        clamped_tw = max(min_w, min(new_tw, max_w))
        clamped_th = max(min_h, min(new_th, max_h))

        # Adjust position if clamping changed dimensions, preserving the fixed corner/edge
        if "n" in handle and clamped_th != new_th:
            new_ty = new_br_ty - clamped_th
        if "w" in handle and clamped_tw != new_tw:
            new_tx = new_br_tx - clamped_tw
        if "s" in handle:
            new_br_ty = (
                new_ty + clamped_th
            )  # Recalculate needed? No, height is clamped.
        if "e" in handle:
            new_br_tx = new_tx + clamped_tw

        # Clamp position to stay within map boundaries
        max_map_tile_x = map_width * SUPERTILE_GRID_DIM
        max_map_tile_y = map_height * SUPERTILE_GRID_DIM
        clamped_tx = max(0, min(new_tx, max_map_tile_x - clamped_tw))
        clamped_ty = max(0, min(new_ty, max_map_tile_y - clamped_th))

        # Final check if clamping position changed dimensions again (shouldn't drastically)
        final_tw = min(clamped_tw, max_map_tile_x - clamped_tx)
        final_th = min(clamped_th, max_map_tile_y - clamped_ty)

        # Update state only if position or size changed
        if (
            self.window_view_tile_x != clamped_tx
            or self.window_view_tile_y != clamped_ty
            or self.window_view_tile_w.get() != final_tw
            or self.window_view_tile_h.get() != final_th
        ):
            #
            self.window_view_tile_x = clamped_tx
            self.window_view_tile_y = clamped_ty
            self.window_view_tile_w.set(final_tw)  # Update IntVars
            self.window_view_tile_h.set(final_th)
            # self._update_window_size_vars_from_state() # Update entries
            self.draw_map_canvas()  # Redraw to show resize
            self.draw_minimap()

    # --- Minimap Methods ---

    def toggle_minimap(self):
        """Opens/raises the resizable minimap window."""
        if self.minimap_window is None or not tk.Toplevel.winfo_exists(
            self.minimap_window
        ):
            self.minimap_window = tk.Toplevel(self.root)
            self.minimap_window.title("Minimap")
            # Set initial size, but allow resizing
            self.minimap_window.geometry(
                f"{MINIMAP_INITIAL_WIDTH}x{MINIMAP_INITIAL_HEIGHT}"
            )
            # self.minimap_window.resizable(False, False) # REMOVE or set True

            self.minimap_canvas = tk.Canvas(
                self.minimap_window, bg="dark slate gray", highlightthickness=0
            )
            # Make canvas fill the resizable window
            self.minimap_canvas.pack(fill=tk.BOTH, expand=True)  # MODIFIED pack options
            self.minimap_window.protocol("WM_DELETE_WINDOW", self._on_minimap_close)
            self.minimap_window.bind("<Configure>", self._on_minimap_configure)

            # Initial draw (will use initial geometry)
            # Need to ensure canvas has dimensions before first draw
            self.minimap_window.update_idletasks()  # Process geometry requests
            self.draw_minimap()
        else:
            self.minimap_window.lift()
            self.minimap_window.focus_set()

    def _on_minimap_close(self):
        """Handles the closing of the minimap window."""
        if self.minimap_window:
            self.minimap_window.destroy()  # Destroy the window
        self.minimap_window = None  # Reset state variable
        self.minimap_canvas = None

    def draw_minimap(self):
        if self.minimap_window is None or self.minimap_canvas is None:
            return
        if not tk.Toplevel.winfo_exists(self.minimap_window):
            self._on_minimap_close()
            return

        canvas_mm = self.minimap_canvas # Renamed
        canvas_mm.delete("all")

        current_minimap_w_px = canvas_mm.winfo_width()
        current_minimap_h_px = canvas_mm.winfo_height()
        if current_minimap_w_px <= 1 or current_minimap_h_px <= 1:
            return

        if (
            self.minimap_background_cache is None
            or self.minimap_bg_rendered_width != current_minimap_w_px
            or self.minimap_bg_rendered_height != current_minimap_h_px
        ):
            self.minimap_background_cache = self._create_minimap_background_image(
                current_minimap_w_px, current_minimap_h_px
            )

        if self.minimap_background_cache:
            canvas_mm.create_image(
                0, 0, image=self.minimap_background_cache, anchor=tk.NW, tags="minimap_bg_image"
            )
        else:
            canvas_mm.create_rectangle(
                0, 0, current_minimap_w_px, current_minimap_h_px, fill="gray10"
            )

        # Total map dimensions in base MSX pixels
        map_total_msx_pixel_w = map_width * self.supertile_grid_width * TILE_WIDTH
        map_total_msx_pixel_h = map_height * self.supertile_grid_height * TILE_HEIGHT
        
        if map_total_msx_pixel_w <= 0 or map_total_msx_pixel_h <= 0:
            return

        scale_x_overlay = current_minimap_w_px / map_total_msx_pixel_w
        scale_y_overlay = current_minimap_h_px / map_total_msx_pixel_h
        scale_overlay = min(scale_x_overlay, scale_y_overlay)

        scaled_map_content_w_overlay = map_total_msx_pixel_w * scale_overlay
        scaled_map_content_h_overlay = map_total_msx_pixel_h * scale_overlay
        offset_x_overlay_render = (current_minimap_w_px - scaled_map_content_w_overlay) / 2
        offset_y_overlay_render = (current_minimap_h_px - scaled_map_content_h_overlay) / 2

        try:
            main_map_canvas = self.map_canvas # Renamed
            scroll_x_fractions = main_map_canvas.xview()
            scroll_y_fractions = main_map_canvas.yview()

            # Total BASE map dimensions in MSX pixels (same as map_total_msx_pixel_w/h above)
            # This is what the scroll fractions are relative to.
            # map_total_base_msx_w = map_width * self.supertile_grid_width * TILE_WIDTH
            # map_total_base_msx_h = map_height * self.supertile_grid_height * TILE_HEIGHT
            # No need to recalculate, use map_total_msx_pixel_w/h

            if map_total_msx_pixel_w > 0 and map_total_msx_pixel_h > 0:
                map_viewport_msx_px_x1 = scroll_x_fractions[0] * map_total_msx_pixel_w
                map_viewport_msx_px_y1 = scroll_y_fractions[0] * map_total_msx_pixel_h
                map_viewport_msx_px_x2 = scroll_x_fractions[1] * map_total_msx_pixel_w
                map_viewport_msx_px_y2 = scroll_y_fractions[1] * map_total_msx_pixel_h

                vp_x1_draw = offset_x_overlay_render + map_viewport_msx_px_x1 * scale_overlay
                vp_y1_draw = offset_y_overlay_render + map_viewport_msx_px_y1 * scale_overlay
                vp_x2_draw = offset_x_overlay_render + map_viewport_msx_px_x2 * scale_overlay
                vp_y2_draw = offset_y_overlay_render + map_viewport_msx_px_y2 * scale_overlay

                canvas_mm.create_rectangle(
                    vp_x1_draw, vp_y1_draw, vp_x2_draw, vp_y2_draw,
                    outline=self.MINIMAP_VIEWPORT_COLOR, width=2, tags="minimap_viewport"
                )
        except Exception as e:
            # print(f"Error drawing minimap viewport: {e}")
            pass

        if self.show_window_view.get():
            try:
                win_tx_mm = self.window_view_tile_x # In base tiles
                win_ty_mm = self.window_view_tile_y
                win_tw_mm = self.window_view_tile_w.get()
                win_th_mm = self.window_view_tile_h.get()

                # Window view dimensions in MSX pixels
                win_map_msx_px1 = win_tx_mm * TILE_WIDTH
                win_map_msx_py1 = win_ty_mm * TILE_HEIGHT
                win_map_msx_px2 = win_map_msx_px1 + (win_tw_mm * TILE_WIDTH)
                win_map_msx_py2 = win_map_msx_py1 + (win_th_mm * TILE_HEIGHT)

                wv_x1_draw = offset_x_overlay_render + win_map_msx_px1 * scale_overlay
                wv_y1_draw = offset_y_overlay_render + win_map_msx_py1 * scale_overlay
                wv_x2_draw = offset_x_overlay_render + win_map_msx_px2 * scale_overlay
                wv_y2_draw = offset_y_overlay_render + win_map_msx_py2 * scale_overlay

                canvas_mm.create_rectangle(
                    wv_x1_draw, wv_y1_draw, wv_x2_draw, wv_y2_draw,
                    outline=self.MINIMAP_WIN_VIEW_COLOR, width=2, dash=(4, 4), tags="minimap_window_view"
                )
            except Exception as e:
                # print(f"Error drawing minimap window view: {e}")
                pass

    def _on_minimap_configure(self, event):
        """Callback when the minimap window is resized/moved."""
        # We only care about size changes for redrawing
        # Basic debouncing: wait a short time after the last configure event
        # before redrawing to avoid excessive calls during drag-resizing.
        debounce_ms = 150  # Adjust as needed (milliseconds)

        # Cancel any pending redraw timer
        if self.minimap_resize_timer is not None:
            self.root.after_cancel(self.minimap_resize_timer)

        # Schedule a new redraw after the debounce period
        self.minimap_resize_timer = self.root.after(
            debounce_ms, self._redraw_minimap_after_resize
        )

    def _redraw_minimap_after_resize(self):
        self.minimap_resize_timer = None 

        if not self.minimap_window or not tk.Toplevel.winfo_exists(self.minimap_window):
            return

        if self._minimap_resizing_internally:
            return

        try:
            current_width_mm_cfg = self.minimap_window.winfo_width()
            current_height_mm_cfg = self.minimap_window.winfo_height()

            # Map aspect ratio based on total MSX pixels
            map_total_msx_pixel_w_cfg = map_width * self.supertile_grid_width * TILE_WIDTH
            map_total_msx_pixel_h_cfg = map_height * self.supertile_grid_height * TILE_HEIGHT

            if map_total_msx_pixel_h_cfg <= 0 or map_total_msx_pixel_w_cfg <= 0 or \
               current_width_mm_cfg <= 1 or current_height_mm_cfg <= 1:
                self.invalidate_minimap_background_cache()
                self.draw_minimap()
                return

            map_aspect_ratio_cfg = map_total_msx_pixel_w_cfg / map_total_msx_pixel_h_cfg
            ideal_height_cfg = int(round(current_width_mm_cfg / map_aspect_ratio_cfg))

            if abs(current_height_mm_cfg - ideal_height_cfg) > 1: # Allow 1px tolerance
                self._minimap_resizing_internally = True
                new_geometry_cfg = f"{current_width_mm_cfg}x{ideal_height_cfg}"
                # print(f"Minimap Configure: Forcing aspect ratio. New geometry: {new_geometry_cfg}")
                self.minimap_window.geometry(new_geometry_cfg)
                self.root.after(50, setattr, self, "_minimap_resizing_internally", False)
                # Redraw will be triggered by the geometry change causing another <Configure>
                return 
        except Exception as e:
            # print(f"Error during minimap aspect ratio enforcement: {e}")
            self._minimap_resizing_internally = False # Ensure flag is reset

        # print(f"Minimap Configure: Aspect ratio OK or no change needed. Redrawing.")
        self.invalidate_minimap_background_cache()
        self.draw_minimap()

    def _trigger_minimap_reconfigure(self):
        """Forces the minimap to re-evaluate its size and aspect ratio if it exists."""
        if self.minimap_window and tk.Toplevel.winfo_exists(self.minimap_window):
            # A simple way to trigger <Configure> is to slightly change the size
            # We can just call the resize logic directly though.
            print("Map dimensions changed, triggering minimap aspect check/redraw.")
            # Reset the resize timer to avoid duplicate calls if configure is also pending
            if self.minimap_resize_timer is not None:
                self.root.after_cancel(self.minimap_resize_timer)
                self.minimap_resize_timer = None
            # Directly call the logic that handles resizing and drawing
            self._redraw_minimap_after_resize()

    def invalidate_minimap_background_cache(self):
        """Clears the cached minimap background image."""
        self.minimap_background_cache = None
        # Reset rendered size trackers too
        self.minimap_bg_rendered_width = 0
        self.minimap_bg_rendered_height = 0

    def _create_minimap_background_image(self, target_width_mm, target_height_mm): # Renamed params
        if target_width_mm <= 0 or target_height_mm <= 0:
            return None

        minimap_img_bg = tk.PhotoImage(width=target_width_mm, height=target_height_mm) # Renamed
        
        # Base map pixel dimensions (MSX pixels, assuming TILE_WIDTH/HEIGHT are base tile MSX pixels)
        map_base_pixel_w = map_width * self.supertile_grid_width * TILE_WIDTH
        map_base_pixel_h = map_height * self.supertile_grid_height * TILE_HEIGHT

        if map_base_pixel_w <= 0 or map_base_pixel_h <= 0:
            # print("Warning: Invalid base map pixel dimensions for minimap background.")
            minimap_img_bg.put("black", to=(0, 0, target_width_mm, target_height_mm))
            # Update cache trackers even for fallback
            self.minimap_bg_rendered_width = target_width_mm
            self.minimap_bg_rendered_height = target_height_mm
            self.minimap_background_cache = minimap_img_bg
            return minimap_img_bg

        scale_x_mm = target_width_mm / map_base_pixel_w
        scale_y_mm = target_height_mm / map_base_pixel_h
        scale_mm = min(scale_x_mm, scale_y_mm)
        
        scaled_map_content_w = map_base_pixel_w * scale_mm
        scaled_map_content_h = map_base_pixel_h * scale_mm
        offset_x_mm_render = (target_width_mm - scaled_map_content_w) / 2
        offset_y_mm_render = (target_height_mm - scaled_map_content_h) / 2
        
        bg_fill_color_mm = "#000000" # Black for letter/pillarbox

        for y_pix_mm in range(target_height_mm):
            row_hex_colors_mm = []
            for x_pix_mm in range(target_width_mm):
                pixel_color_hex_mm = bg_fill_color_mm

                if (offset_x_mm_render <= x_pix_mm < offset_x_mm_render + scaled_map_content_w and
                    offset_y_mm_render <= y_pix_mm < offset_y_mm_render + scaled_map_content_h):

                    map_src_base_x = (x_pix_mm - offset_x_mm_render) / max(1e-9, scale_mm)
                    map_src_base_y = (y_pix_mm - offset_y_mm_render) / max(1e-9, scale_mm)

                    map_src_base_x = max(0, min(map_base_pixel_w - 1, map_src_base_x))
                    map_src_base_y = max(0, min(map_base_pixel_h - 1, map_src_base_y))

                    map_pixel_col_src = int(map_src_base_x)
                    map_pixel_row_src = int(map_src_base_y)

                    # Pixels per supertile width/height
                    pixels_per_st_w = self.supertile_grid_width * TILE_WIDTH
                    pixels_per_st_h = self.supertile_grid_height * TILE_HEIGHT
                    if pixels_per_st_w <=0 : pixels_per_st_w = 1 # Avoid div by zero
                    if pixels_per_st_h <=0 : pixels_per_st_h = 1


                    st_col_mm = map_pixel_col_src // pixels_per_st_w
                    st_row_mm = map_pixel_row_src // pixels_per_st_h

                    tile_col_in_st_mm = (map_pixel_col_src % pixels_per_st_w) // TILE_WIDTH
                    tile_row_in_st_mm = (map_pixel_row_src % pixels_per_st_h) // TILE_HEIGHT
                    
                    pixel_col_in_tile_mm = map_pixel_col_src % TILE_WIDTH
                    pixel_row_in_tile_mm = map_pixel_row_src % TILE_HEIGHT
                    
                    try:
                        # Ensure st_row_mm, st_col_mm are within map_data bounds
                        if 0 <= st_row_mm < map_height and 0 <= st_col_mm < map_width:
                            supertile_idx_mm = map_data[st_row_mm][st_col_mm]
                            if 0 <= supertile_idx_mm < num_supertiles:
                                # Ensure definition structure is valid for current ST dimensions
                                st_def_mm = supertiles_data[supertile_idx_mm]
                                if st_def_mm and len(st_def_mm) == self.supertile_grid_height and \
                                   (self.supertile_grid_height == 0 or (self.supertile_grid_width > 0 and len(st_def_mm[0]) == self.supertile_grid_width) or self.supertile_grid_width == 0) and \
                                   0 <= tile_row_in_st_mm < self.supertile_grid_height and \
                                   0 <= tile_col_in_st_mm < self.supertile_grid_width:

                                    tile_idx_mm = st_def_mm[tile_row_in_st_mm][tile_col_in_st_mm]
                                    if 0 <= tile_idx_mm < num_tiles_in_set:
                                        # Check bounds for tile pattern/color access
                                        if 0 <= pixel_row_in_tile_mm < TILE_HEIGHT and \
                                           0 <= pixel_col_in_tile_mm < TILE_WIDTH:
                                            pattern_val_mm = tileset_patterns[tile_idx_mm][pixel_row_in_tile_mm][pixel_col_in_tile_mm]
                                            fg_idx_mm, bg_idx_mm = tileset_colors[tile_idx_mm][pixel_row_in_tile_mm]
                                            
                                            # Validate palette indices
                                            if not (0 <= fg_idx_mm < len(self.active_msx_palette) and \
                                                    0 <= bg_idx_mm < len(self.active_msx_palette)):
                                                # print(f"Warning: Invalid palette indices ({fg_idx_mm}, {bg_idx_mm}) in minimap render.")
                                                fg_idx_mm = WHITE_IDX; bg_idx_mm = BLACK_IDX # Fallback

                                            fg_color_mm = self.active_msx_palette[fg_idx_mm]
                                            bg_color_mm = self.active_msx_palette[bg_idx_mm]
                                            pixel_color_hex_mm = fg_color_mm if pattern_val_mm == 1 else bg_color_mm
                                        else: pixel_color_hex_mm = INVALID_TILE_COLOR # pixel in tile out of bounds
                                    else: pixel_color_hex_mm = INVALID_TILE_COLOR # tile_idx_mm out of bounds
                                else: pixel_color_hex_mm = INVALID_SUPERTILE_COLOR # ST def structure issue or tile in ST out of bounds
                            else: pixel_color_hex_mm = INVALID_SUPERTILE_COLOR # supertile_idx_mm out of bounds
                        else: pixel_color_hex_mm = "#808080" # Grey for outside map supertile grid
                    except IndexError:
                        pixel_color_hex_mm = "#FF0000" # Bright Red for major error
                
                row_hex_colors_mm.append(pixel_color_hex_mm)

            try:
                minimap_img_bg.put("{" + " ".join(row_hex_colors_mm) + "}", to=(0, y_pix_mm))
            except tk.TclError:
                # print(f"Warning [Minimap BG]: TclError put row {y_pix_mm}: {e}")
                if row_hex_colors_mm:
                    minimap_img_bg.put(row_hex_colors_mm[0], to=(0, y_pix_mm, target_width_mm, y_pix_mm + 1))

        # print("Minimap background generated.")
        self.minimap_bg_rendered_width = target_width_mm
        self.minimap_bg_rendered_height = target_height_mm
        self.minimap_background_cache = minimap_img_bg
        return minimap_img_bg

    def _update_window_title(self):
        """Updates the main window title based on the current project path."""
        base_title = "MSX Tile Forge"
        modifier = "*" if self.project_modified else ""

        if self.current_project_base_path:
            # Extract just the filename part
            project_name = os.path.basename(self.current_project_base_path)
            self.root.title(
                f"{base_title} - {project_name}{modifier}"
            )  # Prepend modifier
        else:
            self.root.title(f"{base_title} - Untitled{modifier}")  # Prepend modifier

    def _update_map_cursor(self):
        """Sets the map canvas cursor based on current action and modifier keys."""
        if not hasattr(self, "map_canvas") or not self.map_canvas.winfo_exists():
            return

        new_cursor = ""  # Default arrow cursor

        # Determine cursor based on the active operation FIRST
        if self.current_mouse_action == "panning":
            new_cursor = "fleur"
        elif self.current_mouse_action == "window_dragging":
            new_cursor = "fleur"
        elif self.current_mouse_action == "window_resizing":
            new_cursor = "sizing"  # Generic resize
        elif self.map_selection_active:  # NEW: Selection in progress
            new_cursor = "crosshair"
        # --- Modifier key hints (if NO mouse action is active) ---
        elif self.is_ctrl_pressed:
            try:  # Check location for hinting
                canvas_x = self.map_canvas.canvasx(
                    self.map_canvas.winfo_pointerx() - self.map_canvas.winfo_rootx()
                )
                canvas_y = self.map_canvas.canvasy(
                    self.map_canvas.winfo_pointery() - self.map_canvas.winfo_rooty()
                )
                handle = (
                    self._get_handle_at(canvas_x, canvas_y)
                    if self.show_window_view.get()
                    else None
                )
                if handle:
                    new_cursor = "sizing"  # Hint resize
                elif (
                    self._is_inside_window_view(canvas_x, canvas_y)
                    and self.show_window_view.get()
                ):
                    new_cursor = "fleur"  # Hint window drag
                else:
                    new_cursor = "hand2"  # Hint panning
            except tk.TclError:
                new_cursor = "hand2"  # Default hint for Ctrl pressed
        elif self.is_shift_pressed:  # NEW: Shift held, no action -> hint selection
            new_cursor = "crosshair"
        # --- Default action (if no action and no relevant modifier) ---
        else:
            new_cursor = "pencil"  # Default paint cursor

        # Only change the cursor if it's different
        try:
            current_cursor = self.map_canvas.cget("cursor")
            if current_cursor != new_cursor:
                self.map_canvas.config(cursor=new_cursor)
        except tk.TclError:
            pass

    def handle_ctrl_press(self, event):
        """Handles Control key press."""
        # Check if the key is actually Control_L or Control_R
        if "Control" in event.keysym:
            # Only update state and cursor if Ctrl wasn't already considered pressed
            if not self.is_ctrl_pressed:
                self.is_ctrl_pressed = True
                # Update cursor only if no mouse action is currently happening
                # If a mouse button is down, let the existing action determine cursor
                if self.current_mouse_action is None:
                    self._update_map_cursor()

    def handle_ctrl_release(self, event):
        """Handles Control key release. Stops panning if active."""
        # Check if the key is actually Control_L or Control_R
        if "Control" in event.keysym:
            # Only update state if Ctrl was actually considered pressed
            if self.is_ctrl_pressed:
                self.is_ctrl_pressed = False
                # If panning was the current action, stop it.
                # Window dragging/resizing continues until mouse release even if Ctrl comes up.
                if self.current_mouse_action == "panning":
                    self.current_mouse_action = None
                self._update_map_cursor()

    def handle_pan_start(self, event):
        """Handles the start of panning (Ctrl + Left Click) OR window dragging with Ctrl."""
        # --- Check for Shift modifier ---
        if self.is_shift_pressed:
            # print("Shift pressed, ignoring Ctrl-Button-1 for pan/window drag.")
            return "break"
        # --- End Shift Check ---

        ctrl_pressed_at_click = event.state & 0x0004  # Check state at event time
        if not ctrl_pressed_at_click or self.current_mouse_action is not None:
            return

        canvas = self.map_canvas
        canvas_x = canvas.canvasx(event.x)
        canvas_y = canvas.canvasy(event.y)

        # --- Clear previous selection when starting pan/window drag ---
        self._clear_map_selection()  # Clear selection visual and state
        # --- End Clear Selection ---

        if (
            self._is_inside_window_view(canvas_x, canvas_y)
            and self.show_window_view.get()
        ):
            self.current_mouse_action = "window_dragging"
            self.drag_start_x = canvas_x
            self.drag_start_y = canvas_y
            self.drag_start_win_tx = self.window_view_tile_x
            self.drag_start_win_ty = self.window_view_tile_y
            self._update_map_cursor()
        else:
            # Initiate PANNING
            self.current_mouse_action = "panning"
            canvas.scan_mark(event.x, event.y)
            self._update_map_cursor()

        return "break"

    def handle_pan_motion(self, event):
        """Handles mouse motion during panning OR window dragging with Ctrl."""
        if self.current_mouse_action not in ["panning", "window_dragging"]:
            return

        canvas = self.map_canvas

        if self.current_mouse_action == "panning":
            canvas.scan_dragto(event.x, event.y, gain=1)
            # After scan_dragto, the view has changed, so redraw the map content
            self.draw_map_canvas() # <<< ADDED THIS LINE
            self.draw_minimap()    # Minimap was already being updated

        elif self.current_mouse_action == "window_dragging":
            canvas_x = canvas.canvasx(event.x)
            canvas_y = canvas.canvasy(event.y)
            self._do_window_move_drag(canvas_x, canvas_y) # This calls draw_map_canvas internally if needed

        return "break"

    def handle_canvas_enter(self, event):
        """Handles mouse entering the canvas area."""
        # Set cursor based on current state
        self._update_map_cursor()

        # --- >> ADDED: Draw paste preview on enter if applicable << ---
        if event.widget == self.map_canvas:
            is_map_tab_active = False
            if self.notebook and self.notebook.winfo_exists():
                try:
                     selected_tab_index = self.notebook.index(self.notebook.select())
                     if selected_tab_index == 3: # Map Editor tab index
                         is_map_tab_active = True
                except tk.TclError:
                    pass # Ignore if notebook not ready

            # Draw preview if map tab active and clipboard has data
            if is_map_tab_active and self.map_clipboard_data:
                self._draw_paste_preview_rect(event=event)

    def handle_canvas_leave(self, event):
        """Handles mouse leaving the canvas area."""
        # Reset cursor to default when leaving, unless an action is in progress
        if self.current_mouse_action is None:
            # Only reset if the specific widget leaving is the map canvas
            if event.widget == self.map_canvas:
                try:
                    if self.map_canvas.winfo_exists():
                        self.map_canvas.config(cursor="")
                except tk.TclError:
                    pass # Ignore if destroyed

        # Reset coordinate display when mouse leaves map canvas
        if event.widget == self.map_canvas and hasattr(self, "map_coords_label"):
            self.map_coords_label.config(text="ST Coords: -, -")

        # Clear paste preview when leaving map canvas
        if event.widget == self.map_canvas:
            self._clear_paste_preview_rect()

    def _update_edit_menu_state(self):
        """Updates the state (enabled/disabled) and labels of generic Edit menu items
        based on the active tab and clipboard state.
        """
        if not self.edit_menu:
            return  # Menu not ready
        if self.copy_menu_item_index == -1 or self.paste_menu_item_index == -1:
            return  # Cannot proceed if indices weren't stored correctly

        selected_tab_index = 0  # Default
        try:
            if self.notebook and self.notebook.winfo_exists():
                current_selection = self.notebook.select()
                if current_selection:
                    selected_tab_index = self.notebook.index(current_selection)
        except tk.TclError:
            selected_tab_index = 0

        can_copy = False
        can_paste = False
        copy_label = "Copy"
        paste_label = "Paste"

        if selected_tab_index == 1:  # Tile Editor Tab (index 1)
            copy_label = "Copy Tile"
            paste_label = "Paste Tile"
            can_copy = 0 <= current_tile_index < num_tiles_in_set
            can_paste = (
                tile_clipboard_pattern is not None
                and 0 <= current_tile_index < num_tiles_in_set
            )

        elif selected_tab_index == 2:  # Supertile Editor Tab (index 2)
            copy_label = "Copy Supertile"
            paste_label = "Paste Supertile"
            can_copy = 0 <= current_supertile_index < num_supertiles
            can_paste = (
                supertile_clipboard_data is not None
                and 0 <= current_supertile_index < num_supertiles
            )

        elif selected_tab_index == 3:  # Map Editor Tab (index 3)
            copy_label = "Copy Map Region"
            paste_label = "Paste Map Region"
            can_copy = (
                self.map_selection_start_st is not None
                and self.map_selection_end_st is not None
            )
            can_paste = self.map_clipboard_data is not None

        else:  # Palette (0) tab
            copy_label = "Copy"
            paste_label = "Paste"
            can_copy = False
            can_paste = False

        copy_state = tk.NORMAL if can_copy else tk.DISABLED
        paste_state = tk.NORMAL if can_paste else tk.DISABLED

        try:
            current_copy_type = self.edit_menu.type(self.copy_menu_item_index)
            current_paste_type = self.edit_menu.type(self.paste_menu_item_index)
            if current_copy_type == "command":
                self.edit_menu.entryconfig(
                    self.copy_menu_item_index, state=copy_state, label=copy_label
                )
            # else:
            # print(f"  ERROR: Item at copy index {self.copy_menu_item_index} is not a 'command' type!")

            if current_paste_type == "command":
                self.edit_menu.entryconfig(
                    self.paste_menu_item_index, state=paste_state, label=paste_label
                )
            # else:
            # print(f"  ERROR: Item at paste index {self.paste_menu_item_index} is not a 'command' type!")

        except tk.TclError as e:
            # print(f"  ERROR during entryconfig: {e}")
            pass
        except Exception as e:
            # print(f"  UNEXPECTED ERROR during menu update: {e}")
            pass

    def handle_generic_copy(self):
        """Handles the generic 'Copy' menu command based on the active tab."""
        active_tab_index = -1
        try:
            if self.notebook and self.notebook.winfo_exists():
                active_tab_index = self.notebook.index(self.notebook.select())
        except tk.TclError:
            return # Cannot determine active tab

        # Clear map clipboard and preview ONLY if copy action is NOT for map region
        if active_tab_index != 3:
            # Check if map clipboard actually needs clearing before doing work
            if self.map_clipboard_data is not None:
                self.map_clipboard_data = None
                self._clear_paste_preview_rect()
                # Update menu state since map paste is now disabled
                self._update_edit_menu_state() # Update only if clipboard was cleared

        # Perform copy based on active tab
        if active_tab_index == 1:  # Tile Editor Tab
            self.copy_current_tile()
        elif active_tab_index == 2:  # Supertile Editor Tab
            self.copy_current_supertile()
        elif active_tab_index == 3:  # Map Editor Tab
            norm_coords = self._get_normalized_selection_st()
            if norm_coords: # If a selection exists, perform the copy
                min_c, min_r, max_c, max_r = norm_coords
                sel_w = max_c - min_c + 1
                sel_h = max_r - min_r + 1
                copied_data = []
                for r_idx in range(min_r, max_r + 1):
                    row_data = []
                    for c_idx in range(min_c, max_c + 1):
                        if 0 <= r_idx < map_height and 0 <= c_idx < map_width:
                            row_data.append(map_data[r_idx][c_idx])
                        else:
                            row_data.append(0)  # Append default if outside map
                    copied_data.append(row_data)

                # Set the map clipboard
                self.map_clipboard_data = {
                    "width": sel_w,
                    "height": sel_h,
                    "data": copied_data,
                }
                # Clear selection visual/state after successful copy
                self._clear_map_selection()
                # Explicitly clear any old paste preview visual
                self._clear_paste_preview_rect()
                # Redraw map canvas to remove selection rectangle
                self.draw_map_canvas()
                # Update menu state (enables Paste)
                self._update_edit_menu_state()
                # Attempt to draw the *new* paste preview based on current mouse pos
                try:
                    pointer_x = self.map_canvas.winfo_pointerx() - self.map_canvas.winfo_rootx()
                    pointer_y = self.map_canvas.winfo_pointery() - self.map_canvas.winfo_rooty()
                    if (0 <= pointer_x < self.map_canvas.winfo_width() and
                        0 <= pointer_y < self.map_canvas.winfo_height()):
                        canvas_x = self.map_canvas.canvasx(pointer_x)
                        canvas_y = self.map_canvas.canvasy(pointer_y)
                        self._draw_paste_preview_rect(canvas_coords=(canvas_x, canvas_y))
                except Exception:
                     pass # Ignore errors getting pointer position

            # else: # If no selection exists, simply do nothing for the map clipboard
            #    print("Copy Map Region: No selection active.") # Optional info message

    def handle_generic_paste(self):
        """Handles the generic 'Paste' menu command based on the active tab."""
        active_tab_index = -1
        try:
            if self.notebook and self.notebook.winfo_exists():
                active_tab_index = self.notebook.index(self.notebook.select())
        except tk.TclError:
            return 

        # Clear marks before any paste operation, if they are active
        # This needs to be done carefully to ensure the correct redraw happens.
        marks_were_cleared = self._clear_marked_unused(trigger_redraw=False)

        if active_tab_index == 1:  # Tile Editor Tab
            self.paste_tile() # This will call update_all_displays if marks were not cleared
        elif active_tab_index == 2:  # Supertile Editor Tab
            self.paste_supertile() # This will call update_all_displays if marks were not cleared
        elif active_tab_index == 3:  # Map Editor Tab 
            if self.map_clipboard_data:
                canvas = self.map_canvas
                try:
                    pointer_x = canvas.winfo_pointerx()
                    pointer_y = canvas.winfo_pointery()
                    root_x = canvas.winfo_rootx()
                    root_y = canvas.winfo_rooty()
                    canvas_x = canvas.canvasx(pointer_x - root_x)
                    canvas_y = canvas.canvasy(pointer_y - root_y)
                except tk.TclError:
                    messagebox.showerror("Paste Error", "Could not get mouse position.")
                    if marks_were_cleared: self.update_all_displays(changed_level="all") # Redraw if marks cleared but paste failed
                    return

                paste_coords = self._get_supertile_coords_from_canvas(canvas_x, canvas_y)
                if paste_coords is None:
                    if marks_were_cleared: self.update_all_displays(changed_level="all")
                    return

                paste_st_col, paste_st_row = paste_coords
                clip_w = self.map_clipboard_data["width"]
                clip_h = self.map_clipboard_data["height"]
                clip_data = self.map_clipboard_data["data"]
                modified = False

                for r_offset in range(clip_h):
                    for c_offset in range(clip_w):
                        target_map_row = paste_st_row + r_offset
                        target_map_col = paste_st_col + c_offset

                        if (0 <= target_map_row < map_height and 0 <= target_map_col < map_width):
                            if r_offset < len(clip_data) and c_offset < len(clip_data[r_offset]):
                                st_index_to_paste = clip_data[r_offset][c_offset]
                                if map_data[target_map_row][target_map_col] != st_index_to_paste:
                                    map_data[target_map_row][target_map_col] = st_index_to_paste
                                    modified = True

                if modified:
                    self._mark_project_modified()
                    self.invalidate_minimap_background_cache()
                    # If marks were already cleared, this redraw is fine.
                    # If not, paste_tile/paste_supertile would have handled a more targeted redraw.
                    # For map paste, a full map canvas redraw is generally needed.
                    self.draw_map_canvas()  
                    self.draw_minimap()  
                # else:
                #    print("Paste: No changes made to map.")

            else:
                messagebox.showinfo("Paste", "Map clipboard is empty.")
                # If marks were cleared but no paste happened, still need to redraw
                if marks_were_cleared: self.update_all_displays(changed_level="all")

        # If marks were cleared by this paste operation and no specific redraw happened in the branches
        if marks_were_cleared and active_tab_index not in [1, 2, 3]: # e.g. if on palette tab
            self.update_all_displays(changed_level="all")

    def _setup_global_key_bindings(self):
        """Sets up global keyboard shortcuts (accelerators) for menu commands."""
        # File Menu Bindings
        self.root.bind_all("<Control-n>", lambda event: self.new_project())
        self.root.bind_all("<Control-o>", lambda event: self.open_project())
        self.root.bind_all("<Control-s>", lambda event: self.save_project())
        # Note: Use <Control-Shift-KeyPress-S> for Ctrl+Shift+S reliably
        self.root.bind_all(
            "<Control-Shift-KeyPress-S>", lambda event: self.save_project_as()
        )
        self.root.bind_all("<Control-q>", lambda event: self.root.quit())

        # Edit Menu Bindings (Call the generic handlers)
        # Check state *within* the handler to see if action is allowed for the current tab
        self.root.bind_all("<Control-c>", lambda event: self.handle_generic_copy())
        self.root.bind_all("<Control-v>", lambda event: self.handle_generic_paste())

        # View Menu Bindings
        self.root.bind_all("<Control-m>", lambda event: self.toggle_minimap())

        # Add a print statement for confirmation (optional)
        print("Global key bindings set up.")

        # IMPORTANT: Prevent default text widget bindings for Copy/Paste if needed
        # This stops Ctrl+C/V from trying to act on focused widgets like Entries
        # if you want the menu action to ALWAYS take precedence.
        # Use with caution, might interfere with expected text editing.
        # self.root.event_delete("<<Copy>>", "<Control-c>")
        # self.root.event_delete("<<Paste>>", "<Control-v>")

    def handle_map_tab_keypress(self, event):
        """Handles key presses specifically bound when the Map Tab is active."""
        key = event.keysym.lower()

        if key == "g":  # MODIFIED CHECK
            # Only cycle color if the key is 'g' (this handler is only active on map tab)
            self.cycle_grid_color()
            return "break"  # Prevent any other default actions for 'g'

    def _place_tile_in_supertile(self, r_place, c_place): # Renamed r, c
        global supertiles_data, current_supertile_index, selected_tile_for_supertile # Globals
        
        if not (0 <= current_supertile_index < num_supertiles):
            return False
        if not (0 <= selected_tile_for_supertile < num_tiles_in_set):
            return False
        
        # Check against current project's supertile dimensions
        if not (0 <= r_place < self.supertile_grid_height and 0 <= c_place < self.supertile_grid_width):
            return False

        # Ensure definition structure is consistent before trying to access/modify
        current_definition_place = supertiles_data[current_supertile_index]
        if not current_definition_place or len(current_definition_place) != self.supertile_grid_height or \
           (self.supertile_grid_height > 0 and (len(current_definition_place[0]) != self.supertile_grid_width)):
            # print(f"Warning: Supertile {current_supertile_index} dim mismatch in _place_tile_in_supertile.")
            return False


        if current_definition_place[r_place][c_place] != selected_tile_for_supertile:
            if self._clear_marked_unused(trigger_redraw=False):
                self.update_all_displays(changed_level="all")

            # Modify the global supertiles_data directly
            supertiles_data[current_supertile_index][r_place][c_place] = selected_tile_for_supertile
            
            self.invalidate_supertile_cache(current_supertile_index)
            if not (self.marked_unused_tiles or self.marked_unused_supertiles):
                self.update_all_displays(changed_level="supertile")
            else: # Marks were cleared
                self.update_all_displays(changed_level="all") # Ensure full redraw
            self._mark_project_modified()
            return True
        else:
            return False

    def handle_supertile_def_drag(self, event):
        if not (0 <= selected_tile_for_supertile < num_tiles_in_set):
            return

        canvas = self.supertile_def_canvas
        # SUPERTILE_DEF_TILE_SIZE is display size of one mini-tile
        mini_tile_dsize = SUPERTILE_DEF_TILE_SIZE 
        if mini_tile_dsize <= 0 or not canvas.winfo_exists():
            return

        col_drag = event.x // mini_tile_dsize
        row_drag = event.y // mini_tile_dsize

        current_cell_drag = (row_drag, col_drag)

        # Check bounds against current project's supertile dimensions
        # The _place_tile_in_supertile will do the ultimate bounds check against self.sgw/sgh
        if (0 <= row_drag < self.supertile_grid_height and \
            0 <= col_drag < self.supertile_grid_width and \
            current_cell_drag != self.last_placed_supertile_cell):

            placed_drag = self._place_tile_in_supertile(row_drag, col_drag)

            if placed_drag:
                self.last_placed_supertile_cell = current_cell_drag

    def handle_supertile_def_release(self, event):
        """Resets the drag state when the mouse button is released over the supertile definition canvas."""
        self.last_placed_supertile_cell = None

    def _update_map_coords_display(self, event):
        """Updates the coordinate label based on mouse motion over the map canvas."""
        if not hasattr(self, "map_canvas") or not self.map_canvas.winfo_exists():
            return

        canvas = self.map_canvas
        try:
            canvas_x = canvas.canvasx(event.x)
            canvas_y = canvas.canvasy(event.y)

            # Calculate supertile size at current zoom USING PROJECT DIMENSIONS
            zoomed_st_pixel_w, zoomed_st_pixel_h = self._get_zoomed_supertile_pixel_dims() # <--- USE THIS

            if zoomed_st_pixel_w <= 0 or zoomed_st_pixel_h <= 0: # Check both
                if hasattr(self, "map_coords_label"):
                    self.map_coords_label.config(text="ST Coords: Error")
                return

            # Calculate supertile row/col
            st_col = int(canvas_x // zoomed_st_pixel_w) # Use width for col
            st_row = int(canvas_y // zoomed_st_pixel_h) # Use height for row

            if 0 <= st_row < map_height and 0 <= st_col < map_width:
                coords_text = f"ST Coords: {st_col}, {st_row}"
            else:
                coords_text = "ST Coords: Out"

            if hasattr(self, "map_coords_label"):
                self.map_coords_label.config(text=coords_text)

        except Exception as e:
            if hasattr(self, "map_coords_label"):
                self.map_coords_label.config(text="ST Coords: Error")

    def _mark_project_modified(self):
        """Sets the project modified flag to True and updates the window title if needed."""
        if not self.project_modified:
            self.project_modified = True
            self._update_window_title()  # Update title when first marked as modified

    def flip_supertile_horizontal(self):
        global supertiles_data, current_supertile_index, num_supertiles # supertiles_data global
        if not (0 <= current_supertile_index < num_supertiles):
            return

        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        current_definition = supertiles_data[current_supertile_index]
        
        # Ensure definition structure matches project settings before modification
        if not current_definition or len(current_definition) != self.supertile_grid_height or \
           (self.supertile_grid_height > 0 and (len(current_definition[0]) != self.supertile_grid_width)):
            # print(f"Warning: Supertile {current_supertile_index} dimensions mismatch for horizontal flip.")
            # Optionally show error or skip
            if not (self.marked_unused_tiles or self.marked_unused_supertiles):
                 self.update_all_displays(changed_level="supertile") # Redraw to show original if error
            return

        new_definition_flipped = []
        for r_flip_h in range(self.supertile_grid_height): # Iterate through rows
            # Ensure row exists and is a list before reversing
            if r_flip_h < len(current_definition) and isinstance(current_definition[r_flip_h], list):
                 new_definition_flipped.append(current_definition[r_flip_h][::-1]) # Reverse each row
            else: # Handle malformed row, append a blank row of correct width
                 new_definition_flipped.append([0] * self.supertile_grid_width)


        supertiles_data[current_supertile_index] = new_definition_flipped

        self._mark_project_modified()
        self.invalidate_supertile_cache(current_supertile_index)
        self.invalidate_minimap_background_cache()
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="supertile")
        else: # Marks were cleared
            self.update_all_displays(changed_level="all") # Ensure full redraw
        print(f"Supertile {current_supertile_index} flipped horizontally.")

    def flip_supertile_vertical(self):
        global supertiles_data, current_supertile_index, num_supertiles # supertiles_data global
        if not (0 <= current_supertile_index < num_supertiles):
            return

        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        current_definition_to_flip = supertiles_data[current_supertile_index]
        
        # Optional: Check if current_definition_to_flip actual height matches self.supertile_grid_height
        if len(current_definition_to_flip) != self.supertile_grid_height:
            # print(f"Warning: Supertile {current_supertile_index} height mismatch for vertical flip. Proceeding with actual length.")
            # This might indicate inconsistent data. For robustness, one might pad/truncate current_definition_to_flip
            # to self.supertile_grid_height before reversing, or create a new list.
            # For now, we reverse what's there.
            pass

        current_definition_to_flip.reverse() # Reverses the list of rows

        # No need to reassign to supertiles_data[current_supertile_index] as reverse() is in-place

        self._mark_project_modified()
        self.invalidate_supertile_cache(current_supertile_index)
        self.invalidate_minimap_background_cache()
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="supertile")
        else:
            self.update_all_displays(changed_level="all")
        print(f"Supertile {current_supertile_index} flipped vertically.")

    def rotate_supertile_90cw(self):
        global supertiles_data, current_supertile_index, num_supertiles # supertiles_data global
        
        if not (0 <= current_supertile_index < num_supertiles):
            return

        # --- Disable rotation for non-square supertiles ---
        if self.supertile_grid_width != self.supertile_grid_height:
            messagebox.showinfo("Rotate Supertile", "Rotation is only enabled for square supertiles.", parent=self.root)
            return
        # --- End disable ---

        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        current_definition_rotate = supertiles_data[current_supertile_index]
        
        # Since it's square, dim_rotate = self.supertile_grid_width (or height)
        dim_rotate = self.supertile_grid_width 
        
        # Ensure definition structure matches before rotation
        if not current_definition_rotate or len(current_definition_rotate) != dim_rotate or \
           (dim_rotate > 0 and (len(current_definition_rotate[0]) != dim_rotate)):
            # print(f"Warning: Supertile {current_supertile_index} dimensions mismatch for rotation.")
            if not (self.marked_unused_tiles or self.marked_unused_supertiles):
                 self.update_all_displays(changed_level="supertile")
            return

        new_definition_rotated = [[0 for _c in range(dim_rotate)] for _r in range(dim_rotate)]

        for r_rot in range(dim_rotate):
            for c_rot in range(dim_rotate):
                # Check bounds just in case definition was malformed despite earlier check
                if r_rot < len(current_definition_rotate) and c_rot < len(current_definition_rotate[r_rot]):
                    new_definition_rotated[c_rot][(dim_rotate - 1) - r_rot] = current_definition_rotate[r_rot][c_rot]
                # Else, new_definition_rotated already has 0 for that cell

        supertiles_data[current_supertile_index] = new_definition_rotated

        self._mark_project_modified()
        self.invalidate_supertile_cache(current_supertile_index)
        self.invalidate_minimap_background_cache()
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="supertile")
        else:
            self.update_all_displays(changed_level="all")
        print(f"Supertile {current_supertile_index} rotated 90 CW.")

    def shift_supertile_up(self):
        global supertiles_data, current_supertile_index, num_supertiles # supertiles_data global
        
        current_st_height = self.supertile_grid_height # Use current project setting
        if not (0 <= current_supertile_index < num_supertiles) or current_st_height <= 0:
            return

        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        current_definition_shift = supertiles_data[current_supertile_index]
        
        # Ensure definition structure matches project settings
        if not current_definition_shift or len(current_definition_shift) != current_st_height:
            # print(f"Warning: Supertile {current_supertile_index} height mismatch for shift up.")
            if not (self.marked_unused_tiles or self.marked_unused_supertiles):
                 self.update_all_displays(changed_level="supertile")
            return
        
        # Store the first row (which will wrap around to the bottom)
        # Ensure it's a deepcopy if rows themselves are mutable lists and you want to avoid aliasing issues,
        # though for lists of integers (tile indices), direct assignment is fine for the row itself.
        first_row_data = current_definition_shift[0][:] # Shallow copy of the row is sufficient

        for r_shift_up in range(current_st_height - 1):
            current_definition_shift[r_shift_up] = current_definition_shift[r_shift_up + 1]

        current_definition_shift[current_st_height - 1] = first_row_data
        
        # No need to reassign to supertiles_data as modification is in-place

        self._mark_project_modified()
        self.invalidate_supertile_cache(current_supertile_index)
        self.invalidate_minimap_background_cache()
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="supertile")
        else:
            self.update_all_displays(changed_level="all")
        print(f"Supertile {current_supertile_index} shifted up.")

    def shift_supertile_down(self):
        global supertiles_data, current_supertile_index, num_supertiles # supertiles_data global
        
        current_st_height = self.supertile_grid_height
        if not (0 <= current_supertile_index < num_supertiles) or current_st_height <= 0:
            return

        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        current_definition_shift_d = supertiles_data[current_supertile_index]

        if not current_definition_shift_d or len(current_definition_shift_d) != current_st_height:
            # print(f"Warning: Supertile {current_supertile_index} height mismatch for shift down.")
            if not (self.marked_unused_tiles or self.marked_unused_supertiles):
                 self.update_all_displays(changed_level="supertile")
            return
            
        last_row_data = current_definition_shift_d[current_st_height - 1][:] # Shallow copy

        for r_shift_d in range(current_st_height - 1, 0, -1):
            current_definition_shift_d[r_shift_d] = current_definition_shift_d[r_shift_d - 1]

        current_definition_shift_d[0] = last_row_data

        self._mark_project_modified()
        self.invalidate_supertile_cache(current_supertile_index)
        self.invalidate_minimap_background_cache()
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="supertile")
        else:
            self.update_all_displays(changed_level="all")
        print(f"Supertile {current_supertile_index} shifted down.")

    def shift_supertile_left(self):
        global supertiles_data, current_supertile_index, num_supertiles # supertiles_data global
        
        current_st_w = self.supertile_grid_width
        current_st_h = self.supertile_grid_height
        if not (0 <= current_supertile_index < num_supertiles) or current_st_w <= 0 or current_st_h <= 0:
            return

        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        current_definition_shift_l = supertiles_data[current_supertile_index]

        # Basic structure check
        if not current_definition_shift_l or len(current_definition_shift_l) != current_st_h or \
           (current_st_h > 0 and (len(current_definition_shift_l[0]) != current_st_w)):
            # print(f"Warning: Supertile {current_supertile_index} dimensions mismatch for shift left.")
            if not (self.marked_unused_tiles or self.marked_unused_supertiles):
                 self.update_all_displays(changed_level="supertile")
            return

        for r_shift_l in range(current_st_h): # Iterate through each row
            # Ensure row exists (it should, based on height check)
            if r_shift_l < len(current_definition_shift_l):
                row_data_list = current_definition_shift_l[r_shift_l]
                # Ensure row_data_list has expected width
                if len(row_data_list) == current_st_w and current_st_w > 0 :
                    first_tile_in_row = row_data_list[0]
                    for c_shift_l in range(current_st_w - 1):
                        row_data_list[c_shift_l] = row_data_list[c_shift_l + 1]
                    row_data_list[current_st_w - 1] = first_tile_in_row
                # else: Malformed row width, skip shifting this row or pad/error. For now, skip.
            # else: Malformed definition (too few rows), skip.

        self._mark_project_modified()
        self.invalidate_supertile_cache(current_supertile_index)
        self.invalidate_minimap_background_cache()
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="supertile")
        else:
            self.update_all_displays(changed_level="all")
        print(f"Supertile {current_supertile_index} shifted left.")

    def shift_supertile_right(self):
        global supertiles_data, current_supertile_index, num_supertiles # supertiles_data global

        current_st_w = self.supertile_grid_width
        current_st_h = self.supertile_grid_height
        if not (0 <= current_supertile_index < num_supertiles) or current_st_w <= 0 or current_st_h <= 0:
            return

        if self._clear_marked_unused(trigger_redraw=False):
            self.update_all_displays(changed_level="all")

        current_definition_shift_r = supertiles_data[current_supertile_index]

        if not current_definition_shift_r or len(current_definition_shift_r) != current_st_h or \
           (current_st_h > 0 and (len(current_definition_shift_r[0]) != current_st_w)):
            # print(f"Warning: Supertile {current_supertile_index} dimensions mismatch for shift right.")
            if not (self.marked_unused_tiles or self.marked_unused_supertiles):
                 self.update_all_displays(changed_level="supertile")
            return

        for r_shift_r in range(current_st_h):
            if r_shift_r < len(current_definition_shift_r):
                row_data_list_r = current_definition_shift_r[r_shift_r]
                if len(row_data_list_r) == current_st_w and current_st_w > 0:
                    last_tile_in_row = row_data_list_r[current_st_w - 1]
                    for c_shift_r in range(current_st_w - 1, 0, -1):
                        row_data_list_r[c_shift_r] = row_data_list_r[c_shift_r - 1]
                    row_data_list_r[0] = last_tile_in_row
                # else: Malformed row width
            # else: Malformed definition

        self._mark_project_modified()
        self.invalidate_supertile_cache(current_supertile_index)
        self.invalidate_minimap_background_cache()
        if not (self.marked_unused_tiles or self.marked_unused_supertiles):
            self.update_all_displays(changed_level="supertile")
        else:
            self.update_all_displays(changed_level="all")
        print(f"Supertile {current_supertile_index} shifted right.")

    def handle_supertile_def_right_click(self, event):
        global selected_tile_for_supertile, current_supertile_index, num_supertiles, num_tiles_in_set, supertiles_data

        canvas = self.supertile_def_canvas
        # SUPERTILE_DEF_TILE_SIZE is display size of one mini-tile in editor
        mini_tile_disp_size = SUPERTILE_DEF_TILE_SIZE 
        if mini_tile_disp_size <= 0 or not canvas.winfo_exists():
            return

        col = event.x // mini_tile_disp_size
        row = event.y // mini_tile_disp_size

        # Check click against current project's supertile dimensions
        if (
            0 <= row < self.supertile_grid_height
            and 0 <= col < self.supertile_grid_width
            and 0 <= current_supertile_index < num_supertiles
        ):
            try:
                # Ensure definition structure matches before accessing
                definition_rc = supertiles_data[current_supertile_index]
                if not definition_rc or len(definition_rc) != self.supertile_grid_height or \
                   (self.supertile_grid_height > 0 and (len(definition_rc[0]) != self.supertile_grid_width)):
                    # print(f"Warning: ST def {current_supertile_index} dim mismatch in right_click.")
                    return

                clicked_tile_index_val = definition_rc[row][col]

                if 0 <= clicked_tile_index_val < num_tiles_in_set:
                    if selected_tile_for_supertile != clicked_tile_index_val:
                        selected_tile_for_supertile = clicked_tile_index_val
                        # print(f"Right-click selected Tile: {selected_tile_for_supertile}")
                        self.draw_tileset_viewer(
                            self.st_tileset_canvas, selected_tile_for_supertile
                        )
                        self.update_supertile_info_labels()
                        self.scroll_viewers_to_tile(selected_tile_for_supertile)
                # else:
                    # print(f"Right-click: Tile index {clicked_tile_index_val} at ST def [{row},{col}] is out of tile bounds (max {num_tiles_in_set-1}).")

            except IndexError: # Should be caught by structure check above
                # print(f"Right-click: IndexError accessing supertile data for ST {current_supertile_index} at def [{row},{col}].")
                pass
            except Exception as e:
                # print(f"Right-click: Unexpected error in supertile def handler: {e}")
                pass
        # else: Click was outside the definition grid based on current W/H dimensions

    def handle_map_canvas_right_click(self, event):
        """Handles right-click on the map canvas to select the clicked supertile."""
        global selected_supertile_for_map, map_data, map_width, map_height, num_supertiles

        # Prevent interference with panning or other actions
        if self.current_mouse_action is not None:
            return "break"  # Stop event propagation if another action is active

        canvas = self.map_canvas
        if not canvas.winfo_exists():
            return

        # Calculate zoomed supertile size
        zoomed_tile_size = self.get_zoomed_tile_size()
        if zoomed_tile_size <= 0:
            return
        zoomed_supertile_size = SUPERTILE_GRID_DIM * zoomed_tile_size
        if zoomed_supertile_size <= 0:
            return

        # Get canvas coordinates (handles scrolling)
        canvas_x = canvas.canvasx(event.x)
        canvas_y = canvas.canvasy(event.y)

        # Calculate map column and row in supertile units
        map_col = int(canvas_x // zoomed_supertile_size)
        map_row = int(canvas_y // zoomed_supertile_size)

        # Check if the click is within the map bounds
        if 0 <= map_row < map_height and 0 <= map_col < map_width:
            try:
                # Get the supertile index at the clicked map cell
                clicked_supertile_index = map_data[map_row][map_col]

                # Check if the retrieved supertile index is valid
                if 0 <= clicked_supertile_index < num_supertiles:
                    # Check if the selection actually changed
                    if selected_supertile_for_map != clicked_supertile_index:
                        selected_supertile_for_map = clicked_supertile_index
                        print(
                            f"Right-click selected Supertile: {selected_supertile_for_map}"
                        )
                        # Redraw the supertile selector in the map tab
                        self.draw_supertile_selector(
                            self.map_supertile_selector_canvas,
                            selected_supertile_for_map,
                        )
                        # Update the info label
                        self.update_map_info_labels()
                        # Scroll the selector to the selected supertile
                        self.scroll_selectors_to_supertile(selected_supertile_for_map)
                else:
                    print(
                        f"Right-click: Supertile index {clicked_supertile_index} at map [{map_row},{map_col}] is out of bounds (max {num_supertiles-1})."
                    )

            except IndexError:
                print(
                    f"Right-click: Error accessing map data at [{map_row},{map_col}]."
                )
            except Exception as e:
                print(f"Right-click: Unexpected error in map canvas handler: {e}")

    def _check_tile_usage(self, tile_index_check): # Renamed tile_index
        used_in_supertiles_list = [] # Renamed
        if not (0 <= tile_index_check < num_tiles_in_set):
            return used_in_supertiles_list

        for st_idx_check in range(num_supertiles):
            definition_check = supertiles_data[st_idx_check] # global
            
            # Check consistency of this definition with project settings
            if not definition_check or len(definition_check) != self.supertile_grid_height or \
               (self.supertile_grid_height > 0 and (len(definition_check[0]) != self.supertile_grid_width)):
                # print(f"Warning: Supertile {st_idx_check} has inconsistent dimensions in _check_tile_usage. Skipping.")
                continue # Skip this malformed supertile definition

            found_in_current_st = False
            for r_check in range(self.supertile_grid_height):
                for c_check in range(self.supertile_grid_width):
                    # Bounds check for r_check, c_check within definition_check already done by loops
                    # and the initial structure check.
                    if definition_check[r_check][c_check] == tile_index_check:
                        if st_idx_check not in used_in_supertiles_list:
                            used_in_supertiles_list.append(st_idx_check)
                        found_in_current_st = True
                        break 
                if found_in_current_st:
                    break 
        return used_in_supertiles_list

    def _check_supertile_usage(self, supertile_index):
        """Checks if a supertile_index is used in the map data.
        Returns a list of (row, col) map coordinates that use it.
        """
        used_in_map = []
        if not (0 <= supertile_index < num_supertiles):
            return used_in_map  # Invalid index

        for r in range(map_height):
            for c in range(map_width):
                if map_data[r][c] == supertile_index:
                    used_in_map.append((r, c))
        return used_in_map

    # --- NEW: Reference Update Helpers ---
    def _update_supertile_refs_for_tile_change(self, tile_idx_changed, action_type): # Renamed index, action
        # This method assumes supertiles_data (global) is correctly structured
        # according to self.supertile_grid_width and self.supertile_grid_height.

        for st_idx_update in range(num_supertiles):
            current_definition_update = supertiles_data[st_idx_update] # global

            # Basic check for definition consistency
            if not current_definition_update or len(current_definition_update) != self.supertile_grid_height or \
               (self.supertile_grid_height > 0 and (len(current_definition_update[0]) != self.supertile_grid_width)):
                # print(f"Warning: Supertile {st_idx_update} has inconsistent dimensions in _update_supertile_refs. Skipping.")
                continue

            for r_update in range(self.supertile_grid_height):
                for c_update in range(self.supertile_grid_width):
                    # Bounds for r_update, c_update are implicitly handled by loops
                    # and the consistency check above.
                    current_tile_ref = current_definition_update[r_update][c_update]
                    
                    if action_type == "insert":
                        if current_tile_ref >= tile_idx_changed:
                            # current_definition_update[r_update][c_update] += 1
                            # It's safer to modify the global directly if that's the pattern
                            supertiles_data[st_idx_update][r_update][c_update] += 1
                    elif action_type == "delete":
                        if current_tile_ref == tile_idx_changed:
                            supertiles_data[st_idx_update][r_update][c_update] = 0 # Replace deleted with tile 0
                        elif current_tile_ref > tile_idx_changed:
                            supertiles_data[st_idx_update][r_update][c_update] -= 1
                    # else: No action for unknown action_type (already printed warning if that happened)
        
        # No specific warning for unknown action_type here, assumed to be handled by caller or design.

    def _update_map_refs_for_supertile_change(self, index, action):
        """Updates supertile indices in the map data after a supertile insert/delete.

        Args:
            index (int): The index where the supertile insert/delete occurred.
            action (str): 'insert' or 'delete'.
        """
        if action == "insert":
            # Increment references >= index
            for r in range(map_height):
                for c in range(map_width):
                    if map_data[r][c] >= index:
                        map_data[r][c] += 1
        elif action == "delete":
            # Decrement references > index, set == index to 0
            for r in range(map_height):
                for c in range(map_width):
                    if map_data[r][c] == index:
                        map_data[r][c] = 0  # Replace deleted with supertile 0
                    elif map_data[r][c] > index:
                        map_data[r][c] -= 1
        else:
            print(
                f"Warning: Unknown action '{action}' in _update_map_refs_for_supertile_change"
            )

    def _insert_tile(self, index):
        """Core logic to insert a blank tile at the specified index.

        Args:
            index (int): The index at which to insert.

        Returns:
            bool: True if insertion was successful, False otherwise.
        """
        global num_tiles_in_set, tileset_patterns, tileset_colors, WHITE_IDX, BLACK_IDX

        if not (
            0 <= index <= num_tiles_in_set
        ):  # Allow inserting at the end (index == count)
            print(
                f"Error: Insert tile index {index} out of range [0, {num_tiles_in_set}]."
            )
            return False
        if num_tiles_in_set >= MAX_TILES:
            print("Error: Cannot insert tile, maximum tiles reached.")
            # Optionally show messagebox if needed later, but core logic just returns False
            # messagebox.showwarning("Maximum Tiles", f"Cannot insert: Max {MAX_TILES} tiles reached.")
            return False

        # Create blank tile data
        blank_pattern = [[0] * TILE_WIDTH for _ in range(TILE_HEIGHT)]
        blank_colors = [(WHITE_IDX, BLACK_IDX) for _ in range(TILE_HEIGHT)]

        # Insert into data lists
        tileset_patterns.insert(index, blank_pattern)
        tileset_colors.insert(index, blank_colors)
        # Remove the overflow if MAX_TILES was exceeded by insert (shouldn't happen due to check)
        # Although Python lists grow, our MAX_TILES implies a fixed-size array conceptually
        if len(tileset_patterns) > MAX_TILES:
            tileset_patterns.pop()
        if len(tileset_colors) > MAX_TILES:
            tileset_colors.pop()

        # Update references in supertiles
        self._update_supertile_refs_for_tile_change(index, "insert")

        # Mark modified AFTER successful data changes
        self._mark_project_modified()
        return True

    def _delete_tile(self, index):
        """Core logic to delete the tile at the specified index.

        Args:
            index (int): The index of the tile to delete.

        Returns:
            bool: True if deletion was successful, False otherwise.
        """
        global num_tiles_in_set, tileset_patterns, tileset_colors

        if not (0 <= index < num_tiles_in_set):
            print(
                f"Error: Delete tile index {index} out of range [0, {num_tiles_in_set - 1}]."
            )
            return False
        if num_tiles_in_set <= 1:
            print("Error: Cannot delete the last tile.")
            # messagebox.showwarning("Cannot Delete", "Cannot delete the last remaining tile.")
            return False

        # --- Confirmation is handled by the UI caller ---

        # Delete from data lists
        del tileset_patterns[index]
        del tileset_colors[index]

        # Append dummy data to keep list size MAX_TILES (conceptually)
        # Or adjust MAX_TILES usage if lists are truly dynamic
        # For now, let's assume we might refill later, so keep placeholders?
        # Alternative: just let list shrink. Let's let it shrink.
        # tileset_patterns.append([[0]*TILE_WIDTH for _ in range(TILE_HEIGHT)])
        # tileset_colors.append([(WHITE_IDX, BLACK_IDX) for _ in range(TILE_HEIGHT)])

        # Update references in supertiles
        self._update_supertile_refs_for_tile_change(index, "delete")

        # Mark modified AFTER successful data changes
        self._mark_project_modified()
        return True

    def _insert_supertile(self, index_to_insert_at): # Renamed index
        global num_supertiles, supertiles_data # supertiles_data is global

        if not (0 <= index_to_insert_at <= num_supertiles):
            # print(f"Error: Insert supertile index {index_to_insert_at} out of range [0, {num_supertiles}].")
            return False
        if num_supertiles >= MAX_SUPERTILES:
            # print("Error: Cannot insert supertile, maximum reached.")
            return False

        # Create blank supertile data using current project dimensions
        blank_st_definition = [
            [0 for _c in range(self.supertile_grid_width)] for _r in range(self.supertile_grid_height)
        ]

        supertiles_data.insert(index_to_insert_at, blank_st_definition) # Inserts into global
        
        # If supertiles_data is meant to be strictly MAX_SUPERTILES in length (padded)
        if len(supertiles_data) > MAX_SUPERTILES:
            supertiles_data.pop() # Remove the last one if insertion exceeded MAX_SUPERTILES conceptual limit

        self._update_map_refs_for_supertile_change(index_to_insert_at, "insert")
        self._mark_project_modified()
        return True

    def _delete_supertile(self, index):
        """Core logic to delete the supertile at the specified index.

        Args:
            index (int): The index of the supertile to delete.

        Returns:
            bool: True if deletion was successful, False otherwise.
        """
        global num_supertiles, supertiles_data

        if not (0 <= index < num_supertiles):
            print(
                f"Error: Delete supertile index {index} out of range [0, {num_supertiles - 1}]."
            )
            return False
        if num_supertiles <= 1:
            print("Error: Cannot delete the last supertile.")
            # messagebox.showwarning("Cannot Delete", "Cannot delete the last remaining supertile.")
            return False

        # --- Confirmation is handled by the UI caller ---

        # Delete from data list
        del supertiles_data[index]
        # Let list shrink

        # Update references in map
        self._update_map_refs_for_supertile_change(index, "delete")

        self._mark_project_modified()
        return True

    def _update_editor_button_states(self):
        """Updates the enable/disable state of Add/Insert/Delete buttons."""
        global num_tiles_in_set, num_supertiles

        # --- Tile Editor Buttons ---
        can_add_tile = num_tiles_in_set < MAX_TILES
        can_insert_tile = num_tiles_in_set < MAX_TILES
        can_delete_tile = num_tiles_in_set > 1

        if hasattr(self, "add_tile_button"):
            self.add_tile_button.config(
                state=tk.NORMAL if can_add_tile else tk.DISABLED
            )
        if hasattr(self, "insert_tile_button"):
            self.insert_tile_button.config(
                state=tk.NORMAL if can_insert_tile else tk.DISABLED
            )
        if hasattr(self, "delete_tile_button"):
            self.delete_tile_button.config(
                state=tk.NORMAL if can_delete_tile else tk.DISABLED
            )

        # --- Supertile Editor Buttons ---
        can_add_supertile = num_supertiles < MAX_SUPERTILES
        can_insert_supertile = num_supertiles < MAX_SUPERTILES
        can_delete_supertile = num_supertiles > 1

        if hasattr(self, "add_supertile_button"):
            self.add_supertile_button.config(
                state=tk.NORMAL if can_add_supertile else tk.DISABLED
            )
        if hasattr(self, "insert_supertile_button"):
            self.insert_supertile_button.config(
                state=tk.NORMAL if can_insert_supertile else tk.DISABLED
            )
        if hasattr(self, "delete_supertile_button"):
            self.delete_supertile_button.config(
                state=tk.NORMAL if can_delete_supertile else tk.DISABLED
            )

    def handle_add_tile(self):  
        global num_tiles_in_set, current_tile_index
        
        # Clear marks BEFORE any modification that changes usage or indices
        if self._clear_marked_unused(trigger_redraw=False):
            # If marks were cleared, ensure a full redraw happens after other operations
            # by setting a flag or letting update_all_displays in success path handle it.
            # For simplicity here, we'll rely on the update_all_displays in the success path.
            pass

        success = self._insert_tile(num_tiles_in_set)  # Insert at the very end

        if success:
            num_tiles_in_set += 1
            new_tile_idx = num_tiles_in_set - 1
            current_tile_index = new_tile_idx  # Select the newly added tile

            self.clear_all_caches()  
            self.invalidate_minimap_background_cache()
            self.update_all_displays(changed_level="all")  # Update everything
            self.scroll_viewers_to_tile(current_tile_index)
            self._update_editor_button_states()  
            # self._mark_project_modified() is called within _insert_tile
            print(f"Added new tile {new_tile_idx}")
        else:
            messagebox.showwarning(
                "Add Tile Failed", f"Could not add tile. Maximum {MAX_TILES} reached?"
            )

    def handle_insert_tile(self):
        global num_tiles_in_set, current_tile_index, selected_tile_for_supertile

        if self._clear_marked_unused(trigger_redraw=False):
            pass # Full redraw will happen if successful

        insert_idx = current_tile_index
        success = self._insert_tile(insert_idx)

        if success:
            num_tiles_in_set += 1
            current_tile_index = insert_idx # Selection stays at the new blank tile

            if selected_tile_for_supertile >= insert_idx:
                selected_tile_for_supertile += 1
            # Clamp to be safe, though _insert_tile should ensure num_tiles_in_set is valid for this
            selected_tile_for_supertile = min(selected_tile_for_supertile, num_tiles_in_set -1)


            self.clear_all_caches()
            self.invalidate_minimap_background_cache()
            self.update_all_displays(changed_level="all")
            self.scroll_viewers_to_tile(current_tile_index)
            self._update_editor_button_states()
            # self._mark_project_modified() is called within _insert_tile
            print(f"Inserted tile at index {insert_idx}")
        else:
            messagebox.showwarning(
                "Insert Tile Failed",
                f"Could not insert tile. Maximum {MAX_TILES} reached?",
            )

    def handle_delete_tile(self):
        global num_tiles_in_set, current_tile_index, selected_tile_for_supertile

        if num_tiles_in_set <= 1:
            messagebox.showinfo("Delete Tile", "Cannot delete the last tile.")
            return

        delete_idx = current_tile_index
        if not (0 <= delete_idx < num_tiles_in_set):
            messagebox.showerror("Delete Tile Error", "Invalid tile index selected.")
            return

        usage = self._check_tile_usage(delete_idx)
        confirm_msg = f"Delete Tile {delete_idx}?"
        if usage:
            confirm_msg += "\n\n*** WARNING! ***\nThis tile is used by the following Supertile(s):\n"
            confirm_msg += ", ".join(map(str, usage[:10]))  
            if len(usage) > 10:
                confirm_msg += "..."
            confirm_msg += (
                f"\n\nReferences in these Supertiles will be reset to Tile 0."
            )

        if not messagebox.askokcancel("Confirm Delete", confirm_msg, icon="warning"):
            return
        
        # Adjust marked set BEFORE actual data deletion and BEFORE _delete_tile
        # because _delete_tile will change num_tiles_in_set which might affect _adjust_marked logic
        # if it relied on the old num_tiles_in_set.
        self._adjust_marked_indices_after_delete(self.marked_unused_tiles, delete_idx)

        success = self._delete_tile(delete_idx) # Core logic does NOT clear marks

        if success:
            num_tiles_in_set -= 1
            # Adjust selection: stay at index if possible, else clamp to new max
            current_tile_index = min(delete_idx, num_tiles_in_set - 1)
            current_tile_index = max(0, current_tile_index) # Ensure not -1 if last tile deleted

            # Adjust other selections if they pointed to deleted or higher index
            if selected_tile_for_supertile == delete_idx:
                selected_tile_for_supertile = 0 # Default to 0 if deleted
            elif selected_tile_for_supertile > delete_idx:
                selected_tile_for_supertile -= 1
            selected_tile_for_supertile = min(selected_tile_for_supertile, num_tiles_in_set -1)
            selected_tile_for_supertile = max(0, selected_tile_for_supertile)


            self.clear_all_caches()
            self.invalidate_minimap_background_cache()
            self.update_all_displays(changed_level="all") # This will redraw with adjusted marks
            self.scroll_viewers_to_tile(current_tile_index)  
            self._update_editor_button_states()
            # self._mark_project_modified() is called within _delete_tile
            print(f"Deleted tile at index {delete_idx}")
        else:
            messagebox.showerror(
                "Delete Tile Failed", "An error occurred during tile deletion."
            )

    def handle_add_supertile(self):  
        global num_supertiles, current_supertile_index

        if self._clear_marked_unused(trigger_redraw=False):
            pass

        success = self._insert_supertile(num_supertiles)  

        if success:
            num_supertiles += 1
            new_st_idx = num_supertiles - 1
            current_supertile_index = new_st_idx  

            self.supertile_image_cache.clear()  
            self.invalidate_minimap_background_cache()
            self.update_all_displays(
                changed_level="all" # Changed to all
            )  
            self.scroll_selectors_to_supertile(current_supertile_index)
            self._update_editor_button_states()
            # self._mark_project_modified() is called within _insert_supertile
            print(f"Added new supertile {new_st_idx}")
        else:
            messagebox.showwarning(
                "Add Supertile Failed",
                f"Could not add supertile. Maximum {MAX_SUPERTILES} reached?",
            )

    def handle_insert_supertile(self):
        global num_supertiles, current_supertile_index, selected_supertile_for_map

        if self._clear_marked_unused(trigger_redraw=False):
            pass

        insert_idx = current_supertile_index
        success = self._insert_supertile(insert_idx)

        if success:
            num_supertiles += 1
            current_supertile_index = insert_idx

            if selected_supertile_for_map >= insert_idx:
                selected_supertile_for_map += 1
            selected_supertile_for_map = min(selected_supertile_for_map, num_supertiles -1)

            self.supertile_image_cache.clear()
            self.invalidate_minimap_background_cache()
            self.update_all_displays(changed_level="all") # Changed to all
            self.scroll_selectors_to_supertile(current_supertile_index)
            self._update_editor_button_states()
            # self._mark_project_modified() is called within _insert_supertile
            print(f"Inserted supertile at index {insert_idx}")
        else:
            messagebox.showwarning(
                "Insert Supertile Failed",
                f"Could not insert supertile. Maximum {MAX_SUPERTILES} reached?",
            )

    def handle_delete_supertile(self):
        global num_supertiles, current_supertile_index, selected_supertile_for_map

        if num_supertiles <= 1:
            messagebox.showinfo("Delete Supertile", "Cannot delete the last supertile.")
            return

        delete_idx = current_supertile_index
        if not (0 <= delete_idx < num_supertiles):
            messagebox.showerror(
                "Delete Supertile Error", "Invalid supertile index selected."
            )
            return

        usage = self._check_supertile_usage(delete_idx)
        confirm_msg = f"Delete Supertile {delete_idx}?"
        if usage:
            map_coords_str = ", ".join(
                [f"({r_idx},{c_idx})" for r_idx, c_idx in usage[:10]] # Renamed r,c
            )  
            confirm_msg += (
                "\n\n*** WARNING! ***\nThis supertile is used on the Map at:\n"
            )
            confirm_msg += map_coords_str
            if len(usage) > 10:
                confirm_msg += "..."
            confirm_msg += f"\n\nReferences on the Map will be reset to Supertile 0."

        if not messagebox.askokcancel("Confirm Delete", confirm_msg, icon="warning"):
            return
        
        self._adjust_marked_indices_after_delete(self.marked_unused_supertiles, delete_idx)

        success = self._delete_supertile(delete_idx) # Does not clear marks

        if success:
            num_supertiles -= 1
            current_supertile_index = min(delete_idx, num_supertiles - 1)
            current_supertile_index = max(0, current_supertile_index)


            if selected_supertile_for_map == delete_idx:
                selected_supertile_for_map = 0
            elif selected_supertile_for_map > delete_idx:
                selected_supertile_for_map -= 1
            selected_supertile_for_map = min(selected_supertile_for_map, num_supertiles - 1)
            selected_supertile_for_map = max(0, selected_supertile_for_map)


            self.supertile_image_cache.clear()
            self.invalidate_minimap_background_cache()
            self.update_all_displays(changed_level="all") # Redraws with adjusted marks
            self.scroll_selectors_to_supertile(current_supertile_index)
            self._update_editor_button_states()
            # self._mark_project_modified() is in _delete_supertile
            print(f"Deleted supertile at index {delete_idx}")
        else:
            messagebox.showerror(
                "Delete Supertile Failed",
                "An error occurred during supertile deletion.",
            )

    def _reposition_tile(self, source_index_tile, target_index_tile): # Renamed
        global num_tiles_in_set, tileset_patterns, tileset_colors # Globals
        global current_tile_index, selected_tile_for_supertile, supertiles_data # Globals

        if not (0 <= source_index_tile < num_tiles_in_set):
            # print(f"Error: Invalid source index {source_index_tile} for tile move.")
            return False
        
        # Clamp target_index_tile to be within valid bounds for insertion [0, num_tiles_in_set]
        # If target_index_tile == num_tiles_in_set, it means move to the very end.
        clamped_target_index_tile = max(0, min(target_index_tile, num_tiles_in_set))

        if source_index_tile == clamped_target_index_tile or \
           (clamped_target_index_tile == num_tiles_in_set and source_index_tile == num_tiles_in_set -1) : # Moving last item to end
             if source_index_tile == clamped_target_index_tile -1 and clamped_target_index_tile == num_tiles_in_set : # Moving last to end is okay
                  pass # Allow moving last to effectively be "at the end" which is its current pos + 1 for insert
             elif source_index_tile == clamped_target_index_tile :
                  return False # No move needed if source is already at target (and not the special end case)


        # print(f"Repositioning Tile: From {source_index_tile} to {clamped_target_index_tile}")

        moved_pattern_data = tileset_patterns.pop(source_index_tile)
        moved_colors_data = tileset_colors.pop(source_index_tile)

        # Actual insertion index if target was after source (due to pop)
        actual_insert_idx = clamped_target_index_tile
        if clamped_target_index_tile > source_index_tile:
            actual_insert_idx -= 1
        actual_insert_idx = max(0, actual_insert_idx) # Ensure not negative after adjustment

        tileset_patterns.insert(actual_insert_idx, moved_pattern_data)
        tileset_colors.insert(actual_insert_idx, moved_colors_data)

        # Update Supertile References
        for st_idx_refo in range(num_supertiles):
            definition_refo = supertiles_data[st_idx_refo] # global
            if not definition_refo or len(definition_refo) != self.supertile_grid_height or \
               (self.supertile_grid_height > 0 and (len(definition_refo[0]) != self.supertile_grid_width)):
                # print(f"Warning: ST {st_idx_refo} dim mismatch in _reposition_tile. Skipping ref update.")
                continue

            for r_refo in range(self.supertile_grid_height):
                for c_refo in range(self.supertile_grid_width):
                    current_ref_val = definition_refo[r_refo][c_refo]
                    new_ref_val = current_ref_val

                    if current_ref_val == source_index_tile:
                        new_ref_val = actual_insert_idx
                    elif source_index_tile < actual_insert_idx: # Moved DOWN (target > source logically, actual_insert_idx reflects this)
                        if source_index_tile < current_ref_val <= actual_insert_idx:
                             new_ref_val = current_ref_val - 1
                    elif source_index_tile > actual_insert_idx: # Moved UP (target < source logically)
                        if actual_insert_idx <= current_ref_val < source_index_tile:
                             new_ref_val = current_ref_val + 1
                    
                    if new_ref_val != current_ref_val:
                         supertiles_data[st_idx_refo][r_refo][c_refo] = new_ref_val # Update global

        # Update Selections
        if current_tile_index == source_index_tile:
            current_tile_index = actual_insert_idx
        elif source_index_tile < actual_insert_idx and source_index_tile < current_tile_index <= actual_insert_idx:
            current_tile_index -= 1
        elif source_index_tile > actual_insert_idx and actual_insert_idx <= current_tile_index < source_index_tile:
            current_tile_index += 1

        if selected_tile_for_supertile == source_index_tile:
            selected_tile_for_supertile = actual_insert_idx
        elif source_index_tile < actual_insert_idx and source_index_tile < selected_tile_for_supertile <= actual_insert_idx:
            selected_tile_for_supertile -= 1
        elif source_index_tile > actual_insert_idx and actual_insert_idx <= selected_tile_for_supertile < source_index_tile:
            selected_tile_for_supertile += 1

        current_tile_index = max(0, min(current_tile_index, num_tiles_in_set - 1))
        selected_tile_for_supertile = max(0, min(selected_tile_for_supertile, num_tiles_in_set - 1))

        self._mark_project_modified()
        self.clear_all_caches()
        self.invalidate_minimap_background_cache()
        # print(f"  Successfully moved Tile {source_index_tile} to {actual_insert_idx}")
        return True

    def _reposition_supertile(self, source_index_st, target_index_st): # Renamed
        global num_supertiles, supertiles_data, map_data, map_width, map_height # Globals
        global current_supertile_index, selected_supertile_for_map 

        if not (0 <= source_index_st < num_supertiles):
            # print(f"Error: Invalid source index {source_index_st} for supertile move.")
            return False
        
        clamped_target_index_st = max(0, min(target_index_st, num_supertiles))

        if source_index_st == clamped_target_index_st or \
           (clamped_target_index_st == num_supertiles and source_index_st == num_supertiles -1) :
             if source_index_st == clamped_target_index_st -1 and clamped_target_index_st == num_supertiles :
                  pass
             elif source_index_st == clamped_target_index_st :
                  return False

        # print(f"Repositioning Supertile: From {source_index_st} to {clamped_target_index_st}")

        moved_st_definition = supertiles_data.pop(source_index_st) # Global

        actual_insert_idx_st = clamped_target_index_st
        if clamped_target_index_st > source_index_st:
            actual_insert_idx_st -= 1
        actual_insert_idx_st = max(0, actual_insert_idx_st)

        supertiles_data.insert(actual_insert_idx_st, moved_st_definition) # Global

        # Update Map References
        for r_map_refo in range(map_height):
            for c_map_refo in range(map_width):
                current_map_ref = map_data[r_map_refo][c_map_refo] # Global
                new_map_ref = current_map_ref

                if current_map_ref == source_index_st:
                    new_map_ref = actual_insert_idx_st
                elif source_index_st < actual_insert_idx_st: 
                    if source_index_st < current_map_ref <= actual_insert_idx_st:
                         new_map_ref = current_map_ref - 1
                elif source_index_st > actual_insert_idx_st: 
                    if actual_insert_idx_st <= current_map_ref < source_index_st:
                         new_map_ref = current_map_ref + 1
                
                if new_map_ref != current_map_ref:
                     map_data[r_map_refo][c_map_refo] = new_map_ref # Global

        # Update Selections
        if current_supertile_index == source_index_st:
            current_supertile_index = actual_insert_idx_st
        elif source_index_st < actual_insert_idx_st and source_index_st < current_supertile_index <= actual_insert_idx_st:
            current_supertile_index -= 1
        elif source_index_st > actual_insert_idx_st and actual_insert_idx_st <= current_supertile_index < source_index_st:
            current_supertile_index += 1

        if selected_supertile_for_map == source_index_st:
            selected_supertile_for_map = actual_insert_idx_st
        elif source_index_st < actual_insert_idx_st and source_index_st < selected_supertile_for_map <= actual_insert_idx_st:
            selected_supertile_for_map -= 1
        elif source_index_st > actual_insert_idx_st and actual_insert_idx_st <= selected_supertile_for_map < source_index_st:
            selected_supertile_for_map += 1

        current_supertile_index = max(0, min(current_supertile_index, num_supertiles - 1))
        selected_supertile_for_map = max(0, min(selected_supertile_for_map, num_supertiles - 1))

        self._mark_project_modified()
        self.supertile_image_cache.clear() # Clear all ST cache as many could have effectively changed ID
        self.invalidate_minimap_background_cache()
        # print(f"  Successfully moved Supertile {source_index_st} to {actual_insert_idx_st}")
        return True

    def _get_index_from_canvas_coords(self, canvas, x_event, y_event, item_type_str): # Renamed parameters
        padding = 1 
        items_across_calc = 0
        item_render_w = 0
        item_render_h = 0
        max_items_count = 0

        if item_type_str == "tile":
            items_across_calc = NUM_TILES_ACROSS # Constant for tile viewers
            item_render_w = VIEWER_TILE_SIZE
            item_render_h = VIEWER_TILE_SIZE
            max_items_count = num_tiles_in_set
        elif item_type_str == "supertile":
            # For supertile selectors, calculate dynamic items_across
            item_render_w = self.supertile_grid_width * TILE_WIDTH # Actual pixel W of ST preview
            item_render_h = self.supertile_grid_height * TILE_HEIGHT # Actual pixel H of ST preview
            max_items_count = num_supertiles

            if item_render_w <= 0 or item_render_h <= 0: return -1 # Invalid ST dimensions

            target_layout_w = 256 # Target width for ST selector layout
            actual_canvas_w = canvas.winfo_width()
            if actual_canvas_w <= 1: return -1 # Canvas not ready

            effective_layout_w = min(target_layout_w, actual_canvas_w)
            
            current_items_across = 0
            for p_o_2_val in [32, 16, 8, 4, 2, 1]:
                if p_o_2_val == 0: continue
                required_w = (p_o_2_val * item_render_w) + ((p_o_2_val + 1) * padding)
                if required_w <= effective_layout_w:
                    current_items_across = p_o_2_val
                    break
            if current_items_across == 0:
                if item_render_w + 2 * padding <= effective_layout_w: current_items_across = 1
                elif item_render_w <= effective_layout_w: current_items_across = 1
                else: current_items_across = 1 
            items_across_calc = max(1, current_items_across)
        else:
            # print(f"Error: Invalid item_type '{item_type_str}' in _get_index_from_canvas_coords")
            return -1

        if item_render_w <= 0 or item_render_h <= 0 or items_across_calc <= 0:
            # print(f"Error: Invalid calculated layout params for {item_type_str}")
            return -1

        try:
            canvas_content_x = canvas.canvasx(x_event)
            canvas_content_y = canvas.canvasy(y_event)
        except tk.TclError:
            return -1 # Canvas might not be fully configured

        # Calculate total content dimensions based on dynamic layout for supertiles
        num_logical_rows_calc = math.ceil(max_items_count / items_across_calc) if items_across_calc > 0 else 0
        total_content_w = (items_across_calc * item_render_w) + ((items_across_calc + 1) * padding)
        total_content_h = (num_logical_rows_calc * item_render_h) + ((num_logical_rows_calc + 1) * padding)

        if not (-padding <= canvas_content_x < total_content_w and \
                -padding <= canvas_content_y < total_content_h):
            return -2 # Clicked outside grid content area (but within canvas bounds possibly)

        # Calculate column and row based on the item's render dimensions
        col_calc = int(canvas_content_x // (item_render_w + padding))
        row_calc = int(canvas_content_y // (item_render_h + padding))
        
        col_calc = max(0, col_calc) # Clamp
        row_calc = max(0, row_calc)

        index_calc = row_calc * items_across_calc + col_calc

        if 0 <= index_calc < max_items_count:
            return index_calc
        else:
            # Clicked within grid area but beyond the last *valid* item.
            # This can signify a drop target at the end of the list.
            # Return max_items_count (the count) to indicate this "end of list" target.
            return max_items_count

    def handle_viewer_drag_motion(self, event):
        if self.drag_start_index == -1 or self.drag_item_type is None or self.drag_canvas is None:
            return

        canvas_motion = event.widget 

        if not self.drag_active:
            dx = event.x - self.drag_press_x
            dy = event.y - self.drag_press_y
            distance_squared = dx*dx + dy*dy

            if distance_squared >= (DRAG_THRESHOLD_PIXELS * DRAG_THRESHOLD_PIXELS):
                self.drag_active = True
                
                if self.drag_canvas and self.drag_canvas.winfo_exists():
                    if self.drag_item_type == "tile":
                        other_highlight_idx = -1
                        if self.drag_canvas == self.tileset_canvas:
                             other_highlight_idx = selected_tile_for_supertile
                        elif self.drag_canvas == self.st_tileset_canvas:
                             other_highlight_idx = current_tile_index
                        self.draw_tileset_viewer(self.drag_canvas, other_highlight_idx) # Pass original selection
                    elif self.drag_item_type == "supertile":
                        other_highlight_idx_st = -1
                        if self.drag_canvas == self.supertile_selector_canvas:
                            other_highlight_idx_st = selected_supertile_for_map
                        elif self.drag_canvas == self.map_supertile_selector_canvas:
                            other_highlight_idx_st = current_supertile_index
                        self.draw_supertile_selector(self.drag_canvas, other_highlight_idx_st) # Pass original selection
                try:
                    if canvas_motion.winfo_exists():
                        canvas_motion.config(cursor="hand2")
                except tk.TclError: pass
            else:
                return # Threshold not met
        
        if not self.drag_active: 
            return

        target_canvas_for_indicator = self.drag_canvas # Indicator drawn on original drag canvas
        if not target_canvas_for_indicator or not target_canvas_for_indicator.winfo_exists():
            self.drag_active = False; self.drag_item_type = None; self.drag_start_index = -1; self.drag_canvas = None
            if self.drag_indicator_id and canvas_motion.winfo_exists():
                try: canvas_motion.delete(self.drag_indicator_id)
                except tk.TclError: pass
            self.drag_indicator_id = None
            return

        target_idx_motion = self._get_index_from_canvas_coords(
            canvas_motion, event.x, event.y, self.drag_item_type
        )

        if self.drag_indicator_id:
            try: target_canvas_for_indicator.delete(self.drag_indicator_id)
            except tk.TclError: pass
            self.drag_indicator_id = None

        if target_idx_motion >= 0 and canvas_motion == target_canvas_for_indicator:
            padding_ind = 1
            item_w_ind, item_h_ind, items_across_ind, max_items_ind = 0,0,0,0

            if self.drag_item_type == "tile":
                item_w_ind = VIEWER_TILE_SIZE
                item_h_ind = VIEWER_TILE_SIZE
                items_across_ind = NUM_TILES_ACROSS
                max_items_ind = num_tiles_in_set
            elif self.drag_item_type == "supertile":
                item_w_ind = self.supertile_grid_width * TILE_WIDTH
                item_h_ind = self.supertile_grid_height * TILE_HEIGHT

                max_items_ind = num_supertiles
                
                target_layout_w_ind = 256
                actual_canvas_w_ind = target_canvas_for_indicator.winfo_width()
                effective_layout_w_ind = min(target_layout_w_ind, actual_canvas_w_ind)
                current_items_across_ind = 0
                for p_o_2_val_ind in [32, 16, 8, 4, 2, 1]:
                    if p_o_2_val_ind == 0: continue
                    req_w_ind = (p_o_2_val_ind * item_w_ind) + ((p_o_2_val_ind + 1) * padding_ind)
                    if req_w_ind <= effective_layout_w_ind:
                        current_items_across_ind = p_o_2_val_ind
                        break
                if current_items_across_ind == 0:
                    if item_w_ind + 2 * padding_ind <= effective_layout_w_ind: current_items_across_ind = 1
                    elif item_w_ind <= effective_layout_w_ind: current_items_across_ind = 1
                    else: current_items_across_ind = 1
                items_across_ind = max(1, current_items_across_ind)

            if item_w_ind > 0 and item_h_ind > 0 and items_across_ind > 0:
                indicator_pos_idx = min(target_idx_motion, max_items_ind) 
                
                row_ind, col_ind = divmod(indicator_pos_idx, items_across_ind)
                
                line_x_pos = (col_ind * (item_w_ind + padding_ind)) + (padding_ind / 2) 
                line_y1_pos = (row_ind * (item_h_ind + padding_ind)) + (padding_ind / 2)
                line_y2_pos = line_y1_pos + item_h_ind 

                self.drag_indicator_id = target_canvas_for_indicator.create_line(
                    line_x_pos, line_y1_pos, line_x_pos, line_y2_pos,
                    fill="yellow", width=3, tags="drop_indicator"
                )
        try:
            if canvas_motion.winfo_exists() and canvas_motion.cget("cursor") != "hand2":
                 canvas_motion.config(cursor="hand2")
        except tk.TclError: pass

    def handle_viewer_drag_release(self, event):
        """Handles mouse button release over viewer/selector canvases.
        Completes either a click selection or a drag-and-drop repositioning.
        """
        global current_tile_index, selected_tile_for_supertile  # Selections
        global current_supertile_index, selected_supertile_for_map  # Selections

        canvas = event.widget  # Canvas where release occurred
        was_dragging = self.drag_active  # Check drag state BEFORE resetting

        # --- Always clean up visual drag indicators first ---
        if self.drag_indicator_id:
            # Try deleting from original drag canvas first, then current canvas
            try:
                if self.drag_canvas and self.drag_canvas.winfo_exists():
                    self.drag_canvas.delete(self.drag_indicator_id)
                elif canvas.winfo_exists():  # Fallback to current canvas
                    canvas.delete(self.drag_indicator_id)
            except tk.TclError:
                pass  # Ignore if already gone
            self.drag_indicator_id = None
        try:
            if canvas.winfo_exists():
                canvas.config(cursor="")  # Reset cursor on the current canvas
        except tk.TclError:
            pass

        # --- Determine Item Type and Max Items based on Canvas ---
        # This is needed for both click and drag-release scenarios
        item_type = None
        max_items = 0
        source_canvas_type = None  # Track where drag started for potential validation

        if canvas == self.tileset_canvas:
            item_type = "tile"
            max_items = num_tiles_in_set
            source_canvas_type = "tile_editor_main"
        elif canvas == self.st_tileset_canvas:
            item_type = "tile"
            max_items = num_tiles_in_set
            source_canvas_type = "supertile_editor_tile"
        elif canvas == self.supertile_selector_canvas:
            item_type = "supertile"
            max_items = num_supertiles
            source_canvas_type = "supertile_editor_main"
        elif canvas == self.map_supertile_selector_canvas:
            item_type = "supertile"
            max_items = num_supertiles
            source_canvas_type = "map_editor_palette"
        else:
            # Should not happen if bindings are correct
            print(f"Warning: Drag release on unknown canvas: {canvas}")
            # Reset drag state fully and exit
            self.drag_active = False
            self.drag_item_type = None
            self.drag_start_index = -1
            self.drag_canvas = None
            return

        # --- Get Index Under Cursor ---
        index_at_release = self._get_index_from_canvas_coords(
            canvas, event.x, event.y, item_type
        )

        # --- Handle Release ---
        if not was_dragging:
            # --- Scenario 1: It was just a CLICK (no drag initiated or minimal movement) ---
            if 0 <= index_at_release < max_items:  # Ensure click was on a valid item
                # Perform the original selection logic based on the canvas type
                if item_type == "tile":
                    if (
                        source_canvas_type == "tile_editor_main"
                    ):  # Main tile editor viewer
                        if current_tile_index != index_at_release:
                            current_tile_index = index_at_release
                            self.update_all_displays(
                                changed_level="tile"
                            )  # Redraw editor, viewers
                            self.scroll_viewers_to_tile(
                                current_tile_index
                            )  # Scroll to selection
                    elif (
                        source_canvas_type == "supertile_editor_tile"
                    ):  # Supertile's tile selector
                        if selected_tile_for_supertile != index_at_release:
                            selected_tile_for_supertile = index_at_release
                            # Only redraw this specific viewer and label
                            self.draw_tileset_viewer(
                                self.st_tileset_canvas, selected_tile_for_supertile
                            )
                            self.update_supertile_info_labels()
                            self.scroll_viewers_to_tile(
                                selected_tile_for_supertile
                            )  # Scroll this viewer
                elif item_type == "supertile":
                    if (
                        source_canvas_type == "supertile_editor_main"
                    ):  # Main supertile selector
                        if current_supertile_index != index_at_release:
                            current_supertile_index = index_at_release
                            self.update_all_displays(changed_level="supertile")
                            self.scroll_selectors_to_supertile(
                                current_supertile_index
                            )  # Scroll
                    elif (
                        source_canvas_type == "map_editor_palette"
                    ):  # Map's supertile selector
                        if selected_supertile_for_map != index_at_release:
                            selected_supertile_for_map = index_at_release
                            # Only redraw this specific selector and label
                            self.draw_supertile_selector(
                                self.map_supertile_selector_canvas,
                                selected_supertile_for_map,
                            )
                            self.update_map_info_labels()
                            self.scroll_selectors_to_supertile(
                                selected_supertile_for_map
                            )  # Scroll

        else:
            # --- Scenario 2: It was a DRAG RELEASE ---
            source_index = self.drag_start_index
            dragged_item_type = self.drag_item_type  # Get type from drag state

            # Basic validation: Drag type must match release canvas type
            if dragged_item_type != item_type:
                print(
                    f"Warning: Drag type mismatch. Started '{dragged_item_type}', dropped on '{item_type}'. Cancelling."
                )
                # Redraw the source canvas to remove drag highlight
                if self.drag_canvas and self.drag_canvas.winfo_exists():
                    if dragged_item_type == "tile":
                        self.draw_tileset_viewer(
                            self.drag_canvas, -1
                        )  # Use dummy highlight index
                    elif dragged_item_type == "supertile":
                        self.draw_supertile_selector(self.drag_canvas, -1)
                # Reset state fully handled below
            else:
                # Determine the final target index for the repositioning logic
                # index_at_release == max_items means drop at the end
                # index_at_release == -2 means dropped outside valid grid area
                # index_at_release == -1 means error in calculation
                valid_drop_target = False
                final_target_index = -1

                if index_at_release == max_items:  # Drop at the very end
                    final_target_index = max_items  # Pass count to reposition logic
                    valid_drop_target = True
                elif 0 <= index_at_release < max_items:  # Drop onto a specific index
                    final_target_index = index_at_release
                    valid_drop_target = True

                if valid_drop_target and final_target_index != source_index:
                    # Proceed with repositioning
                    success = False
                    print(
                        f"Completing Drag: Moving {item_type} from {source_index} to target {final_target_index}"
                    )
                    if item_type == "tile":
                        success = self._reposition_tile(
                            source_index, final_target_index
                        )
                    elif item_type == "supertile":
                        success = self._reposition_supertile(
                            source_index, final_target_index
                        )

                    if success:
                        # Repositioning handles index updates and marking modified
                        # Need full redraw and cache clear due to potential cascading reference changes
                        self.clear_all_caches()
                        self.invalidate_minimap_background_cache()
                        self.update_all_displays(changed_level="all")
                        # Scroll viewers/selectors to the *new* location of the primary selection index
                        if item_type == "tile":
                            self.scroll_viewers_to_tile(current_tile_index)
                        elif item_type == "supertile":
                            self.scroll_selectors_to_supertile(current_supertile_index)
                    else:
                        # Repositioning failed (e.g., internal error, should be rare)
                        messagebox.showerror(
                            "Reposition Error",
                            f"Failed to move {item_type} from {source_index} to {final_target_index}.",
                        )
                        # Attempt redraw even on failure to show current state
                        self.update_all_displays(changed_level="all")

                else:
                    # Dropped outside (-2), on itself, or calculation error (-1)
                    # Just redraw the relevant displays to remove drag highlight
                    print(
                        f"Drag cancelled or no move needed (target_index: {index_at_release}, source: {source_index})."
                    )
                    if item_type == "tile":
                        self.update_all_displays(changed_level="tile")
                    elif item_type == "supertile":
                        self.update_all_displays(changed_level="supertile")

        # --- Final Reset of Drag State (regardless of click or drag) ---
        self.drag_active = False
        self.drag_item_type = None
        self.drag_start_index = -1
        self.drag_canvas = None
        # Indicator ID and cursor should already be cleaned up above


    def _set_pencil_cursor(self, event):
        """Sets the cursor to 'pencil' for the widget that received the event."""
        try:
            # Check if widget still exists before configuring
            if event.widget.winfo_exists():
                event.widget.config(cursor="pencil")
        except tk.TclError:
            pass  # Ignore if widget is destroyed during event handling

    def _reset_cursor(self, event):
        """Resets the cursor to default for the widget that received the event."""
        try:
            if event.widget.winfo_exists():
                # Don't reset map canvas blindly, let its own logic handle it on leave
                if event.widget != self.map_canvas:
                    event.widget.config(cursor="")
                # If it *is* the map canvas, its existing <Leave> handler will take care of it
        except tk.TclError:
            pass  # Ignore if widget is destroyed

    # --- New Handlers and Helpers for Map Selection ---

    def handle_shift_press(self, event):
        """Handles Shift key press."""
        if "Shift" in event.keysym:
            if not self.is_shift_pressed:
                self.is_shift_pressed = True
                if self.current_mouse_action is None:
                    self._update_map_cursor()

    def handle_shift_release(self, event):
        """Handles Shift key release."""
        if "Shift" in event.keysym:
            if self.is_shift_pressed:
                self.is_shift_pressed = False
                if self.current_mouse_action is None:
                    self._update_map_cursor()

    def _get_supertile_coords_from_canvas(self, canvas_x_coord, canvas_y_coord): # Renamed params
        # Get current zoomed supertile pixel dimensions
        zoomed_st_pixel_w, zoomed_st_pixel_h = self._get_zoomed_supertile_pixel_dims()

        if zoomed_st_pixel_w <= 0 or zoomed_st_pixel_h <= 0:
            return None # Cannot calculate if dimensions are invalid

        st_col_calc = int(canvas_x_coord // zoomed_st_pixel_w)
        st_row_calc = int(canvas_y_coord // zoomed_st_pixel_h)

        if 0 <= st_row_calc < map_height and 0 <= st_col_calc < map_width:
            return (st_col_calc, st_row_calc)
        else:
            return None

    def _get_normalized_selection_st(self):
        """Returns normalized selection bounds (min_c, min_r, max_c, max_r) or None."""
        if self.map_selection_start_st is None or self.map_selection_end_st is None:
            return None

        start_c, start_r = self.map_selection_start_st
        end_c, end_r = self.map_selection_end_st

        min_c = min(start_c, end_c)
        min_r = min(start_r, end_r)
        max_c = max(start_c, end_c)
        max_r = max(start_r, end_r)

        return (min_c, min_r, max_c, max_r)

    def _draw_selection_rectangle(self):
        canvas = self.map_canvas
        if not canvas.winfo_exists():
            return

        if self.map_selection_rect_id:
            try:
                canvas.delete(self.map_selection_rect_id)
            except tk.TclError:
                pass # Item might already be gone
            self.map_selection_rect_id = None

        norm_coords_sel = self._get_normalized_selection_st()
        if norm_coords_sel is None:
            return

        min_c_sel, min_r_sel, max_c_sel, max_r_sel = norm_coords_sel

        # Get current zoomed supertile pixel dimensions
        zoomed_st_pixel_w_sel, zoomed_st_pixel_h_sel = self._get_zoomed_supertile_pixel_dims()
        if zoomed_st_pixel_w_sel <= 0 or zoomed_st_pixel_h_sel <= 0:
            return

        px1_sel = min_c_sel * zoomed_st_pixel_w_sel
        py1_sel = min_r_sel * zoomed_st_pixel_h_sel
        px2_sel = (max_c_sel + 1) * zoomed_st_pixel_w_sel # +1 because coords are inclusive
        py2_sel = (max_r_sel + 1) * zoomed_st_pixel_h_sel

        try:
            self.map_selection_rect_id = canvas.create_rectangle(
                px1_sel, py1_sel, px2_sel, py2_sel,
                outline="yellow",
                dash=(4, 4),
                width=2,
                tags=("selection_rect",)
            )
            # Ensure it's drawn below other interactive elements
            if canvas.find_withtag("window_view_item"):
                canvas.tag_lower(self.map_selection_rect_id, "window_view_item")
            elif canvas.find_withtag("supertile_grid"):
                canvas.tag_lower(self.map_selection_rect_id, "supertile_grid")
        except tk.TclError:
            self.map_selection_rect_id = None # Failed to create

    def _clear_map_selection(self):
        """Clears ONLY the map selection visual and related state variables."""
        canvas = self.map_canvas
        # Clear the visual rectangle
        if self.map_selection_rect_id:
            try:
                if canvas.winfo_exists():
                    canvas.delete(self.map_selection_rect_id)
            except tk.TclError:
                pass
            self.map_selection_rect_id = None

        # Check if state needs updating before resetting (for menu update trigger)
        needs_menu_update = self.map_selection_start_st is not None

        # Reset selection state variables
        self.map_selection_start_st = None
        self.map_selection_end_st = None
        self.map_selection_active = False # Ensure selection drag state is reset

        # Update menu if selection was active
        if needs_menu_update:
            self._update_edit_menu_state()
        # Do not redraw map here, let the caller handle redraw if needed
        # Do not clear paste preview or clipboard here

    def handle_map_selection_start(self, event):
        """Handles Shift + Button-1 press to start map selection."""
        if self.is_ctrl_pressed or self.current_mouse_action is not None:
            return

        canvas = self.map_canvas
        canvas_x = canvas.canvasx(event.x)
        canvas_y = canvas.canvasy(event.y)

        self._clear_map_selection()

        start_coords = self._get_supertile_coords_from_canvas(canvas_x, canvas_y)

        if start_coords:
            self.map_selection_start_st = start_coords
            self.map_selection_end_st = start_coords
            self.map_selection_active = True
            self._draw_selection_rectangle()
            self._update_map_cursor()
        else:
            self.map_selection_start_st = None
            self.map_selection_end_st = None
            self.map_selection_active = False

        return "break"

    def handle_map_selection_motion(self, event):
        """Handles Shift + B1 motion to update selection rectangle."""
        if not self.map_selection_active:
            return

        canvas = self.map_canvas
        canvas_x = canvas.canvasx(event.x)
        canvas_y = canvas.canvasy(event.y)

        current_coords = self._get_supertile_coords_from_canvas(canvas_x, canvas_y)

        if current_coords:
            if self.map_selection_end_st != current_coords:
                self.map_selection_end_st = current_coords
                self._draw_selection_rectangle()
        # else: # Keep last valid end_st when mouse is outside

        return "break"

    def handle_map_selection_release(self, event):
        """Handles Shift + Button-1 release to finalize map selection."""
        if not self.map_selection_active:
            self._clear_map_selection()
            return

        self.map_selection_active = False

        if (
            self.map_selection_start_st is not None
            and self.map_selection_end_st is not None
        ):
            # print(f"Selection finalized: {self.map_selection_start_st} to {self.map_selection_end_st}")
            # Final rectangle drawn by motion handler, redraw map to make it persistent
            self.draw_map_canvas()
            self._update_edit_menu_state()
        else:
            self._clear_map_selection()

        self._update_map_cursor()

        return "break"

    def handle_map_escape(self, event):
        """Handles Escape key press on map canvas to clear clipboard, paste preview, and selection."""
        # print("Escape pressed, clearing clipboard, paste preview, and selection.")

        # Check what was active before clearing
        cleared_clipboard = self.map_clipboard_data is not None
        cleared_preview = self.map_paste_preview_rect_id is not None
        cleared_selection = self.map_selection_start_st is not None

        # Always attempt to clear clipboard, preview, and selection state
        self.map_clipboard_data = None
        self._clear_paste_preview_rect()
        self._clear_map_selection() # This now only clears selection visuals/state

        # Update menu state if the clipboard was cleared
        if cleared_clipboard:
            self._update_edit_menu_state()

        # Redraw map if the selection rectangle was visible to ensure it's removed
        # Clearing the paste preview doesn't require a full map redraw
        if cleared_selection and self.map_canvas.winfo_exists():
             self.draw_map_canvas()

        return "break" # Prevent other Escape bindings

    def _update_map_cursor_and_coords(self, event):
        """Combined handler for Motion to update both cursor and coords, and manage paste preview."""
        # Update coordinate display first
        self._update_map_coords_display(event)

        # Update cursor based on current state (e.g., pan, select, paint)
        self._update_map_cursor()

        # --- Paste Preview Logic ---
        is_map_tab_active = False
        if self.notebook and self.notebook.winfo_exists():
            try:
                 selected_tab_index = self.notebook.index(self.notebook.select())
                 if selected_tab_index == 3: # Map Editor tab index
                     is_map_tab_active = True
            except tk.TclError:
                pass # Ignore if notebook not ready

        # Conditions to show paste preview: Map tab active AND map clipboard has data
        if is_map_tab_active and self.map_clipboard_data:
            self._draw_paste_preview_rect(event=event)
        else:
            # Clear preview if conditions are not met (e.g., wrong tab, no clipboard data)
            # This handles cases where clipboard is cleared while mouse is over canvas
            self._clear_paste_preview_rect()

    # --- New Paste Preview Methods ---
    def _draw_paste_preview_rect(self, event=None, canvas_coords=None):
        canvas = self.map_canvas
        if not canvas.winfo_exists() or not self.map_clipboard_data or not self.notebook:
            self._clear_paste_preview_rect()
            return
        try:
            if self.notebook.index(self.notebook.select()) != 3: # Map Editor tab index
                 self._clear_paste_preview_rect()
                 return
        except tk.TclError:
            self._clear_paste_preview_rect()
            return

        current_canvas_x_paste, current_canvas_y_paste = -1, -1
        if canvas_coords:
            current_canvas_x_paste, current_canvas_y_paste = canvas_coords
        elif event:
            try:
                current_canvas_x_paste = canvas.canvasx(event.x)
                current_canvas_y_paste = canvas.canvasy(event.y)
            except tk.TclError:
                self._clear_paste_preview_rect()
                return
        else:
             self._clear_paste_preview_rect()
             return

        paste_st_coords_preview = self._get_supertile_coords_from_canvas(current_canvas_x_paste, current_canvas_y_paste)

        if paste_st_coords_preview is None:
            self._clear_paste_preview_rect()
            return

        paste_st_col_preview, paste_st_row_preview = paste_st_coords_preview
        clip_w_preview = self.map_clipboard_data.get('width', 0)
        clip_h_preview = self.map_clipboard_data.get('height', 0)

        if clip_w_preview <= 0 or clip_h_preview <= 0:
            self._clear_paste_preview_rect()
            return

        # Get current zoomed supertile pixel dimensions
        zoomed_st_pixel_w_preview, zoomed_st_pixel_h_preview = self._get_zoomed_supertile_pixel_dims()
        if zoomed_st_pixel_w_preview <= 0 or zoomed_st_pixel_h_preview <= 0:
             self._clear_paste_preview_rect()
             return

        px1_preview = paste_st_col_preview * zoomed_st_pixel_w_preview
        py1_preview = paste_st_row_preview * zoomed_st_pixel_h_preview
        px2_preview = px1_preview + (clip_w_preview * zoomed_st_pixel_w_preview)
        py2_preview = py1_preview + (clip_h_preview * zoomed_st_pixel_h_preview)

        fill_color_preview = "#0000FF"
        stipple_pattern_preview = "gray50"

        if self.map_paste_preview_rect_id:
            try:
                canvas.coords(self.map_paste_preview_rect_id, px1_preview, py1_preview, px2_preview, py2_preview)
                canvas.itemconfig(self.map_paste_preview_rect_id, state=tk.NORMAL, fill=fill_color_preview, stipple=stipple_pattern_preview)
            except tk.TclError:
                self.map_paste_preview_rect_id = None
        
        if not self.map_paste_preview_rect_id:
            try:
                self.map_paste_preview_rect_id = canvas.create_rectangle(
                    px1_preview, py1_preview, px2_preview, py2_preview,
                    fill=fill_color_preview,
                    stipple=stipple_pattern_preview,
                    outline="", 
                    width=0,
                    tags=("paste_preview_rect",)
                )
            except tk.TclError:
                 self.map_paste_preview_rect_id = None
                 return

        try:
            if self.map_selection_rect_id:
                 canvas.tag_lower(self.map_paste_preview_rect_id, self.map_selection_rect_id)
            if canvas.find_withtag("window_view_item"):
                canvas.tag_lower(self.map_paste_preview_rect_id, "window_view_item")
            elif canvas.find_withtag("supertile_grid"):
                 canvas.tag_lower(self.map_paste_preview_rect_id, "supertile_grid")
        except tk.TclError:
            pass


    def _clear_paste_preview_rect(self):
        """Safely deletes the paste preview rectangle from the canvas."""
        canvas = self.map_canvas
        if self.map_paste_preview_rect_id:
            try:
                if canvas.winfo_exists():
                    canvas.delete(self.map_paste_preview_rect_id)
            except tk.TclError:
                pass # Ignore error if item already deleted or canvas gone
            finally:
                 # Ensure ID is cleared even if deletion fails
                 self.map_paste_preview_rect_id = None

    def show_about_box(self):
        """Displays the About information box with the application icon."""
        # Create a Toplevel window
        about_win = tk.Toplevel(self.root)
        about_win.title("About MSX Tile Forge")
        about_win.resizable(False, False) 
        about_win.transient(self.root) 
        about_win.grab_set() 

        # Main frame for content
        main_frame = ttk.Frame(about_win, padding="15")
        main_frame.pack(expand=True, fill="both")

        icon_label = None
        # Try to get the icon reference stored during startup on the root window
        app_icon_photo = getattr(self.root, 'app_icon_ref', None) # This should now find it

        if app_icon_photo:
            icon_label = ttk.Label(main_frame, image=app_icon_photo)
            # Keep reference for the label within this Toplevel
            icon_label.image = app_icon_photo 
            icon_label.grid(row=0, column=0, padx=(0, 15), pady=(0, 10), sticky="nw")

        # Text information frame
        text_frame = ttk.Frame(main_frame)
        text_frame.grid(row=0, column=1, sticky="nsew")

        # Program Name (Bold)
        style = ttk.Style()
        style.configure("About.TLabel", font=("-size", 10, "bold")) # Adjusted font size slightly
        name_label = ttk.Label(text_frame, text="MSX Tile Forge", style="About.TLabel")
        name_label.pack(anchor="w", pady=(0, 5))

        # Version and Author
        info_text = "Version: 0.0.31\nAuthor: Damned Angel + Gemini AI"
        info_label = ttk.Label(text_frame, text=info_text, justify=tk.LEFT)
        info_label.pack(anchor="w")

        # OK Button frame
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=1, column=0, columnspan=2 if icon_label else 1, pady=(15, 0))

        ok_button = ttk.Button(button_frame, text="OK", command=about_win.destroy, width=10)
        ok_button.pack()

        about_win.update_idletasks() 
        main_width = self.root.winfo_width()
        main_height = self.root.winfo_height()
        main_x = self.root.winfo_x()
        main_y = self.root.winfo_y()

        pop_width = about_win.winfo_width()
        pop_height = about_win.winfo_height()

        pop_x = main_x + (main_width // 2) - (pop_width // 2)
        pop_y = main_y + (main_height // 2) - (pop_height // 2)

        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        pop_x = max(0, min(pop_x, screen_width - pop_width))
        pop_y = max(0, min(pop_y, screen_height - pop_height))

        about_win.geometry(f"+{pop_x}+{pop_y}")
        ok_button.focus_set()
        about_win.wait_window()

    def _find_unused_tiles(self):
        """Identifies tiles not used in any supertile definition."""
        global tileset_patterns, supertiles_data, num_tiles_in_set, num_supertiles
        used_tile_indices = set()
        # Tile 0 is implicitly used/reserved, don't mark it as unused
        for st_idx in range(num_supertiles):
            for r in range(SUPERTILE_GRID_DIM):
                for c in range(SUPERTILE_GRID_DIM):
                    used_tile_indices.add(supertiles_data[st_idx][r][c])
        
        unused_tiles = set()
        for i in range(1, num_tiles_in_set): # Start from 1, tile 0 is never "unused"
            if i not in used_tile_indices:
                unused_tiles.add(i)
        return unused_tiles

    def _find_unused_supertiles(self):
        """Identifies supertiles not used in the map_data."""
        global map_data, map_width, map_height, num_supertiles
        used_st_indices = set()
        # Supertile 0 is implicitly used/reserved
        for r_idx in range(map_height): # Renamed r
            for c_idx in range(map_width): # Renamed c
                used_st_indices.add(map_data[r_idx][c_idx])
        # # print(f"DEBUG: Used Supertile Indices from map_data: {used_st_indices}") # DEBUG

        unused_supertiles = set()
        for i in range(1, num_supertiles): # Start from 1
            if i not in used_st_indices:
                unused_supertiles.add(i)
        # print(f"DEBUG: Found Unused Supertiles (indices): {unused_supertiles}") # DEBUG
        return unused_supertiles

    def _clear_marked_unused(self, trigger_redraw=True):
        """Clears all 'marked unused' states and optionally redraws relevant viewers."""
        tile_marks_cleared = bool(self.marked_unused_tiles)
        st_marks_cleared = bool(self.marked_unused_supertiles)

        self.marked_unused_tiles.clear()
        self.marked_unused_supertiles.clear()

        if trigger_redraw and (tile_marks_cleared or st_marks_cleared):
            # Redraw only if marks were actually cleared to avoid unnecessary redraws
            # Determine active tab to redraw correctly
            current_tab_index = -1
            try:
                if self.notebook and self.notebook.winfo_exists():
                    selected_tab_name = self.notebook.select()
                    if selected_tab_name:
                        current_tab_index = self.notebook.index(selected_tab_name)
            except tk.TclError:
                pass

            if current_tab_index == 1: # Tile Editor
                if tile_marks_cleared:
                    self.draw_tileset_viewer(self.tileset_canvas, current_tile_index)
            elif current_tab_index == 2: # Supertile Editor
                if tile_marks_cleared:
                    self.draw_tileset_viewer(self.st_tileset_canvas, selected_tile_for_supertile)
                if st_marks_cleared:
                    self.draw_supertile_selector(self.supertile_selector_canvas, current_supertile_index)
            elif current_tab_index == 3: # Map Editor
                if st_marks_cleared: # Map editor only shows supertiles
                    self.draw_supertile_selector(self.map_supertile_selector_canvas, selected_supertile_for_map)
        return tile_marks_cleared or st_marks_cleared


    def _adjust_marked_indices_after_delete(self, marked_set, deleted_index):
        """Adjusts indices in a 'marked_set' after an item at 'deleted_index' is removed."""
        if deleted_index in marked_set:
            marked_set.remove(deleted_index)
        
        new_marked_set = set()
        for idx in marked_set:
            if idx > deleted_index:
                new_marked_set.add(idx - 1)
            else:
                new_marked_set.add(idx)
        marked_set.clear()
        marked_set.update(new_marked_set)


    def handle_mark_unused_tiles(self):
        """Handles the 'Mark Unused' button click in the Tile Editor tab."""
        if self.marked_unused_tiles: # If already marked, clear them
            self._clear_marked_unused(trigger_redraw=False) 
            self.draw_tileset_viewer(self.tileset_canvas, current_tile_index) 
        else:
            # Clear any supertile marks from other tab before marking tiles
            # This ensures only tile marks are active if this button is pressed
            if self.marked_unused_supertiles:
                self.marked_unused_supertiles.clear()
                 # Redraw ST selectors if they were marked to remove blue borders
                if hasattr(self, 'supertile_selector_canvas') and self.supertile_selector_canvas.winfo_exists():
                    self.draw_supertile_selector(self.supertile_selector_canvas, current_supertile_index)
                if hasattr(self, 'map_supertile_selector_canvas') and self.map_supertile_selector_canvas.winfo_exists():
                    self.draw_supertile_selector(self.map_supertile_selector_canvas, selected_supertile_for_map)

            self.marked_unused_tiles = self._find_unused_tiles()
            if not self.marked_unused_tiles:
                messagebox.showinfo("Mark Unused Tiles", "No unused tiles found.")
            else:
                print(f"Marked unused tiles: {sorted(list(self.marked_unused_tiles))}") # Print sorted list
            self.draw_tileset_viewer(self.tileset_canvas, current_tile_index)

    def handle_mark_unused_supertiles_and_tiles(self):
        """Handles the 'Mark Unused' button in the Supertile Editor tab."""
        # If either set has marks, clear both
        if self.marked_unused_tiles or self.marked_unused_supertiles:
            self._clear_marked_unused(trigger_redraw=False) 
            # Redraw viewers in this tab
            self.draw_tileset_viewer(self.st_tileset_canvas, selected_tile_for_supertile)
            self.draw_supertile_selector(self.supertile_selector_canvas, current_supertile_index)
        else: # Neither set has marks, so we are in "mark" mode
            self.marked_unused_tiles = self._find_unused_tiles()
            self.marked_unused_supertiles = self._find_unused_supertiles() 
            
            if not self.marked_unused_tiles and not self.marked_unused_supertiles:
                messagebox.showinfo("Mark Unused", "No unused tiles or supertiles found.")
            else:
                # Only print the sets if they contain items
                if self.marked_unused_tiles: 
                    print(f"Marked unused tiles: {sorted(list(self.marked_unused_tiles))}") # Print sorted list for consistency
                if self.marked_unused_supertiles: 
                    print(f"Marked unused supertiles: {sorted(list(self.marked_unused_supertiles))}") # Print sorted list

            # Redraw viewers in this tab
            self.draw_tileset_viewer(self.st_tileset_canvas, selected_tile_for_supertile)
            self.draw_supertile_selector(self.supertile_selector_canvas, current_supertile_index)

    # --- ROM Importer Methods (NEW SECTION) ---

    def open_rom_importer(self):
        """Handles the 'Import Tiles from ROM...' menu command."""
        # Prevent opening multiple importer dialogs
        if self.rom_import_dialog is not None and tk.Toplevel.winfo_exists(self.rom_import_dialog):
            self.rom_import_dialog.lift()
            self.rom_import_dialog.focus_set()
            return

        rom_filepath = filedialog.askopenfilename(
            title="Select ROM File",
            filetypes=[("All files", "*.*"), ("Binary files", "*.bin"), ("ROM files", "*.rom")]
        )
        if not rom_filepath:
            return # User cancelled

        try:
            with open(rom_filepath, "rb") as f:
                rom_data = f.read()
            if not rom_data:
                messagebox.showerror("ROM Import Error", "Selected file is empty.")
                return
        except Exception as e:
            messagebox.showerror("ROM Import Error", f"Could not read ROM file:\n{e}")
            return

        # If successful, create and show the dialog
        self._create_rom_importer_dialog(rom_filepath, rom_data)

    def _create_rom_importer_dialog(self, rom_filepath, rom_data):
        """Creates and displays the modal dialog for ROM tile importing."""
        self.rom_import_dialog = tk.Toplevel(self.root)
        self.rom_import_dialog.title(f"Import Tiles from: {os.path.basename(rom_filepath)}")
        self.rom_import_dialog.transient(self.root)
        self.rom_import_dialog.grab_set()
        self.rom_import_dialog.resizable(True, True)
        self.rom_import_dialog.minsize(400, 300)

        dialog = self.rom_import_dialog
        dialog.rom_data = rom_data
        dialog.rom_filepath = rom_filepath
        dialog.fine_offset_var = tk.IntVar(value=0)
        dialog.selected_start_rom_tile_idx = -1
        dialog.selected_end_rom_tile_idx = -1
        dialog.hover_info_text_var = tk.StringVar(value="Offset: N/A | Grid Index: N/A")
        dialog.selection_info_text_var = tk.StringVar(value="Tiles Selected: 0")
        dialog.top_left_grid_byte_offset_text_var = tk.StringVar(value="Grid Top-Left Byte: N/A")
        dialog.redraw_timer_id = None # Initialize redraw_timer_id for debouncing Configure

        main_dialog_frame = ttk.Frame(dialog, padding=5)
        main_dialog_frame.pack(expand=True, fill="both")

        top_controls_frame = ttk.Frame(main_dialog_frame)
        top_controls_frame.pack(side=tk.TOP, fill=tk.X, pady=(0, 5))

        ttk.Label(top_controls_frame, text="Fine Offset (0-7 bytes):").pack(side=tk.LEFT, padx=(0,5))
        offset_slider = ttk.Scale(
            top_controls_frame,
            from_=0,
            to=7,
            orient=tk.HORIZONTAL,
            variable=dialog.fine_offset_var,
            command=lambda val: self._on_rom_importer_setting_change()
        )
        offset_slider.pack(side=tk.LEFT, padx=5, expand=True, fill=tk.X)

        middle_frame = ttk.Frame(main_dialog_frame)
        middle_frame.pack(expand=True, fill="both")

        canvas_frame = ttk.Frame(middle_frame)
        canvas_frame.pack(side=tk.LEFT, expand=True, fill="both")

        rom_v_scroll = ttk.Scrollbar(canvas_frame, orient=tk.VERTICAL)
        rom_h_scroll = ttk.Scrollbar(canvas_frame, orient=tk.HORIZONTAL)

        dialog.canvas = tk.Canvas(
            canvas_frame,
            bg="darkgrey",
            yscrollcommand=rom_v_scroll.set,
            xscrollcommand=rom_h_scroll.set,
            highlightthickness=0
        )
        rom_v_scroll.config(command=dialog.canvas.yview)
        rom_h_scroll.config(command=dialog.canvas.xview)

        # Add scrollbar bindings to trigger redraw
        rom_v_scroll.bind("<B1-Motion>",
            lambda event: self.rom_import_dialog.after_idle(self._draw_rom_importer_canvas)
                          if self.rom_import_dialog and tk.Toplevel.winfo_exists(self.rom_import_dialog) and
                             hasattr(self.rom_import_dialog, 'canvas') and self.rom_import_dialog.canvas.winfo_exists()
                          else None)
        rom_v_scroll.bind("<ButtonRelease-1>",
            lambda event: self.rom_import_dialog.after_idle(self._draw_rom_importer_canvas)
                          if self.rom_import_dialog and tk.Toplevel.winfo_exists(self.rom_import_dialog) and
                             hasattr(self.rom_import_dialog, 'canvas') and self.rom_import_dialog.canvas.winfo_exists()
                          else None)
        rom_h_scroll.bind("<B1-Motion>",
            lambda event: self.rom_import_dialog.after_idle(self._draw_rom_importer_canvas)
                          if self.rom_import_dialog and tk.Toplevel.winfo_exists(self.rom_import_dialog) and
                             hasattr(self.rom_import_dialog, 'canvas') and self.rom_import_dialog.canvas.winfo_exists()
                          else None)
        rom_h_scroll.bind("<ButtonRelease-1>",
            lambda event: self.rom_import_dialog.after_idle(self._draw_rom_importer_canvas)
                          if self.rom_import_dialog and tk.Toplevel.winfo_exists(self.rom_import_dialog) and
                             hasattr(self.rom_import_dialog, 'canvas') and self.rom_import_dialog.canvas.winfo_exists()
                          else None)

        dialog.canvas.grid(row=0, column=0, sticky="nsew")
        rom_v_scroll.grid(row=0, column=1, sticky="ns")
        rom_h_scroll.grid(row=1, column=0, sticky="ew")
        canvas_frame.grid_rowconfigure(0, weight=1)
        canvas_frame.grid_columnconfigure(0, weight=1)

        preview_outer_frame = ttk.Frame(middle_frame, padding=(5,0))
        preview_outer_frame.pack(side=tk.RIGHT, fill=tk.Y, anchor="ne")
        preview_label_frame = ttk.LabelFrame(preview_outer_frame, text="Live Preview")
        preview_label_frame.pack(pady=0, anchor="n")
        preview_canvas_size = TILE_WIDTH * EDITOR_PIXEL_SIZE
        dialog.preview_canvas = tk.Canvas(
            preview_label_frame,
            width=preview_canvas_size,
            height=preview_canvas_size,
            bg="grey",
            highlightthickness=0
        )
        dialog.preview_canvas.pack(padx=5, pady=5)

        bottom_frame = ttk.Frame(main_dialog_frame)
        bottom_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=(5,0))

        info_bar_frame = ttk.Frame(bottom_frame, relief="sunken", padding=3)
        info_bar_frame.pack(fill=tk.X, expand=False, side=tk.TOP, pady=(0,5))
        dialog.status_bar_top_left_label = ttk.Label(info_bar_frame, textvariable=dialog.top_left_grid_byte_offset_text_var)
        dialog.status_bar_top_left_label.pack(side=tk.LEFT, padx=2)
        ttk.Label(info_bar_frame, text="|").pack(side=tk.LEFT, padx=2)
        hover_label = ttk.Label(info_bar_frame, textvariable=dialog.hover_info_text_var)
        hover_label.pack(side=tk.LEFT, padx=2)
        ttk.Label(info_bar_frame, text="|").pack(side=tk.LEFT, padx=2)
        selection_label = ttk.Label(info_bar_frame, textvariable=dialog.selection_info_text_var)
        selection_label.pack(side=tk.LEFT, padx=2)

        buttons_frame = ttk.Frame(bottom_frame)
        buttons_frame.pack(fill=tk.X, expand=False, side=tk.TOP)
        dialog.import_button = ttk.Button(
            buttons_frame, text="Import", command=self._execute_rom_tile_import, state=tk.DISABLED
        )
        cancel_button = ttk.Button(
            buttons_frame, text="Cancel", command=self._close_rom_importer_dialog
        )
        cancel_button.pack(side=tk.RIGHT, padx=(0,0))
        dialog.import_button.pack(side=tk.RIGHT, padx=(0,5))

        dialog.canvas.bind("<Configure>", lambda e: self._on_rom_importer_setting_change(configure_event=True))
        dialog.canvas.bind("<Motion>", self._on_rom_canvas_motion)
        dialog.canvas.bind("<Leave>", self._on_rom_canvas_leave)
        dialog.canvas.bind("<Button-1>", self._on_rom_canvas_left_click)
        dialog.canvas.bind("<Button-3>", self._on_rom_canvas_right_click)
        dialog.bind("<Escape>", lambda e: self._clear_rom_import_selection())
        dialog.canvas.bind("<FocusIn>", lambda e: None)
        dialog.canvas.bind("<Key>", self._on_rom_canvas_keypress)
        dialog.canvas.focus_set()
        dialog.protocol("WM_DELETE_WINDOW", self._close_rom_importer_dialog)
        dialog.after(20, lambda: self._on_rom_importer_setting_change(configure_event=True)) # Ensure initial draw after geometry

        dialog.update_idletasks()
        root_w = self.root.winfo_width()
        root_h = self.root.winfo_height()
        root_x = self.root.winfo_x()
        root_y = self.root.winfo_y()
        dialog_w = dialog.winfo_reqwidth()
        dialog_h = dialog.winfo_reqheight()
        x_pos = root_x + (root_w // 2) - (dialog_w // 2)
        y_pos = root_y + (root_h // 2) - (dialog_h // 2)
        dialog.geometry(f"{dialog_w}x{dialog_h}+{x_pos}+{y_pos}")

    def _close_rom_importer_dialog(self):
        """Closes and cleans up the ROM importer dialog."""
        if self.rom_import_dialog:
            self.rom_import_dialog.grab_release() # Release grab before destroying
            self.rom_import_dialog.destroy()
            self.rom_import_dialog = None # Clear reference

    def _on_rom_importer_setting_change(self, event=None, configure_event=False):
        """Called when fine_offset slider changes or canvas is configured/resized."""
        if not self.rom_import_dialog or not tk.Toplevel.winfo_exists(self.rom_import_dialog):
            return

        dialog = self.rom_import_dialog

        if configure_event:
            # Ensure redraw_timer_id attribute exists on the dialog
            if not hasattr(dialog, 'redraw_timer_id'):
                dialog.redraw_timer_id = None # Initialize if it was missed

            if dialog.redraw_timer_id is not None:
                dialog.after_cancel(dialog.redraw_timer_id)
            # Schedule the debounced draw call
            dialog.redraw_timer_id = dialog.after(150, self._perform_debounced_rom_canvas_draw)
            return # Debouncing will handle the draw
        else:
            # For non-configure events (like slider change), draw more directly
            # The _draw_rom_importer_canvas itself has a check for tiny canvas
            # but calling the debounced version here too for consistency might be safer,
            # or call _draw_rom_importer_canvas if immediate feedback is desired for slider.
            # Let's call _draw_rom_importer_canvas for immediate slider feedback.
            self._draw_rom_importer_canvas()

    def _draw_rom_importer_canvas(self):
        """Draws the content of the ROM importer canvas (tile grid)."""
        if not self.rom_import_dialog or not tk.Toplevel.winfo_exists(self.rom_import_dialog):
            return

        self.debug("\n[DEBUG] --- ROM Importer Canvas Redraw START ---")

        dialog = self.rom_import_dialog
        canvas = getattr(dialog, 'canvas', None)
        if not canvas or not canvas.winfo_exists():
            self.debug("[DEBUG] ROM Importer canvas widget no longer exists. Aborting draw.")
            self.debug("[DEBUG] --- ROM Importer Canvas Redraw END (canvas gone) ---")
            return

        rom_data = dialog.rom_data
        fine_offset = dialog.fine_offset_var.get()

        canvas.delete("all")
        dialog.tile_image_refs = []

        canvas_width = canvas.winfo_width()
        canvas_height = canvas.winfo_height()

        self.debug(f"[DEBUG] Canvas Dimensions (WxH): {canvas_width}x{canvas_height}")
        self.debug(f"[DEBUG] ROM Data Size: {len(rom_data)} bytes")
        self.debug(f"[DEBUG] Fine Offset: {fine_offset} bytes")

        if canvas_width <= 1 or canvas_height <= 1:
            self.debug("[DEBUG] Canvas not yet sized (or too small). Aborting draw.")
            self.debug("[DEBUG] --- ROM Importer Canvas Redraw END (aborted small canvas) ---")
            return

        tile_display_size = VIEWER_TILE_SIZE
        padding = 1
        
        tiles_across = max(1, canvas_width // (tile_display_size + padding))
        
        if len(rom_data) <= fine_offset:
            total_potential_tiles = 0
        else:
            total_potential_tiles = (len(rom_data) - fine_offset) // TILE_WIDTH
        
        self.debug(f"[DEBUG] Tile Display Size: {tile_display_size}, Padding: {padding}")
        self.debug(f"[DEBUG] Tiles Across (calculated): {tiles_across}")
        self.debug(f"[DEBUG] Total Potential Tiles (from ROM data): {total_potential_tiles}")
        
        if total_potential_tiles <= 0:
             try:
                 if canvas.winfo_exists():
                     canvas.config(scrollregion=(0,0,1,1))
             except tk.TclError:
                 self.debug("[DEBUG] TclError configuring scrollregion for no potential tiles (canvas likely destroying).")
             self._update_rom_importer_info_labels()
             self.debug("[DEBUG] No potential tiles. Scrollregion set to minimal. Aborting further draw.")
             self.debug("[DEBUG] --- ROM Importer Canvas Redraw END (no tiles) ---")
             return

        num_rows_in_rom_data = math.ceil(total_potential_tiles / tiles_across)
        
        scroll_region_width = tiles_across * (tile_display_size + padding) + padding
        scroll_region_height = num_rows_in_rom_data * (tile_display_size + padding) + padding
        scroll_region_width = max(1, scroll_region_width)
        scroll_region_height = max(1, scroll_region_height)

        self.debug(f"[DEBUG] Num Rows in ROM Data (calculated for grid): {num_rows_in_rom_data}")
        self.debug(f"[DEBUG] Scroll Region (WxH): {scroll_region_width}x{scroll_region_height}")
        
        try:
            if canvas.winfo_exists():
                canvas.config(scrollregion=(0, 0, scroll_region_width, scroll_region_height))
        except tk.TclError:
            self.debug("[DEBUG] TclError configuring scrollregion (canvas likely destroying).")
            self.debug("[DEBUG] --- ROM Importer Canvas Redraw END (TclError on scrollregion) ---")
            return

        view_y1 = canvas.canvasy(0)
        view_y2 = canvas.canvasy(canvas_height)

        start_row_idx = max(0, int(view_y1 // (tile_display_size + padding)))
        end_row_idx = min(num_rows_in_rom_data, int(math.ceil(view_y2 / (tile_display_size + padding))))
        if (view_y2 > view_y1) and (view_y2 % (tile_display_size + padding) == 0):
             end_row_idx = min(num_rows_in_rom_data, end_row_idx + 1)
        end_row_idx = max(start_row_idx, end_row_idx)

        self.debug(f"[DEBUG] Canvas Y-View (scroll_coord_start, scroll_coord_end): {view_y1}, {view_y2}")
        self.debug(f"[DEBUG] Visible Grid Rows (start_idx for loop, end_idx for loop): {start_row_idx}, {end_row_idx}")

        if not hasattr(dialog, 'top_left_grid_byte_offset'):
            dialog.top_left_grid_byte_offset = 0 

        first_visible_rom_tile_idx = start_row_idx * tiles_across
        dialog.top_left_grid_byte_offset = fine_offset + (first_visible_rom_tile_idx * TILE_WIDTH)
        if hasattr(dialog, 'top_left_grid_byte_offset_text_var'):
            try:
                dialog.top_left_grid_byte_offset_text_var.set(f"Grid Top-Left Byte: {dialog.top_left_grid_byte_offset} (0x{dialog.top_left_grid_byte_offset:X})")
            except tk.TclError:
                pass

        drawn_tile_count_this_pass = 0
        for r_grid in range(start_row_idx, end_row_idx):
            for c_grid in range(tiles_across):
                current_rom_tile_absolute_idx = r_grid * tiles_across + c_grid
                
                if current_rom_tile_absolute_idx >= total_potential_tiles:
                    continue

                rom_byte_start_pos = fine_offset + (current_rom_tile_absolute_idx * TILE_WIDTH)
                
                if rom_byte_start_pos + TILE_WIDTH > len(rom_data):
                    num_bytes_avail = len(rom_data) - rom_byte_start_pos
                    tile_bytes_data = rom_data[rom_byte_start_pos:] + bytes(TILE_WIDTH - num_bytes_avail)
                else:
                    tile_bytes_data = rom_data[rom_byte_start_pos : rom_byte_start_pos + TILE_WIDTH]

                img = tk.PhotoImage(width=tile_display_size, height=tile_display_size)
                dialog.tile_image_refs.append(img)

                for y_pixel_in_tile in range(TILE_HEIGHT):
                    row_byte = tile_bytes_data[y_pixel_in_tile]
                    line_data_hex = []
                    for x_pixel_in_tile in range(TILE_WIDTH):
                        pixel_is_set = (row_byte >> (7 - x_pixel_in_tile)) & 1
                        color_hex = self.active_msx_palette[WHITE_IDX] if pixel_is_set else self.active_msx_palette[BLACK_IDX]
                        line_data_hex.append(color_hex)
                    
                    y_img_start = y_pixel_in_tile * (tile_display_size // TILE_HEIGHT)
                    y_img_end = (y_pixel_in_tile + 1) * (tile_display_size // TILE_HEIGHT)

                    for y_img in range(y_img_start, y_img_end):
                        scaled_line_data_hex = []
                        for hex_val in line_data_hex:
                            scaled_line_data_hex.extend([hex_val] * (tile_display_size // TILE_WIDTH))
                        try:
                            # Removed: if img.winfo_exists():
                            img.put("{" + " ".join(scaled_line_data_hex) + "}", to=(0, y_img))
                        except tk.TclError:
                            try:
                                # Removed: if img.winfo_exists() and scaled_line_data_hex:
                                if scaled_line_data_hex: # Check if list is not empty
                                    img.put(scaled_line_data_hex[0], to=(0, y_img, tile_display_size, y_img + 1))
                            except tk.TclError:
                                pass


                canvas_x_pos = c_grid * (tile_display_size + padding) + padding
                canvas_y_pos = r_grid * (tile_display_size + padding) + padding
                try:
                    if canvas.winfo_exists():
                        canvas.create_image(canvas_x_pos, canvas_y_pos, image=img, anchor=tk.NW, tags=f"rom_tile_{current_rom_tile_absolute_idx}")
                    drawn_tile_count_this_pass +=1
                except tk.TclError:
                    self.debug(f"[DEBUG] TclError creating image for tile {current_rom_tile_absolute_idx} (canvas likely destroying).")
                    break 
            else: 
                continue
            break 
        
        self.debug(f"[DEBUG] Drawn {drawn_tile_count_this_pass} tiles in this pass.")
        self._draw_rom_import_selection_highlight()
        self._update_rom_importer_info_labels()
        self.debug("[DEBUG] --- ROM Importer Canvas Redraw END ---")

    def _draw_rom_import_selection_highlight(self):
        """Draws yellow border around selected tiles in ROM importer."""
        if not self.rom_import_dialog or not tk.Toplevel.winfo_exists(self.rom_import_dialog):
            return
        dialog = self.rom_import_dialog
        canvas = dialog.canvas
        canvas.delete("rom_selection_border") # Clear previous borders

        start_idx = dialog.selected_start_rom_tile_idx
        end_idx = dialog.selected_end_rom_tile_idx

        if start_idx == -1 : # No selection, or only start is set but end is not yet confirmed
            return
        
        # Determine the actual range to highlight (start_idx could be > end_idx before swap)
        # If end_idx is -1, it means only start_idx is set (single tile selection so far)
        current_selection_min_idx = min(start_idx, end_idx) if end_idx != -1 else start_idx
        current_selection_max_idx = max(start_idx, end_idx) if end_idx != -1 else start_idx

        tile_display_size = VIEWER_TILE_SIZE
        padding = 1
        canvas_width_current = canvas.winfo_width()
        if canvas_width_current <= 1 : return # Canvas not ready
        tiles_across = max(1, canvas_width_current // (tile_display_size + padding))

        # Iterate through all tiles in the defined selection range
        for idx_in_selection_range in range(current_selection_min_idx, current_selection_max_idx + 1):
            # Convert this absolute rom_tile_idx to its row/col in the conceptual full grid
            grid_r, grid_c = divmod(idx_in_selection_range, tiles_across)

            # Calculate pixel coordinates for this tile's border
            # These are relative to the scrollable region's 0,0
            border_x1 = grid_c * (tile_display_size + padding) + padding -1 # -1 for border outside
            border_y1 = grid_r * (tile_display_size + padding) + padding -1
            border_x2 = border_x1 + tile_display_size + 2 # +2 for border thickness
            border_y2 = border_y1 + tile_display_size + 2
            
            # Check if this tile is (at least partially) visible on the canvas
            # This simple check is okay as create_rectangle handles off-canvas coords gracefully.
            # More precise check would involve canvas.canvasx/y for visible region.
            view_x1 = canvas.canvasx(0)
            view_y1 = canvas.canvasy(0)
            view_x2 = canvas.canvasx(canvas.winfo_width())
            view_y2 = canvas.canvasy(canvas.winfo_height())

            # Only draw if the tile's bounding box overlaps the current view
            if border_x2 > view_x1 and border_x1 < view_x2 and \
               border_y2 > view_y1 and border_y1 < view_y2:
                canvas.create_rectangle(border_x1, border_y1, border_x2, border_y2,
                                        outline="yellow", width=2, tags="rom_selection_border")

    def _on_rom_canvas_motion(self, event):
        """Handles mouse motion over the ROM importer canvas for hover info and preview."""
        if not self.rom_import_dialog or not tk.Toplevel.winfo_exists(self.rom_import_dialog):
            return
        
        dialog = self.rom_import_dialog
        canvas = dialog.canvas
        rom_data = dialog.rom_data
        fine_offset = dialog.fine_offset_var.get()

        tile_display_size = VIEWER_TILE_SIZE
        padding = 1
        canvas_width_current = canvas.winfo_width()
        if canvas_width_current <= 1: return # Canvas not ready
        tiles_across = max(1, canvas_width_current // (tile_display_size + padding))

        # Get canvas coordinates relative to scrollable content
        cx = canvas.canvasx(event.x)
        cy = canvas.canvasy(event.y)

        # Determine which tile in the conceptual full grid is under cursor
        grid_col_under_cursor = int(cx // (tile_display_size + padding))
        grid_row_under_cursor = int(cy // (tile_display_size + padding))
        
        hovered_rom_tile_absolute_idx = grid_row_under_cursor * tiles_across + grid_col_under_cursor
        
        total_potential_tiles = (len(rom_data) - fine_offset) // TILE_WIDTH
        if total_potential_tiles <= 0: hovered_rom_tile_absolute_idx = -1 # No valid tiles

        if 0 <= hovered_rom_tile_absolute_idx < total_potential_tiles:
            # Calculate the byte position in the ROM for this hovered tile
            hovered_byte_start_pos = fine_offset + (hovered_rom_tile_absolute_idx * TILE_WIDTH)
            
            dialog.hover_info_text_var.set(
                f"Offset: {hovered_byte_start_pos} (0x{hovered_byte_start_pos:X}) | Grid Index: {hovered_rom_tile_absolute_idx}"
            )
            self._draw_rom_tile_preview(hovered_byte_start_pos) # Update live preview
        else:
            dialog.hover_info_text_var.set("Offset: N/A | Grid Index: N/A")
            dialog.preview_canvas.delete("all") # Clear preview if not over a valid tile

    def _on_rom_canvas_leave(self, event):
        """Clears hover info and preview when mouse leaves ROM importer canvas."""
        if not self.rom_import_dialog or not tk.Toplevel.winfo_exists(self.rom_import_dialog):
            return
        self.rom_import_dialog.hover_info_text_var.set("Offset: N/A | Grid Index: N/A")
        if hasattr(self.rom_import_dialog, 'preview_canvas'): # Check if preview_canvas exists
             self.rom_import_dialog.preview_canvas.delete("all")

    def _on_rom_canvas_left_click(self, event):
        """Handles left-click on ROM importer canvas for selecting tiles."""
        if not self.rom_import_dialog or not tk.Toplevel.winfo_exists(self.rom_import_dialog):
            return

        dialog = self.rom_import_dialog
        canvas = dialog.canvas
        rom_data = dialog.rom_data
        fine_offset = dialog.fine_offset_var.get()

        tile_display_size = VIEWER_TILE_SIZE
        padding = 1
        canvas_width_current = canvas.winfo_width()
        if canvas_width_current <=1: return # Canvas not ready
        tiles_across = max(1, canvas_width_current // (tile_display_size + padding))

        cx = canvas.canvasx(event.x)
        cy = canvas.canvasy(event.y)
        
        clicked_grid_col = int(cx // (tile_display_size + padding))
        clicked_grid_row = int(cy // (tile_display_size + padding))
        clicked_rom_tile_absolute_idx = clicked_grid_row * tiles_across + clicked_grid_col

        total_potential_tiles = (len(rom_data) - fine_offset) // TILE_WIDTH
        if not (0 <= clicked_rom_tile_absolute_idx < total_potential_tiles):
            # Click was outside the area of actual tile data
            return

        if dialog.selected_start_rom_tile_idx == -1:
            # This is the first click, setting the start of the selection
            dialog.selected_start_rom_tile_idx = clicked_rom_tile_absolute_idx
            dialog.selected_end_rom_tile_idx = clicked_rom_tile_absolute_idx # Also end for single select
            dialog.import_button.config(state=tk.NORMAL) # Enable import
        else:
            # This is the second click, setting or updating the end of the selection
            dialog.selected_end_rom_tile_idx = clicked_rom_tile_absolute_idx
            # Auto-swap if end is before start
            if dialog.selected_end_rom_tile_idx < dialog.selected_start_rom_tile_idx:
                dialog.selected_start_rom_tile_idx, dialog.selected_end_rom_tile_idx = \
                    dialog.selected_end_rom_tile_idx, dialog.selected_start_rom_tile_idx
            # Import button is already enabled from the first click
        
        self._draw_rom_import_selection_highlight()
        self._update_rom_importer_info_labels() # Update "Tiles Selected" count

    def _on_rom_canvas_right_click(self, event):
        """Handles right-click on ROM importer canvas to cancel selection."""
        self._clear_rom_import_selection()

    def _clear_rom_import_selection(self):
        """Clears the current tile selection in the ROM importer dialog."""
        if not self.rom_import_dialog or not tk.Toplevel.winfo_exists(self.rom_import_dialog):
            return
        dialog = self.rom_import_dialog
        dialog.selected_start_rom_tile_idx = -1
        dialog.selected_end_rom_tile_idx = -1
        dialog.import_button.config(state=tk.DISABLED) # Disable import button
        self._draw_rom_import_selection_highlight() # Remove highlight
        self._update_rom_importer_info_labels() # Update "Tiles Selected" to 0

    def _update_rom_importer_info_labels(self):
        """Updates dynamic labels in the ROM importer (selected count, top-left byte)."""
        if not self.rom_import_dialog or not tk.Toplevel.winfo_exists(self.rom_import_dialog):
            return
        
        dialog = self.rom_import_dialog
        start = dialog.selected_start_rom_tile_idx
        end = dialog.selected_end_rom_tile_idx
        count = 0
        if start != -1: # A selection exists
            min_idx = min(start, end) if end != -1 else start
            max_idx = max(start, end) if end != -1 else start
            count = (max_idx - min_idx) + 1
        dialog.selection_info_text_var.set(f"Tiles Selected: {count}")

        # The top_left_grid_byte_offset_text_var is updated in _draw_rom_importer_canvas
        # as it depends on the current scroll position and fine_offset.

    def _draw_rom_tile_preview(self, rom_byte_start_pos):
        """Draws a single tile from ROM data into the preview canvas."""
        if not self.rom_import_dialog or not tk.Toplevel.winfo_exists(self.rom_import_dialog) or \
           not hasattr(self.rom_import_dialog, 'preview_canvas'): # Check preview_canvas exists
            return

        preview_canvas = self.rom_import_dialog.preview_canvas
        rom_data = self.rom_import_dialog.rom_data
        preview_canvas.delete("all")

        if rom_byte_start_pos < 0 or rom_byte_start_pos >= len(rom_data):
            return # Invalid offset

        # Extract 8 bytes for the tile, padding if near end of ROM
        if rom_byte_start_pos + TILE_WIDTH > len(rom_data):
            num_bytes_avail = len(rom_data) - rom_byte_start_pos
            tile_bytes_data = rom_data[rom_byte_start_pos:] + bytes(TILE_WIDTH - num_bytes_avail)
        else:
            tile_bytes_data = rom_data[rom_byte_start_pos : rom_byte_start_pos + TILE_WIDTH]

        pixel_render_size = EDITOR_PIXEL_SIZE # Use main editor's pixel size for preview
        for r_tile_pixel in range(TILE_HEIGHT): # 0-7
            row_byte = tile_bytes_data[r_tile_pixel]
            for c_tile_pixel in range(TILE_WIDTH): # 0-7
                pixel_is_set = (row_byte >> (7 - c_tile_pixel)) & 1
                color_hex = self.active_msx_palette[WHITE_IDX] if pixel_is_set else self.active_msx_palette[BLACK_IDX]
                
                x1 = c_tile_pixel * pixel_render_size
                y1 = r_tile_pixel * pixel_render_size
                x2 = x1 + pixel_render_size
                y2 = y1 + pixel_render_size
                preview_canvas.create_rectangle(x1, y1, x2, y2, fill=color_hex, outline="grey") # Use grey outline

    def _on_rom_canvas_keypress(self, event):
        """Handles keyboard navigation for the ROM importer canvas."""
        if not self.rom_import_dialog or not tk.Toplevel.winfo_exists(self.rom_import_dialog):
            return

        # Safely get canvas from dialog, it might not exist if dialog is closing
        canvas = getattr(self.rom_import_dialog, 'canvas', None)
        if not canvas or not canvas.winfo_exists():
            return
        
        key_pressed = event.keysym
        # Print yview *before* the action for comparison
        try:
            current_yview_before_action = canvas.yview()
            self.debug(f"[DEBUG] Keypress: {key_pressed}, Current yview (before action): {current_yview_before_action}")
        except tk.TclError: # Canvas might be gone
            self.debug(f"[DEBUG] Keypress: {key_pressed}, Error getting yview (canvas likely gone).")
            return


        action_taken = False
        if key_pressed == "Up":
            canvas.yview_scroll(-1, "units")
            action_taken = True
        elif key_pressed == "Down":
            canvas.yview_scroll(1, "units")
            action_taken = True
        elif key_pressed == "Left":
            canvas.xview_scroll(-1, "units")
            action_taken = True # Redraw might be needed if x-scroll changes which tiles are 'first' in a row
        elif key_pressed == "Right":
            canvas.xview_scroll(1, "units")
            action_taken = True
        elif key_pressed == "Prior": # PageUp
            canvas.yview_scroll(-1, "pages")
            action_taken = True
        elif key_pressed == "Next": # PageDown
            canvas.yview_scroll(1, "pages")
            action_taken = True
        elif key_pressed == "Home":
            canvas.yview_moveto(0.0)
            action_taken = True
        elif key_pressed == "End":
            canvas.yview_moveto(1.0)
            action_taken = True
        else:
            return # Not a handled key

        if action_taken:
            # Define a local function to be called by 'after'
            # This captures the current 'key_pressed' for the debug message
            def check_and_redraw_after_scroll(key_for_debug=key_pressed):
                # Check dialog and canvas existence again, as 'after' calls are delayed
                if not self.rom_import_dialog or not tk.Toplevel.winfo_exists(self.rom_import_dialog):
                    self.debug(f"[DEBUG] After '{key_for_debug}': ROM importer dialog no longer exists. Skipping check/redraw.")
                    return
                
                current_canvas_after = getattr(self.rom_import_dialog, 'canvas', None)
                if not current_canvas_after or not current_canvas_after.winfo_exists():
                    self.debug(f"[DEBUG] After '{key_for_debug}': ROM importer canvas no longer exists. Skipping check/redraw.")
                    return
                
                try:
                    yview_after = current_canvas_after.yview()
                    canvasy_0_after = current_canvas_after.canvasy(0)
                    canvasy_H_after = current_canvas_after.canvasy(current_canvas_after.winfo_height())
                    self.debug(f"[DEBUG] After '{key_for_debug}': yview()={yview_after}, canvasy(0)={canvasy_0_after}, canvasy(H)={canvasy_H_after}")
                except tk.TclError:
                    self.debug(f"[DEBUG] After '{key_for_debug}': TclError getting scroll state (canvas likely destroying).")
                    return # Don't proceed to redraw if canvas state is bad

                # Schedule the actual draw using after_idle
                # This ensures it runs after Tk's event loop is idle from other processing
                self.rom_import_dialog.after_idle(self._draw_rom_importer_canvas)

            # Schedule the check_and_redraw_after_scroll function
            canvas.after_idle(check_and_redraw_after_scroll) # Use after_idle for safety

        return "break" # Consume the event

    def _execute_rom_tile_import(self):
        """Reads selected tile data from ROM and appends to the main tileset."""
        global num_tiles_in_set, current_tile_index, tileset_patterns, tileset_colors, WHITE_IDX, BLACK_IDX

        if not self.rom_import_dialog or not tk.Toplevel.winfo_exists(self.rom_import_dialog):
            return

        dialog = self.rom_import_dialog
        start_rom_idx_in_grid = dialog.selected_start_rom_tile_idx
        end_rom_idx_in_grid = dialog.selected_end_rom_tile_idx
        rom_data = dialog.rom_data
        fine_offset = dialog.fine_offset_var.get()

        if start_rom_idx_in_grid == -1: # No selection made
            messagebox.showwarning("Import Error", "No tiles selected from ROM.", parent=dialog)
            return

        # Determine the actual range of tiles to import from the grid selection
        # If end_rom_idx_in_grid is -1, it means only start_rom_idx_in_grid was selected (single tile)
        actual_start_idx = min(start_rom_idx_in_grid, end_rom_idx_in_grid) if end_rom_idx_in_grid != -1 else start_rom_idx_in_grid
        actual_end_idx = max(start_rom_idx_in_grid, end_rom_idx_in_grid) if end_rom_idx_in_grid != -1 else start_rom_idx_in_grid
        
        num_tiles_to_import_attempt = (actual_end_idx - actual_start_idx) + 1
        imported_tiles_count = 0
        
        # It's good practice to clear "marked unused" state if the tileset is about to change
        # This is less critical for append, but good if this function were ever used for "replace"
        # For now, let's assume appending doesn't invalidate existing marks unless an imported
        # tile happens to be identical to a previously marked one.
        # self._clear_marked_unused(trigger_redraw=False) # Optional, consider implications

        for i in range(num_tiles_to_import_attempt):
            if num_tiles_in_set >= MAX_TILES:
                messagebox.showinfo(
                    "Import Limit Reached",
                    f"Tileset limit of {MAX_TILES} reached.\nImported {imported_tiles_count} of {num_tiles_to_import_attempt} selected tiles.",
                    parent=dialog
                )
                break # Stop importing further tiles

            # current_rom_tile_absolute_idx is the index within the conceptual full grid from ROM
            current_rom_tile_absolute_idx = actual_start_idx + i
            
            # Calculate the starting byte position in the original ROM data for this tile
            rom_byte_start_pos = fine_offset + (current_rom_tile_absolute_idx * TILE_WIDTH)

            if rom_byte_start_pos >= len(rom_data): # Should not happen if selection was valid
                print(f"Warning: ROM Import attempting to read past end of data. ROM Tile Idx: {current_rom_tile_absolute_idx}, Byte Pos: {rom_byte_start_pos}")
                break 

            # Prepare pattern and color data for the new tile
            new_tile_pattern_data = [[0] * TILE_WIDTH for _ in range(TILE_HEIGHT)]
            new_tile_color_data = [(WHITE_IDX, BLACK_IDX) for _ in range(TILE_HEIGHT)] # Default B/W

            # Extract 8 bytes for the tile, padding if near end of ROM
            if rom_byte_start_pos + TILE_WIDTH > len(rom_data):
                num_bytes_avail = len(rom_data) - rom_byte_start_pos
                tile_bytes_from_rom = rom_data[rom_byte_start_pos:] + bytes(TILE_WIDTH - num_bytes_avail)
            else:
                tile_bytes_from_rom = rom_data[rom_byte_start_pos : rom_byte_start_pos + TILE_WIDTH]

            # Populate pattern from the bytes
            for r_pixel in range(TILE_HEIGHT):
                row_byte_value = tile_bytes_from_rom[r_pixel]
                for c_pixel in range(TILE_WIDTH):
                    new_tile_pattern_data[r_pixel][c_pixel] = (row_byte_value >> (7 - c_pixel)) & 1
            
            # Assign to the next available slot in the main application's tileset
            # (tileset_patterns and tileset_colors are pre-initialized to MAX_TILES length)
            if num_tiles_in_set < MAX_TILES: # Double check, though outer loop also checks
                tileset_patterns[num_tiles_in_set] = new_tile_pattern_data
                tileset_colors[num_tiles_in_set] = new_tile_color_data
                
                num_tiles_in_set += 1
                imported_tiles_count += 1
                self._mark_project_modified() # Mark project as modified
            else: # Should have been caught by outer loop's break
                print("Error: MAX_TILES reached unexpectedly inside import loop.")
                break


        if imported_tiles_count > 0:
            current_tile_index = num_tiles_in_set - 1 # Select the last imported tile
            
            self.clear_all_caches() # Imported tiles mean existing caches are invalid
            self.invalidate_minimap_background_cache() # If supertiles/map get auto-updated
            
            self.update_all_displays(changed_level="all") # Refresh all UI
            self.scroll_viewers_to_tile(current_tile_index) # Scroll to new tile
            self._update_editor_button_states() # Enable/disable add/insert/delete
            self._update_edit_menu_state() # Update copy/paste availability
            
            messagebox.showinfo("Import Successful", f"Successfully imported {imported_tiles_count} tile(s).", parent=dialog)

        self._close_rom_importer_dialog() # Close the importer dialog

    def _get_zoomed_supertile_pixel_dims(self):
        """
        Calculates the pixel width and height of one supertile on the map canvas
        at the current zoom level, based on the project's supertile dimensions.
        Returns a tuple (width_pixels, height_pixels).
        """
        zoomed_tile_size = self.get_zoomed_tile_size() # This is pixels per TILE_WIDTH/TILE_HEIGHT (8x8) unit

        if zoomed_tile_size <= 0: # Defensive check
            return 0, 0

        zoomed_supertile_pixel_width = self.supertile_grid_width * zoomed_tile_size
        zoomed_supertile_pixel_height = self.supertile_grid_height * zoomed_tile_size
        
        # Ensure minimum 1 pixel if dimensions are very small but > 0
        zoomed_supertile_pixel_width = max(1, zoomed_supertile_pixel_width)
        zoomed_supertile_pixel_height = max(1, zoomed_supertile_pixel_height)

        return zoomed_supertile_pixel_width, zoomed_supertile_pixel_height

    def _update_supertile_rotate_button_state(self):
        """
        Updates the state of the supertile rotate button based on whether
        the current supertile dimensions are square.
        """
        if hasattr(self, 'st_rotate_button') and self.st_rotate_button.winfo_exists():
            try:
                if self.supertile_grid_width == self.supertile_grid_height:
                    self.st_rotate_button.config(state=tk.NORMAL)
                else:
                    self.st_rotate_button.config(state=tk.DISABLED)
            except tk.TclError:
                # Widget might be in the process of being destroyed, or not fully ready
                pass
        # else: button doesn't exist yet, will be configured when created

    def _reconfigure_supertile_definition_canvas(self):
        """
        Reconfigures the size of the supertile definition canvas based on the
        current self.supertile_grid_width and self.supertile_grid_height.
        Then redraws its content.
        """
        if hasattr(self, 'supertile_def_canvas') and self.supertile_def_canvas.winfo_exists():
            try:
                # SUPERTILE_DEF_TILE_SIZE is the display size of one mini-tile (e.g., 32)
                new_canvas_w = self.supertile_grid_width * SUPERTILE_DEF_TILE_SIZE
                new_canvas_h = self.supertile_grid_height * SUPERTILE_DEF_TILE_SIZE
                
                # Ensure minimum practical size for the canvas
                new_canvas_w = max(SUPERTILE_DEF_TILE_SIZE, new_canvas_w) # Min width of one mini-tile
                new_canvas_h = max(SUPERTILE_DEF_TILE_SIZE, new_canvas_h) # Min height of one mini-tile

                self.supertile_def_canvas.config(width=new_canvas_w, height=new_canvas_h)
                
                # The scrollregion for this canvas might not be strictly necessary if it's always
                # sized to fit its content perfectly and doesn't scroll.
                # If it were to scroll (e.g., fixed size canvas viewing larger def),
                # then scrollregion would need update: self.supertile_def_canvas.config(scrollregion=(0,0,new_canvas_w, new_canvas_h))

                self.draw_supertile_definition_canvas() # Redraw content after resize
            except tk.TclError:
                # print("TclError during supertile definition canvas reconfiguration.")
                pass
            except Exception as e:
                # print(f"Error reconfiguring supertile definition canvas: {e}")
                pass
        # else: canvas not yet created or already destroyed.


    def create_map_render_of_supertile(self, supertile_index, target_render_width, target_render_height):
        # Ensure target dimensions are at least 1x1
        safe_target_render_width = max(1, int(target_render_width))
        safe_target_render_height = max(1, int(target_render_height))

        cache_key = (supertile_index, safe_target_render_width, safe_target_render_height, self.supertile_grid_width, self.supertile_grid_height)
        if cache_key in self.map_render_cache:
            return self.map_render_cache[cache_key]

        img = tk.PhotoImage(width=safe_target_render_width, height=safe_target_render_height)

        if not (0 <= supertile_index < num_supertiles):
            img.put(INVALID_SUPERTILE_COLOR, to=(0, 0, safe_target_render_width, safe_target_render_height))
            self.map_render_cache[cache_key] = img
            return img

        definition = supertiles_data[supertile_index]
        src_st_tile_grid_w = self.supertile_grid_width  # Number of base tiles across in the supertile definition
        src_st_tile_grid_h = self.supertile_grid_height # Number of base tiles down in the supertile definition

        if src_st_tile_grid_w <= 0 or src_st_tile_grid_h <= 0: # Should ideally be caught by project settings validation
            img.put(INVALID_SUPERTILE_COLOR, to=(0, 0, safe_target_render_width, safe_target_render_height))
            self.map_render_cache[cache_key] = img
            return img
        
        # Check definition structure consistency against project settings
        if len(definition) != src_st_tile_grid_h or \
           (src_st_tile_grid_h > 0 and (len(definition[0]) != src_st_tile_grid_w)):
            # This supertile's internal structure doesn't match current project dimensions.
            # This can happen if project ST dimensions change after STs were defined.
            # print(f"Warning: Supertile {supertile_index} internal dim mismatch for create_map_render. Expected {src_st_tile_grid_w}x{src_st_tile_grid_h}")
            img.put(INVALID_SUPERTILE_COLOR, to=(0, 0, safe_target_render_width, safe_target_render_height)) # Mark as invalid
            self.map_render_cache[cache_key] = img
            return img

        # Pixel dimensions of one original base tile (e.g., 8x8 TILE_WIDTH/HEIGHT)
        # when rendered within the target_render_width/height.
        # This is how many output pixels one base tile will occupy on average.
        output_pixels_per_base_tile_w = safe_target_render_width / src_st_tile_grid_w
        output_pixels_per_base_tile_h = safe_target_render_height / src_st_tile_grid_h

        # Heuristic check: if a base tile column or row would be rendered to less than 1 pixel,
        # it's likely too small to render meaningfully detail by detail.
        if safe_target_render_width < src_st_tile_grid_w or safe_target_render_height < src_st_tile_grid_h :
             # Render the supertile as a solid block of its "average" or most dominant color, or just an invalid color.
             # For simplicity, using invalid color. A more advanced version could average.
             # print(f"Warning: Supertile {supertile_index} render target ({safe_target_render_width}x{safe_target_render_height}) too small for its grid ({src_st_tile_grid_w}x{src_st_tile_grid_h}). Filling with placeholder.")
             img.put(INVALID_SUPERTILE_COLOR, to=(0, 0, safe_target_render_width, safe_target_render_height))
             self.map_render_cache[cache_key] = img
             return img

        # Ratio of source base tile pixels (e.g., TILE_WIDTH=8) to its display size within the scaled render.
        # This tells us how many source pixels are covered by one *output* pixel in that scaled base tile's area.
        src_pixels_per_output_pixel_w_ratio = TILE_WIDTH / output_pixels_per_base_tile_w if output_pixels_per_base_tile_w > 1e-9 else float('inf')
        src_pixels_per_output_pixel_h_ratio = TILE_HEIGHT / output_pixels_per_base_tile_h if output_pixels_per_base_tile_h > 1e-9 else float('inf')

        for y_out in range(safe_target_render_height): # Iterate over each pixel of the output PhotoImage
            row_colors_hex = []
            for x_out in range(safe_target_render_width):
                # Determine which source base tile (in the supertile grid) this output pixel (x_out, y_out) falls into.
                # Ensure result is int and clamped to valid range.
                src_base_tile_c_in_st_grid = min(src_st_tile_grid_w - 1, int(x_out / output_pixels_per_base_tile_w))
                src_base_tile_r_in_st_grid = min(src_st_tile_grid_h - 1, int(y_out / output_pixels_per_base_tile_h))
                
                # Determine the coordinate of (x_out, y_out) *within* the area of that specific scaled base tile.
                # E.g., if a base tile scales to 4x4 output pixels, this would be (0..3.999, 0..3.999)
                x_in_scaled_base_tile_area = (x_out / output_pixels_per_base_tile_w - src_base_tile_c_in_st_grid) * output_pixels_per_base_tile_w
                y_in_scaled_base_tile_area = (y_out / output_pixels_per_base_tile_h - src_base_tile_r_in_st_grid) * output_pixels_per_base_tile_h
                
                # Map this coordinate back to the original source base tile's pixel coordinates (e.g., 0-7 for an 8x8 tile).
                src_pixel_c_in_base_tile = min(TILE_WIDTH - 1, int(x_in_scaled_base_tile_area * src_pixels_per_output_pixel_w_ratio))
                src_pixel_r_in_base_tile = min(TILE_HEIGHT - 1, int(y_in_scaled_base_tile_area * src_pixels_per_output_pixel_h_ratio))

                pixel_color_hex_final = INVALID_TILE_COLOR # Default on error

                try:
                    # These indices into `definition` should be safe due to earlier clamping
                    tile_idx_from_st_def = definition[src_base_tile_r_in_st_grid][src_base_tile_c_in_st_grid]

                    if 0 <= tile_idx_from_st_def < num_tiles_in_set:
                        # Bounds check for pattern/color array access
                        if not (0 <= src_pixel_r_in_base_tile < TILE_HEIGHT and \
                                len(tileset_patterns[tile_idx_from_st_def]) > src_pixel_r_in_base_tile and \
                                0 <= src_pixel_c_in_base_tile < TILE_WIDTH and \
                                len(tileset_patterns[tile_idx_from_st_def][src_pixel_r_in_base_tile]) > src_pixel_c_in_base_tile and \
                                len(tileset_colors[tile_idx_from_st_def]) > src_pixel_r_in_base_tile):
                            pixel_color_hex_final = INVALID_TILE_COLOR # Malformed tile data
                        else:
                            pattern_pixel_val = tileset_patterns[tile_idx_from_st_def][src_pixel_r_in_base_tile][src_pixel_c_in_base_tile]
                            fg_idx_val, bg_idx_val = tileset_colors[tile_idx_from_st_def][src_pixel_r_in_base_tile]
                            
                            if not (0 <= fg_idx_val < len(self.active_msx_palette) and 0 <= bg_idx_val < len(self.active_msx_palette)):
                                fg_color = INVALID_TILE_COLOR; bg_color = INVALID_TILE_COLOR
                            else:
                                fg_color = self.active_msx_palette[fg_idx_val]
                                bg_color = self.active_msx_palette[bg_idx_val]
                            
                            pixel_color_hex_final = fg_color if pattern_pixel_val == 1 else bg_color
                    # else: tile_idx_from_st_def is out of bounds, pixel_color_hex_final remains INVALID_TILE_COLOR
                except IndexError:
                    pixel_color_hex_final = INVALID_TILE_COLOR # Fallback for any unexpected index issue
                
                row_colors_hex.append(pixel_color_hex_final)
            
            try:
                if safe_target_render_width > 0:
                    img.put("{" + " ".join(row_colors_hex) + "}", to=(0, y_out))
            except tk.TclError as e:
                if row_colors_hex and safe_target_render_width > 0:
                    img.put(row_colors_hex[0], to=(0, y_out, safe_target_render_width, y_out + 1))

        self.map_render_cache[cache_key] = img
        return img

    def _handle_map_scroll_event(self, event=None):
        # This method is called by scrollbar interactions.
        # It needs to redraw the main map canvas content and the minimap.
        # A small delay can sometimes help smooth out rapid scrollbar dragging,
        # but let's try direct calls first. If it's choppy, we can add debouncing.
        if self.map_canvas and self.map_canvas.winfo_exists():
            self.draw_map_canvas() # Redraw main map content
            self.draw_minimap()    # Update minimap

    def _perform_debounced_rom_canvas_draw(self):
        """Called by the after timer to actually redraw the ROM canvas after debouncing Configure."""
        if not self.rom_import_dialog or not tk.Toplevel.winfo_exists(self.rom_import_dialog):
            return
        
        dialog = self.rom_import_dialog
        if hasattr(dialog, 'redraw_timer_id'): # Check if attribute exists
            dialog.redraw_timer_id = None

        # Ensure canvas exists and is of a minimum size before attempting to draw
        canvas = getattr(dialog, 'canvas', None) # Safely get canvas
        if not canvas or not canvas.winfo_exists():
            return
            
        if canvas.winfo_width() < VIEWER_TILE_SIZE or \
           canvas.winfo_height() < VIEWER_TILE_SIZE:
            # If still too small, reschedule. Clear previous timer if it somehow exists.
            if hasattr(dialog, 'redraw_timer_id') and dialog.redraw_timer_id is not None:
                 dialog.after_cancel(dialog.redraw_timer_id)
            dialog.redraw_timer_id = dialog.after(50, self._perform_debounced_rom_canvas_draw)
            return

        self._draw_rom_importer_canvas()

# --- Main Execution ---
if __name__ == "__main__":
    import argparse # Import the argparse module

    # --- Argument Parsing ---
    parser = argparse.ArgumentParser(description="MSX Tile Forge - Tile and Map Editor.")
    parser.add_argument(
        "--debug",
        action="store_true", # Sets args.debug to True if --debug is present
        help="Enable detailed debug console output."
    )
    args = parser.parse_args()
    # --- End Argument Parsing ---

    root = tk.Tk()
    root.withdraw()

    # --- Make debug state globally accessible or pass to app ---
    # Option 1: Store on root and have app access it (simple)
    root.app_debug_mode = args.debug
    if root.app_debug_mode:
        print("[INFO] Debug mode enabled via --debug flag.")

    # Option 2: Pass directly to TileEditorApp constructor (if you modify it)
    # For now, Option 1 is easier to integrate without changing constructor.

    # ... (rest of your icon setup, splash screen, etc.) ...

    # --- Splash Screen Setup ---
    splash_win = tk.Toplevel(root)
    splash_win.overrideredirect(True)
    splash_win.config(cursor="watch")

    try:
        image_data = base64.b64decode(SPLASH_IMAGE)
        splash_photo = tk.PhotoImage(data=image_data)
        splash_label = tk.Label(splash_win, image=splash_photo, borderwidth=0)
        splash_label.pack()
        img_width = splash_photo.width()
        img_height = splash_photo.height()
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        x_pos = (screen_width // 2) - (img_width // 2)
        y_pos = (screen_height // 2) - (img_height // 2)
        splash_win.geometry(f'{img_width}x{img_height}+{x_pos}+{y_pos}')

        def show_main_window():
            splash_win.destroy()
            root.deiconify()
            # If you choose Option 2 for debug_mode, pass it here:
            # app = TileEditorApp(root, debug_mode=args.debug)
            app = TileEditorApp(root) # Using Option 1 for now
            if hasattr(app, 'debug') and callable(app.debug): # Check if debug method exists
                 app.debug("[DEBUG] Main application initialized.")


        root.after(3000, show_main_window)
        splash_label.image = splash_photo

    except Exception as e:
        print(f"Error displaying splash screen: {e}")
        root.deiconify()
        # app = TileEditorApp(root, debug_mode=args.debug) # If passing
        app = TileEditorApp(root) # Using Option 1

    root.mainloop()
